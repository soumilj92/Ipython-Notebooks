{
 "metadata": {
  "name": "",
  "signature": "sha256:ff68083dbeb255b5d4277d226d0b26b445ad7fa4fe241bd3333f720f2120a8fe"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Time Series Analysis using Pandas "
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Kaggle Case Study : Bike Sharing Demand "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import pandas as pd\n",
      "import numpy as np\n",
      "from pandas import Series,DataFrame\n",
      "import matplotlib.pyplot as plt\n",
      "import math\n",
      "import os"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 454
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Os module is used for directory operations "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "os.getcwd()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 199,
       "text": [
        "'/Users/soumiljain/Desktop/bike/Archive/data'"
       ]
      }
     ],
     "prompt_number": 199
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "!ls"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "data_panel    foo.pkl       spx_px        test1.csv\r\n",
        "fec.pickle    fred_fx.csv   stk_prices    test2.csv\r\n",
        "foo.csv       macrodata.csv stock_prices\r\n"
       ]
      }
     ],
     "prompt_number": 201
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "pd.__version__"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 203,
       "text": [
        "'0.14.1'"
       ]
      }
     ],
     "prompt_number": 203
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We are using pandas version 0.14.1"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "os.chdir('archive')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "OSError",
       "evalue": "[Errno 2] No such file or directory: 'archive'",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)",
        "\u001b[0;32m<ipython-input-204-c7c698b7a75c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'archive'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
        "\u001b[0;31mOSError\u001b[0m: [Errno 2] No such file or directory: 'archive'"
       ]
      }
     ],
     "prompt_number": 204
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "!ls"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "data_panel    foo.pkl       spx_px        test1.csv\r\n",
        "fec.pickle    fred_fx.csv   stk_prices    test2.csv\r\n",
        "foo.csv       macrodata.csv stock_prices\r\n"
       ]
      }
     ],
     "prompt_number": 205
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "The following statement is used so that all the graphs and plots are displayed within the notebook"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%pylab inline"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Populating the interactive namespace from numpy and matplotlib\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "WARNING: pylab import has clobbered these variables: ['datetime']\n",
        "`%matplotlib` prevents importing * from pylab and numpy\n"
       ]
      }
     ],
     "prompt_number": 206
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "For example: "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(np.arange(100))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 207,
       "text": [
        "[<matplotlib.lines.Line2D at 0x10afb9390>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAXsAAAEACAYAAABS29YJAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAErNJREFUeJzt3V2MXGd9gPHn34S0BApWbpzEdj6KSEkQQUQ1TRFVtjQs\nLqIhVyFIsY1VuCkVwYtDHSQS3xhB5QiQqlgJH5GF1JQAVWRXRI2bZgUSElB7tg04bpKqEQTkDQLC\n1wUblH8v5mx8vNldz56ZnY/zPj9pxczsfJx9xb5+8s47ZyMzkSS12++N+gAkSevPyV6SCuBkL0kF\ncLKXpAI42UtSAZzsJakAq072EfHFiJiPiMdqt10QEUcj4omIeDgiNtS+d3tEPBkRJyNiej0PXJLU\nu7OV/X3AtiW37QWOZuYVwCPVdSLiKuA9wFXVY+6OCP/LQZLGwKqTcWZ+E/j5kptvAA5Vlw8BN1aX\n3w3cn5nPZ+bTwFPAmwd3qJKkppqU98bMnK8uzwMbq8sXA8/U7vcMsKmPY5MkDUhfyyzZPdfCaudb\n8FwMkjQGzm3wmPmIuDAzT0XERcCz1e0/ArbU7re5uu0MEeE/AJLUQGZG08c2KfvDwM7q8k7gwdrt\nN0fEeRFxOfBa4DvLPUFm+pXJnXfeOfJjGJcvx8KxcCxOf/32t8nHP5489NDp2/p1tq2X9wPfAv44\nIn4YEbuATwJvj4gngLdV18nME8ADwAngIeBvcxBHKEkF6XRg69bu/1599eCed9VlnMx87wrfun6F\n+38C+ES/ByVJpVlYgP374eBBOHAAtm+HaLxo81JN1uw1IFNTU6M+hLHhWJzmWJxWylh0OvC+98GW\nLTA3BxdfPPjXiGGvtESEqzuSxNpqPiLIPt6gtewlaQSGUfN1ns5AkoZoYQHuvBPe8Q74yEfgyJH1\nn+jBspekoZmb69b85s3Dqfk6y16S1tlizU9Pw8zM8Gq+zrKXpHU0ypqvs+wlaR2MQ83XWfaSNGDD\n3mnTC8tekgZkVDttemHZS9IAjGPN11n2ktSHca75OstekhparPlLLhnPmq+z7CVpjeo1v2cPHD48\n3hM9WPaStCaTVPN1lr0k9WDp2vwk1HydZS9JZzHuO216YdlL0gomZadNLyx7SVrGpK7Nr8Syl6Sa\nSdxp0wvLXpIqbav5OsteUvEmfadNLyx7SUVrw06bXlj2korUpp02vbDsJRWnlJqvs+wlFaO0mq+z\n7CUVYVz+FuyoWPaSWq3+t2B37y6r5usse0mt1enArl3l1nydZS+pdepr8zMz5dZ8nWUvqVVK3GnT\nC8teUiuUvNOmF5a9pIlnzZ+dZS9pYlnzvbPsJU0ka35tLHtJE2Xp+eat+d40LvuIuB24BXgBeAzY\nBbwC+DJwKfA0cFNmPtf/YUpSu883v94alX1EXAZ8ALgmM98AnAPcDOwFjmbmFcAj1XVJ6ksJ55tf\nb02XcX4JPA+cHxHnAucDPwZuAA5V9zkE3Nj3EUoqWqcDW7fCsWPdmt+xAyJGfVSTp9Fkn5k/A+4C\nfkB3kn8uM48CGzNzvrrbPLBxIEcpqTjutBmsRmv2EfEa4MPAZcAvgK9ExC31+2RmRkQu9/h9+/a9\neHlqaoqpqakmhyGppVybh9nZWWZnZwf2fJG57Hy8+oMi3gO8PTPfX13fDlwLvA34i8w8FREXAY9m\n5uuWPDabvKak9ltYgP374eBBuOsuuOUWl2wWRQSZ2Xg0mq7ZnwSujYiXR0QA1wMngCPAzuo+O4EH\nmx6YpLIsrs0fP96t+e3bnegHqVHZA0TER+lO6C8Ax4H3A38IPABcwgpbLy17SXXWfG/6LfvGk33j\nF3Syl1Spr83fc0+Za/O9GtUyjiQ15r754fPcOJKGynPajIZlL2ko3Dc/Wpa9pHU3N9etef8W7OhY\n9pLWzWLNT0/D7t3W/ChZ9pLWRacDu3ZZ8+PCspc0UPW1+ZkZa35cWPaSBsadNuPLspfUN3fajD/L\nXlJfrPnJYNlLasSanyyWvaQ1q++b73Rg06ZRH5HOxrKX1LP6vvnFnTZO9JPBspfUE9fmJ5tlL2lV\nCwtwxx3dtfk9e1ybn1SWvaQVHT/erflLL7XmJ51lL+klFmt+2za47TbPN98Glr2kM9T/epQ13x6W\nvSTgzH3ze/ZY821j2Uuy5gtg2UsF82/BlsOylwplzZfFspcKY82XybKXCuKnYMtl2UsF8AyVsuyl\nlnNtXmDZS63lvnnVWfZSC1nzWsqyl1rEnTZaiWUvtYQ7bbQay16acO60US8se2mCWfPqlWUvTSBr\nXmtl2UsTZm6uW/ObN1vz6p1lL02IxZqfnoaZGWtea9O47CNiA/B54PVAAruAJ4EvA5cCTwM3ZeZz\n/R+mVDbX5tWvfsr+s8DXM/NK4GrgJLAXOJqZVwCPVNclNeTavAYlMnPtD4p4NdDJzD9acvtJ4LrM\nnI+IC4HZzHzdkvtkk9eUSlOv+XvvdZIvXUSQmdH08U3L/nLgJxFxX0Qcj4jPRcQrgI2ZOV/dZx7Y\n2PTApFJZ81oPTSf7c4FrgLsz8xrgNyxZsqny3YSX1qDTga1b4dix7tr8jh0QjVtOOq3pG7TPAM9k\n5ner618FbgdORcSFmXkqIi4Cnl3uwfv27Xvx8tTUFFNTUw0PQ2qHhQXYvx8OHoQDB2D7dif50s3O\nzjI7Ozuw52u0Zg8QEd8A3p+ZT0TEPuD86ls/zcxPRcReYENm7l3yONfspZr6GSrvucclGy2v3zX7\nfib7N9Ldenke8L90t16eAzwAXMIKWy+d7KUua15rMbLJvvELOtlL1rzWbFS7cSQ14PnmNSqeG0ca\nEj8Fq1Gy7KV15r55jQPLXlpH/i1YjQvLXloH9Zrfs8e1eY2eZS8NmDWvcWTZSwPiThuNM8teGgB3\n2mjcWfZSH9xpo0lh2UsNWfOaJJa9tEbWvCaRZS+twdxct+Y3b7bmNVkse6kHizU/PQ0zM9a8Jo9l\nL52Fa/NqA8teWoFr82oTy15ahjWvtrHspRprXm1l2UsVd9qozSx7Fa++02b3bmte7WTZq2jWvEph\n2atI7ptXaSx7FcfzzatElr2KsbAAd9zhX49SmSx7FeH48W7NX3qpNa8yWfZqtcW1+W3b4LbbrHmV\ny7JXa83Nwc6dfgpWAsteLVTfaeOnYKUuy16t4jltpOVZ9mqF+jlt3DcvvZRlr4lnzUtnZ9lrYnmG\nSql3lr0mkjUvrY1lr4lSr/k9e6x5qVeWvSaG57SRmrPsNfaWrs37KVhp7Sx7jTVrXhqMvso+Is6J\niE5EHKmuXxARRyPiiYh4OCI2DOYwVZqla/PWvNSffpdxbgVOAFld3wsczcwrgEeq69KadDqwdWv3\nTJVzc7B9O0SM+qikydZ4so+IzcA7gc8Di7+KNwCHqsuHgBv7OjoVxZqX1k8/a/afBm4DXlW7bWNm\nzleX54GNfTy/CuLavLS+GpV9RLwLeDYzO5yu+jNkZnJ6eUdaljttpOFoWvZvAW6IiHcCfwC8KiK+\nBMxHxIWZeSoiLgKeXe7B+/bte/Hy1NQUU1NTDQ9Dk8xPwUorm52dZXZ2dmDPF90A7+MJIq4D9mTm\nX0fEPwA/zcxPRcReYENm7l1y/+z3NTXZFhZg/344eBAOHPANWKkXEUFmNv5NGdQ++8XZ+5PAAxHx\nN8DTwE0Den61hDUvjUbfZb/mF7Tsi1Sv+bvugltusealtRiXspdW5E4bafQ8N47WjTttpPFh2Wtd\nWPPSeLHsNVB+ClYaT5a9Bsaal8aXZa++uTYvjT/LXn1x37w0GSx7NbK05v1bsNJ4s+y1Zq7NS5PH\nslfPXJuXJpdlr55Y89Jks+y1KmteagfLXiuam3OnjdQWlr1eYrHmp6eteaktLHudwZqX2smyF3Bm\nzc/MWPNS21j2erHmN2+25qW2suwLtrTm/RSs1F6WfaHqNd/pwKZNoz4iSevJsi/M0p02R4440Usl\nsOwL4qdgpXJZ9gXwU7CSLPuW83zzksCyby3PNy+pzrJvIWte0lKWfYtY85JWYtm3hDUvaTWW/YSz\n5iX1wrKfYNa8pF5Z9hPImpe0Vpb9hLHmJTVh2U8Ia15SPyz7CeA5bST1y7IfY/Wa37PHc9pIas6y\nH1PWvKRBsuzHjGeolLQeGk32EbElIh6NiO9HxPci4kPV7RdExNGIeCIiHo6IDYM93HbrdGDrVjh2\nrFvzO3ZAxKiPSlIbNC3754Hdmfl64FrggxFxJbAXOJqZVwCPVNd1Fu60kbTeGq3ZZ+Yp4FR1+dcR\n8TiwCbgBuK662yFgFif8Vbk2L2kY+l6zj4jLgDcB3wY2ZuZ89a15YGO/z99W7rSRNEx97caJiFcC\nXwNuzcxfRW2BOTMzInK5x+3bt+/Fy1NTU0xNTfVzGBPHmpd0NrOzs8zOzg7s+SJz2fn47A+MeBnw\nr8BDmfmZ6raTwFRmnoqIi4BHM/N1Sx6XTV9z0i0swP79cPAgHDgA27f7Bqyk3kQEmdl4xmi6GyeA\nLwAnFif6ymFgZ3V5J/Bg0wNrG3faSBqlRmUfEW8FvgH8N7D4BLcD3wEeAC4BngZuysznljy2qLK3\n5iUNQr9l33gZp/ELFjTZ189Qee+9rs1Lam4kyzhanfvmJY0bz40zYHNz3ZrfvNmdNpLGh2U/IIs1\nPz0Nu3db85LGi2U/AJ0O7NplzUsaX5Z9H+pr8zMz1ryk8WXZN+TfgpU0SSz7NXKnjaRJZNmvgTUv\naVJZ9j2w5iVNOsv+LDxDpaQ2sOxX4PnmJbWJZb8Ma15S21j2NUvX5q15SW1h2VfcaSOpzYove3fa\nSCpB0WXv2rykUhRZ9u60kVSa4srempdUomLK3pqXVLIiyt6al1S6Vpe9++Ylqau1Ze++eUk6rXVl\n7755SXqpVpX93Fy35v1bsJJ0plaU/WLNT0/D7t3WvCQtNfFl3+nArl3WvCStZmLLvr42PzNjzUvS\naiay7N1pI0lrM1Fl704bSWpmYsrempek5sa+7K15SerfWJd9veY7Hdi0adRHJEmTaSzLfukZKo8c\ncaKXpH6MXdl7hkpJGryxKXvPUClJ62fgk31EbIuIkxHxZET8fS+P6XRg61Y4dqxb8zt2QMSgj0yS\nyjXQyT4izgH+EdgGXAW8NyKuXOn+pe+0mZ2dHfUhjA3H4jTH4jTHYnAGXfZvBp7KzKcz83ngn4F3\nL3dHa97/I9c5Fqc5Fqc5FoMz6Ml+E/DD2vVnqtvOUHLNS9IoDHo3TvZyp8Wad5KXpOGIzJ7m596e\nLOJaYF9mbquu3w68kJmfqt1ncC8oSQXJzMaL3YOe7M8F/gf4S+DHwHeA92bm4wN7EUnSmg10GScz\nfxcRfwf8G3AO8AUnekkavYGWvSRpPA31E7RNPnDVFhGxJSIejYjvR8T3IuJD1e0XRMTRiHgiIh6O\niA2jPtZhiYhzIqITEUeq60WORURsiIivRsTjEXEiIv604LG4vfodeSwi/ikifr+UsYiIL0bEfEQ8\nVrttxZ+9Gqsnqzl1+mzPP7TJfq0fuGqh54Hdmfl64Frgg9XPvxc4mplXAI9U10txK3CC07u4Sh2L\nzwJfz8wrgauBkxQ4FhFxGfAB4JrMfAPdpeCbKWcs7qM7P9Yt+7NHxFXAe+jOpduAuyNi1fl8mGXf\n8weu2igzT2XmXHX518DjdD+DcANwqLrbIeDG0RzhcEXEZuCdwOeBxR0GxY1FRLwa+PPM/CJ03/fK\nzF9Q4FgAv6QbRedXmz3Op7vRo4ixyMxvAj9fcvNKP/u7gfsz8/nMfBp4iu4cu6JhTvY9feCqBFXB\nvAn4NrAxM+erb80DG0d0WMP2aeA24IXabSWOxeXATyLivog4HhGfi4hXUOBYZObPgLuAH9Cd5J/L\nzKMUOBY1K/3sF9OdQxeddT4d5mTvO8FARLwS+Bpwa2b+qv697L5b3vpxioh3Ac9mZofTVX+GUsaC\n7o64a4C7M/Ma4DcsWaYoZSwi4jXAh4HL6E5mr4yIW+r3KWUsltPDz77quAxzsv8RsKV2fQtn/svU\nehHxMroT/Zcy88Hq5vmIuLD6/kXAs6M6viF6C3BDRPwfcD/wtoj4EmWOxTPAM5n53er6V+lO/qcK\nHIs/Ab6VmT/NzN8B/wL8GWWOxaKVfieWzqebq9tWNMzJ/j+B10bEZRFxHt03Fw4P8fVHKiIC+AJw\nIjM/U/vWYWBndXkn8ODSx7ZNZn4sM7dk5uV034D7j8zcTpljcQr4YURcUd10PfB94AiFjQXdN6av\njYiXV78v19N9A7/EsVi00u/EYeDmiDgvIi4HXkv3Q6wry8yhfQF/RfcTtk8Btw/ztUf9BbyV7vr0\nHNCpvrYBFwD/DjwBPAxsGPWxDnlcrgMOV5eLHAvgjcB3gf+iW7OvLngsPkr3H7vH6L4h+bJSxoLu\nf+X+GFig+/7mrtV+duBj1Vx6EnjH2Z7fD1VJUgHG5s8SSpLWj5O9JBXAyV6SCuBkL0kFcLKXpAI4\n2UtSAZzsJakATvaSVID/BzaS7VohHiJSAAAAAElFTkSuQmCC\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10aec2350>"
       ]
      }
     ],
     "prompt_number": 207
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Thus the plot is displayed within the notebook "
     ]
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "New datatype in pandas for datetime .Its very efficient and fast . Really good for millions of observations data (very large scale time series processing )"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(np.random.randn(1000).cumsum())"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 208,
       "text": [
        "[<matplotlib.lines.Line2D at 0x10b3234d0>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10b1103d0>"
       ]
      }
     ],
     "prompt_number": 208
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "This code generates a series of 1000 random numbers and calculate its cumulative sum column , so we get this decreasing graph "
     ]
    },
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Some REVISION"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.arange(5)[2:]#slicing"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 209,
       "text": [
        "array([2, 3, 4])"
       ]
      }
     ],
     "prompt_number": 209
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "index=['a','b','c','d','e']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 210
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s=Series(np.arange(5),index=index)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 211
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 212,
       "text": [
        "a    0\n",
        "b    1\n",
        "c    2\n",
        "d    3\n",
        "e    4\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 212
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So this is a vertical 1 dimentional series with labels/Index"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Series contains labels that identify the data"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Series object behaves much like a numpy array "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s*2"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 213,
       "text": [
        "a    0\n",
        "b    2\n",
        "c    4\n",
        "d    6\n",
        "e    8\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 213
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s+s"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 214,
       "text": [
        "a    0\n",
        "b    2\n",
        "c    4\n",
        "d    6\n",
        "e    8\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 214
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s/s"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 215,
       "text": [
        "a         inf\n",
        "b    1.000000\n",
        "c    1.000000\n",
        "d    1.000000\n",
        "e    1.000000\n",
        "dtype: float64"
       ]
      }
     ],
     "prompt_number": 215
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "slicing :"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s[2:3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 216,
       "text": [
        "c    2\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 216
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s['b']#value from labels"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 217,
       "text": [
        "1"
       ]
      }
     ],
     "prompt_number": 217
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s['b':]#slicing with labels"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 218,
       "text": [
        "b    1\n",
        "c    2\n",
        "d    3\n",
        "e    4\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 218
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s[[2,4]]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 219,
       "text": [
        "c    2\n",
        "e    4\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 219
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s[['c','e']]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 220,
       "text": [
        "c    2\n",
        "e    4\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 220
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "These were the ways of slicing we could do "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "dates=pd.date_range('2012-07-16','2012-07-21')\n",
      "dates"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 221,
       "text": [
        "<class 'pandas.tseries.index.DatetimeIndex'>\n",
        "[2012-07-16, ..., 2012-07-21]\n",
        "Length: 6, Freq: D, Timezone: None"
       ]
      }
     ],
     "prompt_number": 221
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is a DateTimeIndex variable array created "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "atemps=Series([101.5,98,95,99,100,92],index=dates)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 222
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "atemps"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 223,
       "text": [
        "2012-07-16    101.5\n",
        "2012-07-17     98.0\n",
        "2012-07-18     95.0\n",
        "2012-07-19     99.0\n",
        "2012-07-20    100.0\n",
        "2012-07-21     92.0\n",
        "Freq: D, dtype: float64"
       ]
      }
     ],
     "prompt_number": 223
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "atemps.index"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 224,
       "text": [
        "<class 'pandas.tseries.index.DatetimeIndex'>\n",
        "[2012-07-16, ..., 2012-07-21]\n",
        "Length: 6, Freq: D, Timezone: None"
       ]
      }
     ],
     "prompt_number": 224
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "idx=atemps.index[2]\n",
      "atemps[idx]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 225,
       "text": [
        "95.0"
       ]
      }
     ],
     "prompt_number": 225
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So we can use this way to find the temp at that day"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sdtemps=Series([73,78,77,78,78,77],index=dates)\n",
      "temps=DataFrame({'Austin':atemps,'San Diago':sdtemps})\n",
      "temps"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Austin</th>\n",
        "      <th>San Diago</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-07-16</th>\n",
        "      <td> 101.5</td>\n",
        "      <td> 73</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-17</th>\n",
        "      <td>  98.0</td>\n",
        "      <td> 78</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-18</th>\n",
        "      <td>  95.0</td>\n",
        "      <td> 77</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-19</th>\n",
        "      <td>  99.0</td>\n",
        "      <td> 78</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-20</th>\n",
        "      <td> 100.0</td>\n",
        "      <td> 78</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-21</th>\n",
        "      <td>  92.0</td>\n",
        "      <td> 77</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 226,
       "text": [
        "            Austin  San Diago\n",
        "2012-07-16   101.5         73\n",
        "2012-07-17    98.0         78\n",
        "2012-07-18    95.0         77\n",
        "2012-07-19    99.0         78\n",
        "2012-07-20   100.0         78\n",
        "2012-07-21    92.0         77"
       ]
      }
     ],
     "prompt_number": 226
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is how we make a dataframe using a dictionary inside the dataframe function "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps['Austin']#to get the austin column"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 227,
       "text": [
        "2012-07-16    101.5\n",
        "2012-07-17     98.0\n",
        "2012-07-18     95.0\n",
        "2012-07-19     99.0\n",
        "2012-07-20    100.0\n",
        "2012-07-21     92.0\n",
        "Freq: D, Name: Austin, dtype: float64"
       ]
      }
     ],
     "prompt_number": 227
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps['San Diago'][:3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 228,
       "text": [
        "2012-07-16    73\n",
        "2012-07-17    78\n",
        "2012-07-18    77\n",
        "Freq: D, Name: San Diago, dtype: int64"
       ]
      }
     ],
     "prompt_number": 228
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "If now we want the difference of 2 columns:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps['diff']=temps['Austin']-temps['San Diago']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 229
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Austin</th>\n",
        "      <th>San Diago</th>\n",
        "      <th>diff</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-07-16</th>\n",
        "      <td> 101.5</td>\n",
        "      <td> 73</td>\n",
        "      <td> 28.5</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-17</th>\n",
        "      <td>  98.0</td>\n",
        "      <td> 78</td>\n",
        "      <td> 20.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-18</th>\n",
        "      <td>  95.0</td>\n",
        "      <td> 77</td>\n",
        "      <td> 18.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-19</th>\n",
        "      <td>  99.0</td>\n",
        "      <td> 78</td>\n",
        "      <td> 21.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-20</th>\n",
        "      <td> 100.0</td>\n",
        "      <td> 78</td>\n",
        "      <td> 22.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-21</th>\n",
        "      <td>  92.0</td>\n",
        "      <td> 77</td>\n",
        "      <td> 15.0</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 230,
       "text": [
        "            Austin  San Diago  diff\n",
        "2012-07-16   101.5         73  28.5\n",
        "2012-07-17    98.0         78  20.0\n",
        "2012-07-18    95.0         77  18.0\n",
        "2012-07-19    99.0         78  21.0\n",
        "2012-07-20   100.0         78  22.0\n",
        "2012-07-21    92.0         77  15.0"
       ]
      }
     ],
     "prompt_number": 230
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So there are a lot of ways we can play with this data using these dataframes"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We can also call a column name using . operator "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps.Austin"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 231,
       "text": [
        "2012-07-16    101.5\n",
        "2012-07-17     98.0\n",
        "2012-07-18     95.0\n",
        "2012-07-19     99.0\n",
        "2012-07-20    100.0\n",
        "2012-07-21     92.0\n",
        "Freq: D, Name: Austin, dtype: float64"
       ]
      }
     ],
     "prompt_number": 231
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now remember the series , we can do the same kind of indexing and slicing in dataframe"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "suppose we want the variable values for a particular observation that is the temperature values at a particular date at both the places "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps.ix[2]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 232,
       "text": [
        "Austin       95\n",
        "San Diago    77\n",
        "diff         18\n",
        "Name: 2012-07-18 00:00:00, dtype: float64"
       ]
      }
     ],
     "prompt_number": 232
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "del temps['diff']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 233
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps.ix[[1,0,2],['San Diago','Austin']]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>San Diago</th>\n",
        "      <th>Austin</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-07-17</th>\n",
        "      <td> 78</td>\n",
        "      <td>  98.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-16</th>\n",
        "      <td> 73</td>\n",
        "      <td> 101.5</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-18</th>\n",
        "      <td> 77</td>\n",
        "      <td>  95.0</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 234,
       "text": [
        "            San Diago  Austin\n",
        "2012-07-17         78    98.0\n",
        "2012-07-16         73   101.5\n",
        "2012-07-18         77    95.0"
       ]
      }
     ],
     "prompt_number": 234
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "now making a timestamp and using it in slicing and indexing :"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "idx=temps.index[2]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 235
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(idx)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 236,
       "text": [
        "pandas.tslib.Timestamp"
       ]
      }
     ],
     "prompt_number": 236
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is a Timestamp"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps.ix[idx]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 237,
       "text": [
        "Austin       95\n",
        "San Diago    77\n",
        "Name: 2012-07-18 00:00:00, dtype: float64"
       ]
      }
     ],
     "prompt_number": 237
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Austin</th>\n",
        "      <th>San Diago</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-07-16</th>\n",
        "      <td> 101.5</td>\n",
        "      <td> 73</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-17</th>\n",
        "      <td>  98.0</td>\n",
        "      <td> 78</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-18</th>\n",
        "      <td>  95.0</td>\n",
        "      <td> 77</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-19</th>\n",
        "      <td>  99.0</td>\n",
        "      <td> 78</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-20</th>\n",
        "      <td> 100.0</td>\n",
        "      <td> 78</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-21</th>\n",
        "      <td>  92.0</td>\n",
        "      <td> 77</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 238,
       "text": [
        "            Austin  San Diago\n",
        "2012-07-16   101.5         73\n",
        "2012-07-17    98.0         78\n",
        "2012-07-18    95.0         77\n",
        "2012-07-19    99.0         78\n",
        "2012-07-20   100.0         78\n",
        "2012-07-21    92.0         77"
       ]
      }
     ],
     "prompt_number": 238
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now suppose we want to do operations on variables like calculating the mean temperature at both the places "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps.mean()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 239,
       "text": [
        "Austin       97.583333\n",
        "San Diago    76.833333\n",
        "dtype: float64"
       ]
      }
     ],
     "prompt_number": 239
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "The describe function "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps['Austin'].describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 240,
       "text": [
        "count      6.000000\n",
        "mean      97.583333\n",
        "std        3.498809\n",
        "min       92.000000\n",
        "25%       95.750000\n",
        "50%       98.500000\n",
        "75%       99.750000\n",
        "max      101.500000\n",
        "dtype: float64"
       ]
      }
     ],
     "prompt_number": 240
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Austin</th>\n",
        "      <th>San Diago</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>count</th>\n",
        "      <td>   6.000000</td>\n",
        "      <td>  6.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>mean</th>\n",
        "      <td>  97.583333</td>\n",
        "      <td> 76.833333</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>std</th>\n",
        "      <td>   3.498809</td>\n",
        "      <td>  1.940790</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>min</th>\n",
        "      <td>  92.000000</td>\n",
        "      <td> 73.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>25%</th>\n",
        "      <td>  95.750000</td>\n",
        "      <td> 77.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>50%</th>\n",
        "      <td>  98.500000</td>\n",
        "      <td> 77.500000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>75%</th>\n",
        "      <td>  99.750000</td>\n",
        "      <td> 78.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>max</th>\n",
        "      <td> 101.500000</td>\n",
        "      <td> 78.000000</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 241,
       "text": [
        "           Austin  San Diago\n",
        "count    6.000000   6.000000\n",
        "mean    97.583333  76.833333\n",
        "std      3.498809   1.940790\n",
        "min     92.000000  73.000000\n",
        "25%     95.750000  77.000000\n",
        "50%     98.500000  77.500000\n",
        "75%     99.750000  78.000000\n",
        "max    101.500000  78.000000"
       ]
      }
     ],
     "prompt_number": 241
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We can have intelligent computations like deviation from mean value at each date "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps-temps.mean()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Austin</th>\n",
        "      <th>San Diago</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-07-16</th>\n",
        "      <td> 3.916667</td>\n",
        "      <td>-3.833333</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-17</th>\n",
        "      <td> 0.416667</td>\n",
        "      <td> 1.166667</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-18</th>\n",
        "      <td>-2.583333</td>\n",
        "      <td> 0.166667</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-19</th>\n",
        "      <td> 1.416667</td>\n",
        "      <td> 1.166667</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-20</th>\n",
        "      <td> 2.416667</td>\n",
        "      <td> 1.166667</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-21</th>\n",
        "      <td>-5.583333</td>\n",
        "      <td> 0.166667</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 242,
       "text": [
        "              Austin  San Diago\n",
        "2012-07-16  3.916667  -3.833333\n",
        "2012-07-17  0.416667   1.166667\n",
        "2012-07-18 -2.583333   0.166667\n",
        "2012-07-19  1.416667   1.166667\n",
        "2012-07-20  2.416667   1.166667\n",
        "2012-07-21 -5.583333   0.166667"
       ]
      }
     ],
     "prompt_number": 242
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now suppose we want the subset where temp at austin > 100 "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps[temps.Austin>100]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Austin</th>\n",
        "      <th>San Diago</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-07-16</th>\n",
        "      <td> 101.5</td>\n",
        "      <td> 73</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 243,
       "text": [
        "            Austin  San Diago\n",
        "2012-07-16   101.5         73"
       ]
      }
     ],
     "prompt_number": 243
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So there was only 1 date when temperature at Austin is >100"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "!ls"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "data_panel    foo.pkl       spx_px        test1.csv\r\n",
        "fec.pickle    fred_fx.csv   stk_prices    test2.csv\r\n",
        "foo.csv       macrodata.csv stock_prices\r\n"
       ]
      }
     ],
     "prompt_number": 244
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Cat function is used to see the kind of file what is there in the file "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "!ls"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "data_panel    foo.pkl       spx_px        test1.csv\r\n",
        "fec.pickle    fred_fx.csv   stk_prices    test2.csv\r\n",
        "foo.csv       macrodata.csv stock_prices\r\n"
       ]
      }
     ],
     "prompt_number": 246
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "!cat test1.csv"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "date,0,1,2,3\r\n",
        "2000-01-01 00:00:00,1.10376250134,-1.90997889703,-0.808955536115,-2.39262906719\r\n",
        "2000-01-02 00:00:00,1.18891664768,0.581119740849,0.86159734949,-0.213885346486\r\n",
        "2000-01-03 00:00:00,-0.964200042412,0.779764393246,1.82906224532,0.322422339415\r\n",
        "2000-01-04 00:00:00,0.782130444001,-1.72066965573,-1.10824167327,1.23348925791\r\n",
        "2000-01-05 00:00:00,-1.86701699823,-0.528368292754,-2.48830894087,1.48034194215\r\n",
        "2000-01-06 00:00:00,2.56928022646,-0.471901478927,-0.835033249865,-0.532132652067\r\n",
        "2000-01-07 00:00:00,-0.39932258251,-0.676426550985,-0.0112559158931,0.223251821044\r\n",
        "2000-01-08 00:00:00,1.64299299394,1.01341997845,1.43566709724,-0.635861850721\r\n",
        "2000-01-09 00:00:00,1.14730764657,2.13799951538,0.554171306191,-0.25553826194\r\n",
        "2000-01-10 00:00:00,0.933765825769,1.38715526486,-0.560142729978,-0.787082814998\r\n"
       ]
      }
     ],
     "prompt_number": 247
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So this basically has some data with index as a date time data type "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "lets read this file in a dataframe "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1=pd.read_csv('test1.csv')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 248
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1.head(1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>date</th>\n",
        "      <th>0</th>\n",
        "      <th>1</th>\n",
        "      <th>2</th>\n",
        "      <th>3</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> 2000-01-01 00:00:00</td>\n",
        "      <td> 1.103763</td>\n",
        "      <td>-1.909979</td>\n",
        "      <td>-0.808956</td>\n",
        "      <td>-2.392629</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 249,
       "text": [
        "                  date         0         1         2         3\n",
        "0  2000-01-01 00:00:00  1.103763 -1.909979 -0.808956 -2.392629"
       ]
      }
     ],
     "prompt_number": 249
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(test1.date[0])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 250,
       "text": [
        "str"
       ]
      }
     ],
     "prompt_number": 250
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So this just takes it as a string , we need to change it to datetime variable so that we can perform operations on it "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1=pd.read_csv('test1.csv',parse_dates=['date'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 251
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This converts the values in the date column to python datetime objects"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1.date"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 252,
       "text": [
        "0   2000-01-01\n",
        "1   2000-01-02\n",
        "2   2000-01-03\n",
        "3   2000-01-04\n",
        "4   2000-01-05\n",
        "5   2000-01-06\n",
        "6   2000-01-07\n",
        "7   2000-01-08\n",
        "8   2000-01-09\n",
        "9   2000-01-10\n",
        "Name: date, dtype: datetime64[ns]"
       ]
      }
     ],
     "prompt_number": 252
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So clearly we get back a python datetime object "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(test1.date[0])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 253,
       "text": [
        "pandas.tslib.Timestamp"
       ]
      }
     ],
     "prompt_number": 253
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So cleary this time we get time stamps in the index "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now we notice one thing that the index is no the date column , if we want the date to be index of our dataframe , we need to specify it "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1=pd.read_csv('test1.csv',parse_dates=['date'],index_col='date')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 254
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1.head(3)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>0</th>\n",
        "      <th>1</th>\n",
        "      <th>2</th>\n",
        "      <th>3</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2000-01-01</th>\n",
        "      <td> 1.103763</td>\n",
        "      <td>-1.909979</td>\n",
        "      <td>-0.808956</td>\n",
        "      <td>-2.392629</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2000-01-02</th>\n",
        "      <td> 1.188917</td>\n",
        "      <td> 0.581120</td>\n",
        "      <td> 0.861597</td>\n",
        "      <td>-0.213885</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2000-01-03</th>\n",
        "      <td>-0.964200</td>\n",
        "      <td> 0.779764</td>\n",
        "      <td> 1.829062</td>\n",
        "      <td> 0.322422</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 255,
       "text": [
        "                   0         1         2         3\n",
        "date                                              \n",
        "2000-01-01  1.103763 -1.909979 -0.808956 -2.392629\n",
        "2000-01-02  1.188917  0.581120  0.861597 -0.213885\n",
        "2000-01-03 -0.964200  0.779764  1.829062  0.322422"
       ]
      }
     ],
     "prompt_number": 255
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So clearly we get date as the index now "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1.index.name"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 256,
       "text": [
        "'date'"
       ]
      }
     ],
     "prompt_number": 256
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1.index"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 257,
       "text": [
        "<class 'pandas.tseries.index.DatetimeIndex'>\n",
        "[2000-01-01, ..., 2000-01-10]\n",
        "Length: 10, Freq: None, Timezone: None"
       ]
      }
     ],
     "prompt_number": 257
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "SO we get back here as a datetimeindex column "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now suppose we want the date column as a variable as well as the index of the dataframe "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1=pd.read_csv('test1.csv',parse_dates=['date'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 258
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1.head(1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>date</th>\n",
        "      <th>0</th>\n",
        "      <th>1</th>\n",
        "      <th>2</th>\n",
        "      <th>3</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2000-01-01</td>\n",
        "      <td> 1.103763</td>\n",
        "      <td>-1.909979</td>\n",
        "      <td>-0.808956</td>\n",
        "      <td>-2.392629</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 259,
       "text": [
        "        date         0         1         2         3\n",
        "0 2000-01-01  1.103763 -1.909979 -0.808956 -2.392629"
       ]
      }
     ],
     "prompt_number": 259
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1.set_index('date',drop=False).head(2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>date</th>\n",
        "      <th>0</th>\n",
        "      <th>1</th>\n",
        "      <th>2</th>\n",
        "      <th>3</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2000-01-01</th>\n",
        "      <td>2000-01-01</td>\n",
        "      <td> 1.103763</td>\n",
        "      <td>-1.909979</td>\n",
        "      <td>-0.808956</td>\n",
        "      <td>-2.392629</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2000-01-02</th>\n",
        "      <td>2000-01-02</td>\n",
        "      <td> 1.188917</td>\n",
        "      <td> 0.581120</td>\n",
        "      <td> 0.861597</td>\n",
        "      <td>-0.213885</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 260,
       "text": [
        "                 date         0         1         2         3\n",
        "date                                                         \n",
        "2000-01-01 2000-01-01  1.103763 -1.909979 -0.808956 -2.392629\n",
        "2000-01-02 2000-01-02  1.188917  0.581120  0.861597 -0.213885"
       ]
      }
     ],
     "prompt_number": 260
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So here we can still access the date and the index is also a date "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test2=pd.read_csv('test2.csv')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 261
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test2.head(2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>date</th>\n",
        "      <th>0</th>\n",
        "      <th>1</th>\n",
        "      <th>2</th>\n",
        "      <th>3</th>\n",
        "      <th>time</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> 2000-01-01</td>\n",
        "      <td> 1.103763</td>\n",
        "      <td>-1.909979</td>\n",
        "      <td>-0.808956</td>\n",
        "      <td>-2.392629</td>\n",
        "      <td> 00:00:00</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> 2000-01-02</td>\n",
        "      <td> 1.188917</td>\n",
        "      <td> 0.581120</td>\n",
        "      <td> 0.861597</td>\n",
        "      <td>-0.213885</td>\n",
        "      <td> 00:00:00</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 262,
       "text": [
        "         date         0         1         2         3      time\n",
        "0  2000-01-01  1.103763 -1.909979 -0.808956 -2.392629  00:00:00\n",
        "1  2000-01-02  1.188917  0.581120  0.861597 -0.213885  00:00:00"
       ]
      }
     ],
     "prompt_number": 262
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Here clearly the date and the time are splitted in 2 columns "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Suppose we want to combine date and time column and then parse it "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test2=pd.read_csv('test2.csv',parse_dates=[['date','time']])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 263
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test2.head(2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>date_time</th>\n",
        "      <th>0</th>\n",
        "      <th>1</th>\n",
        "      <th>2</th>\n",
        "      <th>3</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2000-01-01</td>\n",
        "      <td> 1.103763</td>\n",
        "      <td>-1.909979</td>\n",
        "      <td>-0.808956</td>\n",
        "      <td>-2.392629</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>2000-01-02</td>\n",
        "      <td> 1.188917</td>\n",
        "      <td> 0.581120</td>\n",
        "      <td> 0.861597</td>\n",
        "      <td>-0.213885</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 264,
       "text": [
        "   date_time         0         1         2         3\n",
        "0 2000-01-01  1.103763 -1.909979 -0.808956 -2.392629\n",
        "1 2000-01-02  1.188917  0.581120  0.861597 -0.213885"
       ]
      }
     ],
     "prompt_number": 264
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test2.date_time[0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 265,
       "text": [
        "Timestamp('2000-01-01 00:00:00')"
       ]
      }
     ],
     "prompt_number": 265
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "so it has clearly glued the 2 columns together and parsed them as a timestamp"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test2=pd.read_csv('test2.csv',parse_dates=[['date','time']],\n",
      "                  index_col=['date_time'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 266
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test2.head(2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>0</th>\n",
        "      <th>1</th>\n",
        "      <th>2</th>\n",
        "      <th>3</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>date_time</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2000-01-01</th>\n",
        "      <td> 1.103763</td>\n",
        "      <td>-1.909979</td>\n",
        "      <td>-0.808956</td>\n",
        "      <td>-2.392629</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2000-01-02</th>\n",
        "      <td> 1.188917</td>\n",
        "      <td> 0.581120</td>\n",
        "      <td> 0.861597</td>\n",
        "      <td>-0.213885</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 267,
       "text": [
        "                   0         1         2         3\n",
        "date_time                                         \n",
        "2000-01-01  1.103763 -1.909979 -0.808956 -2.392629\n",
        "2000-01-02  1.188917  0.581120  0.861597 -0.213885"
       ]
      }
     ],
     "prompt_number": 267
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test2.index"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 268,
       "text": [
        "<class 'pandas.tseries.index.DatetimeIndex'>\n",
        "[2000-01-01, ..., 2000-01-10]\n",
        "Length: 10, Freq: None, Timezone: None"
       ]
      }
     ],
     "prompt_number": 268
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We use a question mark to know about a particular function "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "pd.read_csv?"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 269
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "So now we will learn mode about the Datetime data variable "
     ]
    },
    {
     "cell_type": "heading",
     "level": 5,
     "metadata": {},
     "source": [
      "datetime64[ns]:nanosecond , this was added to numpy in about 2010 . Each time stamp represens ~600 year timestamp , 1700-2300"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Datetimeindex - supports for duplicate timestamp . Timestamp is a subclass of datetime that supports nanoseconds "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "pd.Timestamp"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 270,
       "text": [
        "pandas.tslib.Timestamp"
       ]
      }
     ],
     "prompt_number": 270
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "pd.Timestamp.mro()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 271,
       "text": [
        "[pandas.tslib.Timestamp,\n",
        " pandas.tslib._Timestamp,\n",
        " datetime.datetime,\n",
        " datetime.date,\n",
        " object]"
       ]
      }
     ],
     "prompt_number": 271
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Making a timestamp : "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stamp=pd.Timestamp('7/17/2012 10:06:45')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 273
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stamp.value #this gives the nanosecond value "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 274,
       "text": [
        "1342519605000000000"
       ]
      }
     ],
     "prompt_number": 274
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print stamp.second,stamp.year,stamp.month,stamp.day,stamp.hour"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "45 2012 7 17 10\n"
       ]
      }
     ],
     "prompt_number": 275
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "dates=['7/16/2012','7/18/2012','7/20/2012']\n",
      "dates"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 276,
       "text": [
        "['7/16/2012', '7/18/2012', '7/20/2012']"
       ]
      }
     ],
     "prompt_number": 276
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s1=Series(range(3),index=dates)\n",
      "s1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 277,
       "text": [
        "7/16/2012    0\n",
        "7/18/2012    1\n",
        "7/20/2012    2\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 277
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s1.index"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 278,
       "text": [
        "Index([u'7/16/2012', u'7/18/2012', u'7/20/2012'], dtype='object')"
       ]
      }
     ],
     "prompt_number": 278
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is how we converted the dates to datetimeindex"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "pd.DatetimeIndex(dates)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 279,
       "text": [
        "<class 'pandas.tseries.index.DatetimeIndex'>\n",
        "[2012-07-16, ..., 2012-07-20]\n",
        "Length: 3, Freq: None, Timezone: None"
       ]
      }
     ],
     "prompt_number": 279
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is how to convert directly into datetimeindex"
     ]
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Dayfirst option in datetime"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "dates=['7/09/2012','7/10/2012','7/11/2012']\n",
      "dates"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 280,
       "text": [
        "['7/09/2012', '7/10/2012', '7/11/2012']"
       ]
      }
     ],
     "prompt_number": 280
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "list(pd.to_datetime(dates,dayfirst=True))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 281,
       "text": [
        "[Timestamp('2012-09-07 00:00:00'),\n",
        " Timestamp('2012-10-07 00:00:00'),\n",
        " Timestamp('2012-11-07 00:00:00')]"
       ]
      }
     ],
     "prompt_number": 281
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So here we get the European format instead of the US format of date "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s1.index[0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 282,
       "text": [
        "'7/16/2012'"
       ]
      }
     ],
     "prompt_number": 282
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 283,
       "text": [
        "7/16/2012    0\n",
        "7/18/2012    1\n",
        "7/20/2012    2\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 283
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Lets talk about time series indexing "
     ]
    },
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Indexing"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rng=pd.date_range('2012-07-17',periods=1000)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 284
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Here we create fix frequency of timestamps as a datetime object "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rng"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 285,
       "text": [
        "<class 'pandas.tseries.index.DatetimeIndex'>\n",
        "[2012-07-17, ..., 2015-04-12]\n",
        "Length: 1000, Freq: D, Timezone: None"
       ]
      }
     ],
     "prompt_number": 285
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Creating a time series now :"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts=Series(np.arange(1000),index=rng)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 286
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts[:3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 287,
       "text": [
        "2012-07-17    0\n",
        "2012-07-18    1\n",
        "2012-07-19    2\n",
        "Freq: D, dtype: int64"
       ]
      }
     ],
     "prompt_number": 287
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts[997:]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 288,
       "text": [
        "2015-04-10    997\n",
        "2015-04-11    998\n",
        "2015-04-12    999\n",
        "Freq: D, dtype: int64"
       ]
      }
     ],
     "prompt_number": 288
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "so we get the above time series now . Now suppose we want to select just a single value from the above time series "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "By indexing we mean selecting elements from the time series "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts[ts.index[133]]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 289,
       "text": [
        "133"
       ]
      }
     ],
     "prompt_number": 289
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We can also pass the string "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts['2012-11-27']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 290,
       "text": [
        "133"
       ]
      }
     ],
     "prompt_number": 290
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We want to select data upto and including 2012-11-27"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts[:'2012-11-27']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 291,
       "text": [
        "2012-07-17     0\n",
        "2012-07-18     1\n",
        "2012-07-19     2\n",
        "2012-07-20     3\n",
        "2012-07-21     4\n",
        "2012-07-22     5\n",
        "2012-07-23     6\n",
        "2012-07-24     7\n",
        "2012-07-25     8\n",
        "2012-07-26     9\n",
        "2012-07-27    10\n",
        "2012-07-28    11\n",
        "2012-07-29    12\n",
        "2012-07-30    13\n",
        "2012-07-31    14\n",
        "...\n",
        "2012-11-13    119\n",
        "2012-11-14    120\n",
        "2012-11-15    121\n",
        "2012-11-16    122\n",
        "2012-11-17    123\n",
        "2012-11-18    124\n",
        "2012-11-19    125\n",
        "2012-11-20    126\n",
        "2012-11-21    127\n",
        "2012-11-22    128\n",
        "2012-11-23    129\n",
        "2012-11-24    130\n",
        "2012-11-25    131\n",
        "2012-11-26    132\n",
        "2012-11-27    133\n",
        "Freq: D, Length: 134"
       ]
      }
     ],
     "prompt_number": 291
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "The end point is generally not included in case of numpy array and series slicing but it is included incase of a time series "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "for example: "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a=np.arange(100)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 292
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a[:10]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 293,
       "text": [
        "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
       ]
      }
     ],
     "prompt_number": 293
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "only till 9 are displayed not the 10th one "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rng=pd.date_range('2012-07-17',periods=1000)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 294
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rng"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 295,
       "text": [
        "<class 'pandas.tseries.index.DatetimeIndex'>\n",
        "[2012-07-17, ..., 2015-04-12]\n",
        "Length: 1000, Freq: D, Timezone: None"
       ]
      }
     ],
     "prompt_number": 295
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rng[0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 296,
       "text": [
        "Timestamp('2012-07-17 00:00:00', offset='D')"
       ]
      }
     ],
     "prompt_number": 296
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rng[1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 297,
       "text": [
        "Timestamp('2012-07-18 00:00:00', offset='D')"
       ]
      }
     ],
     "prompt_number": 297
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "observe how the date is increasing step by step "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Notice that the offset is D so the data is increasing day by day "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts2=ts.take(np.random.permutation(len(ts)))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 298
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts2"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 299,
       "text": [
        "2014-11-24    860\n",
        "2013-08-21    400\n",
        "2013-07-24    372\n",
        "2014-08-26    770\n",
        "2012-12-29    165\n",
        "2014-05-03    655\n",
        "2013-05-24    311\n",
        "2013-06-19    337\n",
        "2015-01-24    921\n",
        "2014-04-28    650\n",
        "2013-10-11    451\n",
        "2012-08-27     41\n",
        "2014-01-07    539\n",
        "2014-08-16    760\n",
        "2013-09-25    435\n",
        "...\n",
        "2015-04-08    995\n",
        "2013-09-14    424\n",
        "2014-09-13    788\n",
        "2013-02-13    211\n",
        "2015-01-26    923\n",
        "2012-12-09    145\n",
        "2013-07-07    355\n",
        "2013-11-14    485\n",
        "2014-02-03    566\n",
        "2013-11-20    491\n",
        "2014-11-06    842\n",
        "2015-01-06    903\n",
        "2013-02-11    209\n",
        "2014-08-25    769\n",
        "2013-01-04    171\n",
        "Length: 1000"
       ]
      }
     ],
     "prompt_number": 299
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts2.sort_index()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 300,
       "text": [
        "2012-07-17     0\n",
        "2012-07-18     1\n",
        "2012-07-19     2\n",
        "2012-07-20     3\n",
        "2012-07-21     4\n",
        "2012-07-22     5\n",
        "2012-07-23     6\n",
        "2012-07-24     7\n",
        "2012-07-25     8\n",
        "2012-07-26     9\n",
        "2012-07-27    10\n",
        "2012-07-28    11\n",
        "2012-07-29    12\n",
        "2012-07-30    13\n",
        "2012-07-31    14\n",
        "...\n",
        "2015-03-29    985\n",
        "2015-03-30    986\n",
        "2015-03-31    987\n",
        "2015-04-01    988\n",
        "2015-04-02    989\n",
        "2015-04-03    990\n",
        "2015-04-04    991\n",
        "2015-04-05    992\n",
        "2015-04-06    993\n",
        "2015-04-07    994\n",
        "2015-04-08    995\n",
        "2015-04-09    996\n",
        "2015-04-10    997\n",
        "2015-04-11    998\n",
        "2015-04-12    999\n",
        "Length: 1000"
       ]
      }
     ],
     "prompt_number": 300
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "sort_index returns a time series sorted by date "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts['2012-7-26']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 301,
       "text": [
        "9"
       ]
      }
     ],
     "prompt_number": 301
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "we can also select subsets of the data like only july 2012 "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts['2012-7']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 302,
       "text": [
        "2012-07-17     0\n",
        "2012-07-18     1\n",
        "2012-07-19     2\n",
        "2012-07-20     3\n",
        "2012-07-21     4\n",
        "2012-07-22     5\n",
        "2012-07-23     6\n",
        "2012-07-24     7\n",
        "2012-07-25     8\n",
        "2012-07-26     9\n",
        "2012-07-27    10\n",
        "2012-07-28    11\n",
        "2012-07-29    12\n",
        "2012-07-30    13\n",
        "2012-07-31    14\n",
        "Freq: D, dtype: int64"
       ]
      }
     ],
     "prompt_number": 302
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts['2012-7':'2012-8']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 303,
       "text": [
        "2012-07-17     0\n",
        "2012-07-18     1\n",
        "2012-07-19     2\n",
        "2012-07-20     3\n",
        "2012-07-21     4\n",
        "2012-07-22     5\n",
        "2012-07-23     6\n",
        "2012-07-24     7\n",
        "2012-07-25     8\n",
        "2012-07-26     9\n",
        "2012-07-27    10\n",
        "2012-07-28    11\n",
        "2012-07-29    12\n",
        "2012-07-30    13\n",
        "2012-07-31    14\n",
        "2012-08-01    15\n",
        "2012-08-02    16\n",
        "2012-08-03    17\n",
        "2012-08-04    18\n",
        "2012-08-05    19\n",
        "2012-08-06    20\n",
        "2012-08-07    21\n",
        "2012-08-08    22\n",
        "2012-08-09    23\n",
        "2012-08-10    24\n",
        "2012-08-11    25\n",
        "2012-08-12    26\n",
        "2012-08-13    27\n",
        "2012-08-14    28\n",
        "2012-08-15    29\n",
        "2012-08-16    30\n",
        "2012-08-17    31\n",
        "2012-08-18    32\n",
        "2012-08-19    33\n",
        "2012-08-20    34\n",
        "2012-08-21    35\n",
        "2012-08-22    36\n",
        "2012-08-23    37\n",
        "2012-08-24    38\n",
        "2012-08-25    39\n",
        "2012-08-26    40\n",
        "2012-08-27    41\n",
        "2012-08-28    42\n",
        "2012-08-29    43\n",
        "2012-08-30    44\n",
        "2012-08-31    45\n",
        "Freq: D, dtype: int64"
       ]
      }
     ],
     "prompt_number": 303
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This only gives data of july and aug "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "similarly we could do it for year also "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df1=DataFrame(np.arange(4000).reshape((1000,4)),index=rng)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 304
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df1.head(1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>0</th>\n",
        "      <th>1</th>\n",
        "      <th>2</th>\n",
        "      <th>3</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-07-17</th>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 2</td>\n",
        "      <td> 3</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 305,
       "text": [
        "            0  1  2  3\n",
        "2012-07-17  0  1  2  3"
       ]
      }
     ],
     "prompt_number": 305
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "we can also name the columns"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df1=DataFrame(np.arange(4000).reshape((1000,4)),index=rng,\n",
      "              columns=['delhi','mumbai','calcutta','tamil'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 306
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df1.head(1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>delhi</th>\n",
        "      <th>mumbai</th>\n",
        "      <th>calcutta</th>\n",
        "      <th>tamil</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-07-17</th>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 2</td>\n",
        "      <td> 3</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 307,
       "text": [
        "            delhi  mumbai  calcutta  tamil\n",
        "2012-07-17      0       1         2      3"
       ]
      }
     ],
     "prompt_number": 307
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df1.ix['2012-7-29']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 308,
       "text": [
        "delhi       48\n",
        "mumbai      49\n",
        "calcutta    50\n",
        "tamil       51\n",
        "Name: 2012-07-29 00:00:00, dtype: int64"
       ]
      }
     ],
     "prompt_number": 308
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So using ix we get the data for all the cities for a particular date "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df1.ix['2012-7-29'].index"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 309,
       "text": [
        "Index([u'delhi', u'mumbai', u'calcutta', u'tamil'], dtype='object')"
       ]
      }
     ],
     "prompt_number": 309
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df1.ix['2012-7-20'].name"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 310,
       "text": [
        "Timestamp('2012-07-20 00:00:00', offset='D')"
       ]
      }
     ],
     "prompt_number": 310
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This gives us the timestamp"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from datetime import timedelta,datetime"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 311
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "start=datetime(2012,12,31)\n",
      "df1.ix[start:start+timedelta(days=11)]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>delhi</th>\n",
        "      <th>mumbai</th>\n",
        "      <th>calcutta</th>\n",
        "      <th>tamil</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-12-31</th>\n",
        "      <td> 668</td>\n",
        "      <td> 669</td>\n",
        "      <td> 670</td>\n",
        "      <td> 671</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-01</th>\n",
        "      <td> 672</td>\n",
        "      <td> 673</td>\n",
        "      <td> 674</td>\n",
        "      <td> 675</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-02</th>\n",
        "      <td> 676</td>\n",
        "      <td> 677</td>\n",
        "      <td> 678</td>\n",
        "      <td> 679</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-03</th>\n",
        "      <td> 680</td>\n",
        "      <td> 681</td>\n",
        "      <td> 682</td>\n",
        "      <td> 683</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-04</th>\n",
        "      <td> 684</td>\n",
        "      <td> 685</td>\n",
        "      <td> 686</td>\n",
        "      <td> 687</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-05</th>\n",
        "      <td> 688</td>\n",
        "      <td> 689</td>\n",
        "      <td> 690</td>\n",
        "      <td> 691</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-06</th>\n",
        "      <td> 692</td>\n",
        "      <td> 693</td>\n",
        "      <td> 694</td>\n",
        "      <td> 695</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-07</th>\n",
        "      <td> 696</td>\n",
        "      <td> 697</td>\n",
        "      <td> 698</td>\n",
        "      <td> 699</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-08</th>\n",
        "      <td> 700</td>\n",
        "      <td> 701</td>\n",
        "      <td> 702</td>\n",
        "      <td> 703</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-09</th>\n",
        "      <td> 704</td>\n",
        "      <td> 705</td>\n",
        "      <td> 706</td>\n",
        "      <td> 707</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-10</th>\n",
        "      <td> 708</td>\n",
        "      <td> 709</td>\n",
        "      <td> 710</td>\n",
        "      <td> 711</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-11</th>\n",
        "      <td> 712</td>\n",
        "      <td> 713</td>\n",
        "      <td> 714</td>\n",
        "      <td> 715</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 312,
       "text": [
        "            delhi  mumbai  calcutta  tamil\n",
        "2012-12-31    668     669       670    671\n",
        "2013-01-01    672     673       674    675\n",
        "2013-01-02    676     677       678    679\n",
        "2013-01-03    680     681       682    683\n",
        "2013-01-04    684     685       686    687\n",
        "2013-01-05    688     689       690    691\n",
        "2013-01-06    692     693       694    695\n",
        "2013-01-07    696     697       698    699\n",
        "2013-01-08    700     701       702    703\n",
        "2013-01-09    704     705       706    707\n",
        "2013-01-10    708     709       710    711\n",
        "2013-01-11    712     713       714    715"
       ]
      }
     ],
     "prompt_number": 312
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(df1.ix[start:start+timedelta(days=11)])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 313,
       "text": [
        "12"
       ]
      }
     ],
     "prompt_number": 313
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "so we get here a data of 12 days not 11 as the end point is also included in the case of a time series "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "The above thing could also be done using pandas offsets object "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df1.ix[start:start+pd.offsets.Day(11)]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>delhi</th>\n",
        "      <th>mumbai</th>\n",
        "      <th>calcutta</th>\n",
        "      <th>tamil</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-12-31</th>\n",
        "      <td> 668</td>\n",
        "      <td> 669</td>\n",
        "      <td> 670</td>\n",
        "      <td> 671</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-01</th>\n",
        "      <td> 672</td>\n",
        "      <td> 673</td>\n",
        "      <td> 674</td>\n",
        "      <td> 675</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-02</th>\n",
        "      <td> 676</td>\n",
        "      <td> 677</td>\n",
        "      <td> 678</td>\n",
        "      <td> 679</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-03</th>\n",
        "      <td> 680</td>\n",
        "      <td> 681</td>\n",
        "      <td> 682</td>\n",
        "      <td> 683</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-04</th>\n",
        "      <td> 684</td>\n",
        "      <td> 685</td>\n",
        "      <td> 686</td>\n",
        "      <td> 687</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-05</th>\n",
        "      <td> 688</td>\n",
        "      <td> 689</td>\n",
        "      <td> 690</td>\n",
        "      <td> 691</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-06</th>\n",
        "      <td> 692</td>\n",
        "      <td> 693</td>\n",
        "      <td> 694</td>\n",
        "      <td> 695</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-07</th>\n",
        "      <td> 696</td>\n",
        "      <td> 697</td>\n",
        "      <td> 698</td>\n",
        "      <td> 699</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-08</th>\n",
        "      <td> 700</td>\n",
        "      <td> 701</td>\n",
        "      <td> 702</td>\n",
        "      <td> 703</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-09</th>\n",
        "      <td> 704</td>\n",
        "      <td> 705</td>\n",
        "      <td> 706</td>\n",
        "      <td> 707</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-10</th>\n",
        "      <td> 708</td>\n",
        "      <td> 709</td>\n",
        "      <td> 710</td>\n",
        "      <td> 711</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-11</th>\n",
        "      <td> 712</td>\n",
        "      <td> 713</td>\n",
        "      <td> 714</td>\n",
        "      <td> 715</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 314,
       "text": [
        "            delhi  mumbai  calcutta  tamil\n",
        "2012-12-31    668     669       670    671\n",
        "2013-01-01    672     673       674    675\n",
        "2013-01-02    676     677       678    679\n",
        "2013-01-03    680     681       682    683\n",
        "2013-01-04    684     685       686    687\n",
        "2013-01-05    688     689       690    691\n",
        "2013-01-06    692     693       694    695\n",
        "2013-01-07    696     697       698    699\n",
        "2013-01-08    700     701       702    703\n",
        "2013-01-09    704     705       706    707\n",
        "2013-01-10    708     709       710    711\n",
        "2013-01-11    712     713       714    715"
       ]
      }
     ],
     "prompt_number": 314
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "The kind of offsets in time series "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "D: for a calender day .B is for a business day . M is calender end of the month . BM is business end of month . "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "list(pd.date_range('2000-01-01',periods=5))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 315,
       "text": [
        "[Timestamp('2000-01-01 00:00:00', offset='D'),\n",
        " Timestamp('2000-01-02 00:00:00', offset='D'),\n",
        " Timestamp('2000-01-03 00:00:00', offset='D'),\n",
        " Timestamp('2000-01-04 00:00:00', offset='D'),\n",
        " Timestamp('2000-01-05 00:00:00', offset='D')]"
       ]
      }
     ],
     "prompt_number": 315
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is a timeseries generated with a frequency of a calender day "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "With business day it is the weekends which are not considered "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "H is for an hour , s is for a second "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "list(pd.date_range('2000-01-01',periods=5,freq='BM'))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 316,
       "text": [
        "[Timestamp('2000-01-31 00:00:00', offset='BM'),\n",
        " Timestamp('2000-02-29 00:00:00', offset='BM'),\n",
        " Timestamp('2000-03-31 00:00:00', offset='BM'),\n",
        " Timestamp('2000-04-28 00:00:00', offset='BM'),\n",
        " Timestamp('2000-05-31 00:00:00', offset='BM')]"
       ]
      }
     ],
     "prompt_number": 316
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is used in case of a financial calender "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "MS is for start of the month "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "list(pd.date_range('2000-01-01',periods=5,freq='H'))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 317,
       "text": [
        "[Timestamp('2000-01-01 00:00:00', offset='H'),\n",
        " Timestamp('2000-01-01 01:00:00', offset='H'),\n",
        " Timestamp('2000-01-01 02:00:00', offset='H'),\n",
        " Timestamp('2000-01-01 03:00:00', offset='H'),\n",
        " Timestamp('2000-01-01 04:00:00', offset='H')]"
       ]
      }
     ],
     "prompt_number": 317
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "list(pd.date_range('2000-01-01',periods=5,freq='s'))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 318,
       "text": [
        "[Timestamp('2000-01-01 00:00:00', offset='S'),\n",
        " Timestamp('2000-01-01 00:00:01', offset='S'),\n",
        " Timestamp('2000-01-01 00:00:02', offset='S'),\n",
        " Timestamp('2000-01-01 00:00:03', offset='S'),\n",
        " Timestamp('2000-01-01 00:00:04', offset='S')]"
       ]
      }
     ],
     "prompt_number": 318
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "list(pd.date_range('2000-01-01',periods=5,freq='m'))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 319,
       "text": [
        "[Timestamp('2000-01-31 00:00:00', offset='M'),\n",
        " Timestamp('2000-02-29 00:00:00', offset='M'),\n",
        " Timestamp('2000-03-31 00:00:00', offset='M'),\n",
        " Timestamp('2000-04-30 00:00:00', offset='M'),\n",
        " Timestamp('2000-05-31 00:00:00', offset='M')]"
       ]
      }
     ],
     "prompt_number": 319
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "m is for the month end not minutes "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Annual dates falling on last day of june "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "list(pd.date_range('2000-01-01',periods=5,freq='BA-FEB'))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 320,
       "text": [
        "[Timestamp('2000-02-29 00:00:00', offset='BA-FEB'),\n",
        " Timestamp('2001-02-28 00:00:00', offset='BA-FEB'),\n",
        " Timestamp('2002-02-28 00:00:00', offset='BA-FEB'),\n",
        " Timestamp('2003-02-28 00:00:00', offset='BA-FEB'),\n",
        " Timestamp('2004-02-27 00:00:00', offset='BA-FEB')]"
       ]
      }
     ],
     "prompt_number": 320
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "for quaterly dates "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "list(pd.date_range('2000-01-01',periods=5,freq='Q-DEC'))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 321,
       "text": [
        "[Timestamp('2000-03-31 00:00:00', offset='Q-DEC'),\n",
        " Timestamp('2000-06-30 00:00:00', offset='Q-DEC'),\n",
        " Timestamp('2000-09-30 00:00:00', offset='Q-DEC'),\n",
        " Timestamp('2000-12-31 00:00:00', offset='Q-DEC'),\n",
        " Timestamp('2001-03-31 00:00:00', offset='Q-DEC')]"
       ]
      }
     ],
     "prompt_number": 321
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "for 3rd friday of each month "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "list(pd.date_range('2000-01-01',periods=5,freq='WOM-2FRI'))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 322,
       "text": [
        "[Timestamp('2000-01-14 00:00:00', offset='WOM-2FRI'),\n",
        " Timestamp('2000-02-11 00:00:00', offset='WOM-2FRI'),\n",
        " Timestamp('2000-03-10 00:00:00', offset='WOM-2FRI'),\n",
        " Timestamp('2000-04-14 00:00:00', offset='WOM-2FRI'),\n",
        " Timestamp('2000-05-12 00:00:00', offset='WOM-2FRI')]"
       ]
      }
     ],
     "prompt_number": 322
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "atemps=temps.Austin"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 323
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sdtemps=temps['San Diago'].drop(temps.index[3])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 325
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "atemps"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 327,
       "text": [
        "2012-07-16    101.5\n",
        "2012-07-17     98.0\n",
        "2012-07-18     95.0\n",
        "2012-07-19     99.0\n",
        "2012-07-20    100.0\n",
        "2012-07-21     92.0\n",
        "Freq: D, Name: Austin, dtype: float64"
       ]
      }
     ],
     "prompt_number": 327
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sdtemps"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 328,
       "text": [
        "2012-07-16    73\n",
        "2012-07-17    78\n",
        "2012-07-18    77\n",
        "2012-07-20    78\n",
        "2012-07-21    77\n",
        "Name: San Diago, dtype: int64"
       ]
      }
     ],
     "prompt_number": 328
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "1 less record here "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps-temps[:-1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Austin</th>\n",
        "      <th>San Diago</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-07-16</th>\n",
        "      <td>  0</td>\n",
        "      <td>  0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-17</th>\n",
        "      <td>  0</td>\n",
        "      <td>  0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-18</th>\n",
        "      <td>  0</td>\n",
        "      <td>  0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-19</th>\n",
        "      <td>  0</td>\n",
        "      <td>  0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-20</th>\n",
        "      <td>  0</td>\n",
        "      <td>  0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-21</th>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 329,
       "text": [
        "            Austin  San Diago\n",
        "2012-07-16       0          0\n",
        "2012-07-17       0          0\n",
        "2012-07-18       0          0\n",
        "2012-07-19       0          0\n",
        "2012-07-20       0          0\n",
        "2012-07-21     NaN        NaN"
       ]
      }
     ],
     "prompt_number": 329
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This gives NAN in the last row as there is no last row in the temp[:-1]"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "diff=atemps-sdtemps\n",
      "diff"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 330,
       "text": [
        "2012-07-16    28.5\n",
        "2012-07-17    20.0\n",
        "2012-07-18    18.0\n",
        "2012-07-19     NaN\n",
        "2012-07-20    22.0\n",
        "2012-07-21    15.0\n",
        "dtype: float64"
       ]
      }
     ],
     "prompt_number": 330
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "diff.fillna(method='ffill')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 331,
       "text": [
        "2012-07-16    28.5\n",
        "2012-07-17    20.0\n",
        "2012-07-18    18.0\n",
        "2012-07-19    18.0\n",
        "2012-07-20    22.0\n",
        "2012-07-21    15.0\n",
        "dtype: float64"
       ]
      }
     ],
     "prompt_number": 331
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This fills the na value with the previous value . Similarly bfill"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "diff.fillna(999)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 332,
       "text": [
        "2012-07-16     28.5\n",
        "2012-07-17     20.0\n",
        "2012-07-18     18.0\n",
        "2012-07-19    999.0\n",
        "2012-07-20     22.0\n",
        "2012-07-21     15.0\n",
        "dtype: float64"
       ]
      }
     ],
     "prompt_number": 332
    },
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Resampling "
     ]
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Resampling is done both in the cases of very high frquency time series as well as very low frequency time series . The high frequency time series is converted to low frequency time series and vice versa . The terms used are upsampling and the downsampling ."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "datetime.now()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 336,
       "text": [
        "datetime.datetime(2014, 11, 18, 10, 9, 39, 676849)"
       ]
      }
     ],
     "prompt_number": 336
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This gibes the timestamp of the present time and date "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rng=pd.date_range(datetime.now(),periods=1000000,freq='t')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 339
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s=Series(np.random.randn(1000000),index=rng)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 340
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s[s.index[:15]]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 341,
       "text": [
        "2014-11-18 10:11:16.650422    2.028926\n",
        "2014-11-18 10:12:16.650422   -0.143383\n",
        "2014-11-18 10:13:16.650422   -0.100755\n",
        "2014-11-18 10:14:16.650422   -1.150286\n",
        "2014-11-18 10:15:16.650422   -0.772578\n",
        "2014-11-18 10:16:16.650422   -0.099189\n",
        "2014-11-18 10:17:16.650422   -0.467094\n",
        "2014-11-18 10:18:16.650422    0.733126\n",
        "2014-11-18 10:19:16.650422    0.752558\n",
        "2014-11-18 10:20:16.650422    0.046551\n",
        "2014-11-18 10:21:16.650422    1.818591\n",
        "2014-11-18 10:22:16.650422   -0.422004\n",
        "2014-11-18 10:23:16.650422   -0.890383\n",
        "2014-11-18 10:24:16.650422    0.202406\n",
        "2014-11-18 10:25:16.650422   -1.489607\n",
        "Freq: T, dtype: float64"
       ]
      }
     ],
     "prompt_number": 341
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s.ix[s.index[:5]]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 344,
       "text": [
        "2014-11-18 10:11:16.650422    2.028926\n",
        "2014-11-18 10:12:16.650422   -0.143383\n",
        "2014-11-18 10:13:16.650422   -0.100755\n",
        "2014-11-18 10:14:16.650422   -1.150286\n",
        "2014-11-18 10:15:16.650422   -0.772578\n",
        "Freq: T, dtype: float64"
       ]
      }
     ],
     "prompt_number": 344
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "API method called reindex"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s.reindex(s.index[:15])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 345,
       "text": [
        "2014-11-18 10:11:16.650422    2.028926\n",
        "2014-11-18 10:12:16.650422   -0.143383\n",
        "2014-11-18 10:13:16.650422   -0.100755\n",
        "2014-11-18 10:14:16.650422   -1.150286\n",
        "2014-11-18 10:15:16.650422   -0.772578\n",
        "2014-11-18 10:16:16.650422   -0.099189\n",
        "2014-11-18 10:17:16.650422   -0.467094\n",
        "2014-11-18 10:18:16.650422    0.733126\n",
        "2014-11-18 10:19:16.650422    0.752558\n",
        "2014-11-18 10:20:16.650422    0.046551\n",
        "2014-11-18 10:21:16.650422    1.818591\n",
        "2014-11-18 10:22:16.650422   -0.422004\n",
        "2014-11-18 10:23:16.650422   -0.890383\n",
        "2014-11-18 10:24:16.650422    0.202406\n",
        "2014-11-18 10:25:16.650422   -1.489607\n",
        "Freq: T, dtype: float64"
       ]
      }
     ],
     "prompt_number": 345
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Select out the data every 30 minutes instead of every minute "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rng_resampled=pd.date_range(rng[0],rng[-1],freq='30t')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 349
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "The above definition produces the same time series as the original one but with a frquency of 30 minutes instead of a minute "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(rng_resampled)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 350,
       "text": [
        "33334"
       ]
      }
     ],
     "prompt_number": 350
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(rng)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 351,
       "text": [
        "1000000"
       ]
      }
     ],
     "prompt_number": 351
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "float(len(rng)/len(rng_resampled))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 353,
       "text": [
        "29.0"
       ]
      }
     ],
     "prompt_number": 353
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s[rng_resampled][:3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 365,
       "text": [
        "2014-11-18 10:11:16.650422    2.028926\n",
        "2014-11-18 10:41:16.650422   -1.267024\n",
        "2014-11-18 11:11:16.650422   -0.562143\n",
        "Freq: 30T, dtype: float64"
       ]
      }
     ],
     "prompt_number": 365
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_new=s[rng_resampled]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 356
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_new[:3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 369,
       "text": [
        "2014-11-18 10:11:16.650422    2.028926\n",
        "2014-11-18 10:41:16.650422   -1.267024\n",
        "2014-11-18 11:11:16.650422   -0.562143\n",
        "Freq: 30T, dtype: float64"
       ]
      }
     ],
     "prompt_number": 369
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s[:3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 383,
       "text": [
        "2014-11-18 10:11:16.650422    2.028926\n",
        "2014-11-18 10:12:16.650422   -0.143383\n",
        "2014-11-18 10:13:16.650422   -0.100755\n",
        "Freq: T, dtype: float64"
       ]
      }
     ],
     "prompt_number": 383
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Now we will use the Resample () function to do the same function but with more control and flexibity"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_resampled=s.resample('30t')\n",
      "s_resampled[:3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 386,
       "text": [
        "2014-11-18 10:00:00   -0.146032\n",
        "2014-11-18 10:30:00    0.111968\n",
        "2014-11-18 11:00:00   -0.021962\n",
        "Freq: 30T, dtype: float64"
       ]
      }
     ],
     "prompt_number": 386
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s[:3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 387,
       "text": [
        "2014-11-18 10:11:16.650422    2.028926\n",
        "2014-11-18 10:12:16.650422   -0.143383\n",
        "2014-11-18 10:13:16.650422   -0.100755\n",
        "Freq: T, dtype: float64"
       ]
      }
     ],
     "prompt_number": 387
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now we have some aggregate functions as to how we want to resample the original sample . For this we use an attribute "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_count=s.resample('30t',how='count')\n",
      "s_count[:5]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 389,
       "text": [
        "2014-11-18 10:00:00    19\n",
        "2014-11-18 10:30:00    30\n",
        "2014-11-18 11:00:00    30\n",
        "2014-11-18 11:30:00    30\n",
        "2014-11-18 12:00:00    30\n",
        "Freq: 30T, dtype: int64"
       ]
      }
     ],
     "prompt_number": 389
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So clearly it puts 19 samples in the first bin"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "by default the mean is calculated if no function is given , we can see that in the following way"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(s[:19])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 391,
       "text": [
        "19"
       ]
      }
     ],
     "prompt_number": 391
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "mean(s[:19])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 392,
       "text": [
        "-0.14603154357224024"
       ]
      }
     ],
     "prompt_number": 392
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_resampled[0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 394,
       "text": [
        "-0.14603154357224027"
       ]
      }
     ],
     "prompt_number": 394
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Therefore clearly by default the mean value is calculated for a bin .\n",
      "Now other aggregrate functions that we can perform are : "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_sum=s.resample('h',how='sum')\n",
      "s_sum[:3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 396,
       "text": [
        "2014-11-18 10:00:00    0.584436\n",
        "2014-11-18 11:00:00   -3.120706\n",
        "2014-11-18 12:00:00    6.596194\n",
        "Freq: H, dtype: float64"
       ]
      }
     ],
     "prompt_number": 396
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sum(s[:49]) #checking "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 399,
       "text": [
        "0.58443565252121754"
       ]
      }
     ],
     "prompt_number": 399
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now another option which we can give is that which way should it be closed "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_count[:5]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 400,
       "text": [
        "2014-11-18 10:00:00    19\n",
        "2014-11-18 10:30:00    30\n",
        "2014-11-18 11:00:00    30\n",
        "2014-11-18 11:30:00    30\n",
        "2014-11-18 12:00:00    30\n",
        "Freq: 30T, dtype: int64"
       ]
      }
     ],
     "prompt_number": 400
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_count_left=s.resample('30t',how='count',closed='left')\n",
      "s_count_left[:5]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 407,
       "text": [
        "2014-11-18 10:00:00    19\n",
        "2014-11-18 10:30:00    30\n",
        "2014-11-18 11:00:00    30\n",
        "2014-11-18 11:30:00    30\n",
        "2014-11-18 12:00:00    30\n",
        "Freq: 30T, dtype: int64"
       ]
      }
     ],
     "prompt_number": 407
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "What this closed option does is controls the end points that is at which place should the time 10:30 be . If we give left then time 10:30 will be the first time in the second bin and if we give right then 10:30 will be the last time of the first bin  "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_count_right=s.resample('30t',how='count',closed='right')\n",
      "s_count_right[:5]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 403,
       "text": [
        "2014-11-18 10:00:00    19\n",
        "2014-11-18 10:30:00    30\n",
        "2014-11-18 11:00:00    30\n",
        "2014-11-18 11:30:00    30\n",
        "2014-11-18 12:00:00    30\n",
        "Freq: 30T, dtype: int64"
       ]
      }
     ],
     "prompt_number": 403
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now another option we give is the label . What should be the label of the first bin , Should it be the left most figure or the rightmost figure "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_count=s.resample('30t',how='count')\n",
      "s_count[:3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 409,
       "text": [
        "2014-11-18 10:00:00    19\n",
        "2014-11-18 10:30:00    30\n",
        "2014-11-18 11:00:00    30\n",
        "Freq: 30T, dtype: int64"
       ]
      }
     ],
     "prompt_number": 409
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Clearly by default the label is the leftmost timestamp"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_count=s.resample('30t',how='count',label='right')\n",
      "s_count[:3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 410,
       "text": [
        "2014-11-18 10:30:00    19\n",
        "2014-11-18 11:00:00    30\n",
        "2014-11-18 11:30:00    30\n",
        "Freq: 30T, dtype: int64"
       ]
      }
     ],
     "prompt_number": 410
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "now the labels are shifted 30 minutes ahead than the previous labels"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_daily=s.resample('D',how='count')\n",
      "s_daily[:5]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 411,
       "text": [
        "2014-11-18     829\n",
        "2014-11-19    1440\n",
        "2014-11-20    1440\n",
        "2014-11-21    1440\n",
        "2014-11-22    1440\n",
        "Freq: D, dtype: int64"
       ]
      }
     ],
     "prompt_number": 411
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Timedelta"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from datetime import timedelta"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 412
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_resample=s.resample('30t',how='count',\n",
      "                      loffset=timedelta(seconds=-1),\n",
      "                      closed='left',label='right')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 413
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_resample[:3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 414,
       "text": [
        "2014-11-18 10:29:59    19\n",
        "2014-11-18 10:59:59    30\n",
        "2014-11-18 11:29:59    30\n",
        "Freq: 30T, dtype: int64"
       ]
      }
     ],
     "prompt_number": 414
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So here see the labels , they have an offset of 1 second "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now resample to monthly by mean "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_month=s.resample('M',how='max')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 415
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_month[:3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 417,
       "text": [
        "2014-11-30    3.711304\n",
        "2014-12-31    3.989436\n",
        "2015-01-31    4.230057\n",
        "Freq: M, dtype: float64"
       ]
      }
     ],
     "prompt_number": 417
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We can even put our own functions in the how option for example the np andmath actions "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import timeit"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 418
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%timeit s.resample('M',how='max')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "100 loops, best of 3: 6.12 ms per loop\n"
       ]
      }
     ],
     "prompt_number": 423
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%timeit s.resample('M',how=np.max)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "100 loops, best of 3: 5.94 ms per loop\n"
       ]
      }
     ],
     "prompt_number": 425
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We can also have more than 1 methods "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "resampled_s=s.resample('5M',how=['count','mean','max','min','sum'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 426
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "resampled_s"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>count</th>\n",
        "      <th>mean</th>\n",
        "      <th>max</th>\n",
        "      <th>min</th>\n",
        "      <th>sum</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2014-11-30</th>\n",
        "      <td>  18109</td>\n",
        "      <td>-0.009055</td>\n",
        "      <td> 3.711304</td>\n",
        "      <td>-4.391237</td>\n",
        "      <td>-163.976299</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-04-30</th>\n",
        "      <td> 217440</td>\n",
        "      <td>-0.002441</td>\n",
        "      <td> 4.694599</td>\n",
        "      <td>-4.530394</td>\n",
        "      <td>-530.741947</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-09-30</th>\n",
        "      <td> 220320</td>\n",
        "      <td> 0.002081</td>\n",
        "      <td> 4.722479</td>\n",
        "      <td>-4.456352</td>\n",
        "      <td> 458.586257</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2016-02-29</th>\n",
        "      <td> 218880</td>\n",
        "      <td> 0.001481</td>\n",
        "      <td> 4.281783</td>\n",
        "      <td>-4.384365</td>\n",
        "      <td> 324.129819</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2016-07-31</th>\n",
        "      <td> 220320</td>\n",
        "      <td>-0.000899</td>\n",
        "      <td> 4.789451</td>\n",
        "      <td>-4.564805</td>\n",
        "      <td>-198.125785</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2016-12-31</th>\n",
        "      <td> 104931</td>\n",
        "      <td>-0.000955</td>\n",
        "      <td> 4.642479</td>\n",
        "      <td>-4.535409</td>\n",
        "      <td>-100.215036</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 427,
       "text": [
        "             count      mean       max       min         sum\n",
        "2014-11-30   18109 -0.009055  3.711304 -4.391237 -163.976299\n",
        "2015-04-30  217440 -0.002441  4.694599 -4.530394 -530.741947\n",
        "2015-09-30  220320  0.002081  4.722479 -4.456352  458.586257\n",
        "2016-02-29  218880  0.001481  4.281783 -4.384365  324.129819\n",
        "2016-07-31  220320 -0.000899  4.789451 -4.564805 -198.125785\n",
        "2016-12-31  104931 -0.000955  4.642479 -4.535409 -100.215036"
       ]
      }
     ],
     "prompt_number": 427
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now we will see more of the functions that are generally used "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "For a financial analyst , open high low close are 4 values that are very important and used in their analysis "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sf=s.resample('D',how='ohlc')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 428
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sf[:4]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>open</th>\n",
        "      <th>high</th>\n",
        "      <th>low</th>\n",
        "      <th>close</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2014-11-18</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td> 3.055214</td>\n",
        "      <td>-3.238825</td>\n",
        "      <td> 0.761561</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-19</th>\n",
        "      <td>-0.542305</td>\n",
        "      <td> 3.703367</td>\n",
        "      <td>-3.455139</td>\n",
        "      <td>-0.759931</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-20</th>\n",
        "      <td> 0.722840</td>\n",
        "      <td> 3.510022</td>\n",
        "      <td>-3.064855</td>\n",
        "      <td> 0.133237</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-21</th>\n",
        "      <td>-0.769452</td>\n",
        "      <td> 3.207151</td>\n",
        "      <td>-3.226181</td>\n",
        "      <td> 0.680043</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 429,
       "text": [
        "                open      high       low     close\n",
        "2014-11-18  2.028926  3.055214 -3.238825  0.761561\n",
        "2014-11-19 -0.542305  3.703367 -3.455139 -0.759931\n",
        "2014-11-20  0.722840  3.510022 -3.064855  0.133237\n",
        "2014-11-21 -0.769452  3.207151 -3.226181  0.680043"
       ]
      }
     ],
     "prompt_number": 429
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "resampled=s.resample('5t',how='ohlc')\n",
      "resampled=resampled[:3]\n",
      "resampled"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>open</th>\n",
        "      <th>high</th>\n",
        "      <th>low</th>\n",
        "      <th>close</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:10:00</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td> 2.028926</td>\n",
        "      <td>-1.150286</td>\n",
        "      <td>-1.150286</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:15:00</th>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:20:00</th>\n",
        "      <td> 0.046551</td>\n",
        "      <td> 1.818591</td>\n",
        "      <td>-0.890383</td>\n",
        "      <td> 0.202406</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 433,
       "text": [
        "                         open      high       low     close\n",
        "2014-11-18 10:10:00  2.028926  2.028926 -1.150286 -1.150286\n",
        "2014-11-18 10:15:00 -0.772578  0.752558 -0.772578  0.752558\n",
        "2014-11-18 10:20:00  0.046551  1.818591 -0.890383  0.202406"
       ]
      }
     ],
     "prompt_number": 433
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Down sampling"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ds=resampled.resample('t')\n",
      "ds"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>open</th>\n",
        "      <th>high</th>\n",
        "      <th>low</th>\n",
        "      <th>close</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:10:00</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td> 2.028926</td>\n",
        "      <td>-1.150286</td>\n",
        "      <td>-1.150286</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:11:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:12:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:13:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:14:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:15:00</th>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:16:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:17:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:18:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:19:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:20:00</th>\n",
        "      <td> 0.046551</td>\n",
        "      <td> 1.818591</td>\n",
        "      <td>-0.890383</td>\n",
        "      <td> 0.202406</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 435,
       "text": [
        "                         open      high       low     close\n",
        "2014-11-18 10:10:00  2.028926  2.028926 -1.150286 -1.150286\n",
        "2014-11-18 10:11:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:12:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:13:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:14:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:15:00 -0.772578  0.752558 -0.772578  0.752558\n",
        "2014-11-18 10:16:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:17:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:18:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:19:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:20:00  0.046551  1.818591 -0.890383  0.202406"
       ]
      }
     ],
     "prompt_number": 435
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Clearly there is no data available by default NAN is included"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "lets fill these values "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ds.fillna(method='ffill')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>open</th>\n",
        "      <th>high</th>\n",
        "      <th>low</th>\n",
        "      <th>close</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:10:00</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td> 2.028926</td>\n",
        "      <td>-1.150286</td>\n",
        "      <td>-1.150286</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:11:00</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td> 2.028926</td>\n",
        "      <td>-1.150286</td>\n",
        "      <td>-1.150286</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:12:00</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td> 2.028926</td>\n",
        "      <td>-1.150286</td>\n",
        "      <td>-1.150286</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:13:00</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td> 2.028926</td>\n",
        "      <td>-1.150286</td>\n",
        "      <td>-1.150286</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:14:00</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td> 2.028926</td>\n",
        "      <td>-1.150286</td>\n",
        "      <td>-1.150286</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:15:00</th>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:16:00</th>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:17:00</th>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:18:00</th>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:19:00</th>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:20:00</th>\n",
        "      <td> 0.046551</td>\n",
        "      <td> 1.818591</td>\n",
        "      <td>-0.890383</td>\n",
        "      <td> 0.202406</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 437,
       "text": [
        "                         open      high       low     close\n",
        "2014-11-18 10:10:00  2.028926  2.028926 -1.150286 -1.150286\n",
        "2014-11-18 10:11:00  2.028926  2.028926 -1.150286 -1.150286\n",
        "2014-11-18 10:12:00  2.028926  2.028926 -1.150286 -1.150286\n",
        "2014-11-18 10:13:00  2.028926  2.028926 -1.150286 -1.150286\n",
        "2014-11-18 10:14:00  2.028926  2.028926 -1.150286 -1.150286\n",
        "2014-11-18 10:15:00 -0.772578  0.752558 -0.772578  0.752558\n",
        "2014-11-18 10:16:00 -0.772578  0.752558 -0.772578  0.752558\n",
        "2014-11-18 10:17:00 -0.772578  0.752558 -0.772578  0.752558\n",
        "2014-11-18 10:18:00 -0.772578  0.752558 -0.772578  0.752558\n",
        "2014-11-18 10:19:00 -0.772578  0.752558 -0.772578  0.752558\n",
        "2014-11-18 10:20:00  0.046551  1.818591 -0.890383  0.202406"
       ]
      }
     ],
     "prompt_number": 437
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is a fill forward method where the previous value is used to fill the missing forward values "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We can also put a limit to this filling ."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ds.fillna(method='ffill',limit=2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>open</th>\n",
        "      <th>high</th>\n",
        "      <th>low</th>\n",
        "      <th>close</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:10:00</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td> 2.028926</td>\n",
        "      <td>-1.150286</td>\n",
        "      <td>-1.150286</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:11:00</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td> 2.028926</td>\n",
        "      <td>-1.150286</td>\n",
        "      <td>-1.150286</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:12:00</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td> 2.028926</td>\n",
        "      <td>-1.150286</td>\n",
        "      <td>-1.150286</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:13:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:14:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:15:00</th>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:16:00</th>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:17:00</th>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:18:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:19:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:20:00</th>\n",
        "      <td> 0.046551</td>\n",
        "      <td> 1.818591</td>\n",
        "      <td>-0.890383</td>\n",
        "      <td> 0.202406</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 438,
       "text": [
        "                         open      high       low     close\n",
        "2014-11-18 10:10:00  2.028926  2.028926 -1.150286 -1.150286\n",
        "2014-11-18 10:11:00  2.028926  2.028926 -1.150286 -1.150286\n",
        "2014-11-18 10:12:00  2.028926  2.028926 -1.150286 -1.150286\n",
        "2014-11-18 10:13:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:14:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:15:00 -0.772578  0.752558 -0.772578  0.752558\n",
        "2014-11-18 10:16:00 -0.772578  0.752558 -0.772578  0.752558\n",
        "2014-11-18 10:17:00 -0.772578  0.752558 -0.772578  0.752558\n",
        "2014-11-18 10:18:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:19:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:20:00  0.046551  1.818591 -0.890383  0.202406"
       ]
      }
     ],
     "prompt_number": 438
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "so ffill only takes place till 2 fills rest are still NAN"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Like ffill , there is bfill ( again it is obvious what it means )"
     ]
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Interpolation "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ds"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>open</th>\n",
        "      <th>high</th>\n",
        "      <th>low</th>\n",
        "      <th>close</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:10:00</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td> 2.028926</td>\n",
        "      <td>-1.150286</td>\n",
        "      <td>-1.150286</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:11:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:12:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:13:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:14:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:15:00</th>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:16:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:17:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:18:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:19:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:20:00</th>\n",
        "      <td> 0.046551</td>\n",
        "      <td> 1.818591</td>\n",
        "      <td>-0.890383</td>\n",
        "      <td> 0.202406</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 440,
       "text": [
        "                         open      high       low     close\n",
        "2014-11-18 10:10:00  2.028926  2.028926 -1.150286 -1.150286\n",
        "2014-11-18 10:11:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:12:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:13:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:14:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:15:00 -0.772578  0.752558 -0.772578  0.752558\n",
        "2014-11-18 10:16:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:17:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:18:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:19:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:20:00  0.046551  1.818591 -0.890383  0.202406"
       ]
      }
     ],
     "prompt_number": 440
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ds.interpolate()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>open</th>\n",
        "      <th>high</th>\n",
        "      <th>low</th>\n",
        "      <th>close</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:10:00</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td> 2.028926</td>\n",
        "      <td>-1.150286</td>\n",
        "      <td>-1.150286</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:11:00</th>\n",
        "      <td> 1.468625</td>\n",
        "      <td> 1.773652</td>\n",
        "      <td>-1.074744</td>\n",
        "      <td>-0.769717</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:12:00</th>\n",
        "      <td> 0.908324</td>\n",
        "      <td> 1.518379</td>\n",
        "      <td>-0.999203</td>\n",
        "      <td>-0.389148</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:13:00</th>\n",
        "      <td> 0.348024</td>\n",
        "      <td> 1.263105</td>\n",
        "      <td>-0.923661</td>\n",
        "      <td>-0.008579</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:14:00</th>\n",
        "      <td>-0.212277</td>\n",
        "      <td> 1.007832</td>\n",
        "      <td>-0.848119</td>\n",
        "      <td> 0.371989</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:15:00</th>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:16:00</th>\n",
        "      <td>-0.608752</td>\n",
        "      <td> 0.965765</td>\n",
        "      <td>-0.796139</td>\n",
        "      <td> 0.642528</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:17:00</th>\n",
        "      <td>-0.444927</td>\n",
        "      <td> 1.178971</td>\n",
        "      <td>-0.819700</td>\n",
        "      <td> 0.532497</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:18:00</th>\n",
        "      <td>-0.281101</td>\n",
        "      <td> 1.392178</td>\n",
        "      <td>-0.843261</td>\n",
        "      <td> 0.422467</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:19:00</th>\n",
        "      <td>-0.117275</td>\n",
        "      <td> 1.605385</td>\n",
        "      <td>-0.866822</td>\n",
        "      <td> 0.312436</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:20:00</th>\n",
        "      <td> 0.046551</td>\n",
        "      <td> 1.818591</td>\n",
        "      <td>-0.890383</td>\n",
        "      <td> 0.202406</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 441,
       "text": [
        "                         open      high       low     close\n",
        "2014-11-18 10:10:00  2.028926  2.028926 -1.150286 -1.150286\n",
        "2014-11-18 10:11:00  1.468625  1.773652 -1.074744 -0.769717\n",
        "2014-11-18 10:12:00  0.908324  1.518379 -0.999203 -0.389148\n",
        "2014-11-18 10:13:00  0.348024  1.263105 -0.923661 -0.008579\n",
        "2014-11-18 10:14:00 -0.212277  1.007832 -0.848119  0.371989\n",
        "2014-11-18 10:15:00 -0.772578  0.752558 -0.772578  0.752558\n",
        "2014-11-18 10:16:00 -0.608752  0.965765 -0.796139  0.642528\n",
        "2014-11-18 10:17:00 -0.444927  1.178971 -0.819700  0.532497\n",
        "2014-11-18 10:18:00 -0.281101  1.392178 -0.843261  0.422467\n",
        "2014-11-18 10:19:00 -0.117275  1.605385 -0.866822  0.312436\n",
        "2014-11-18 10:20:00  0.046551  1.818591 -0.890383  0.202406"
       ]
      }
     ],
     "prompt_number": 441
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This function used for series is used to interpolate the values in the column . Linearly the values are filled "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now suppose for different columns we want to fill it with different methods and different limits . For this we need to make a dictionary first "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "limits={'open':4,'high':3,'low':2,'close':1}\n",
      "limits"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 447,
       "text": [
        "{'close': 1, 'high': 3, 'low': 2, 'open': 4}"
       ]
      }
     ],
     "prompt_number": 447
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ds[:5]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>open</th>\n",
        "      <th>high</th>\n",
        "      <th>low</th>\n",
        "      <th>close</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:10:00</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td> 2.028926</td>\n",
        "      <td>-1.150286</td>\n",
        "      <td>-1.150286</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:11:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:12:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:13:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:14:00</th>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 446,
       "text": [
        "                         open      high       low     close\n",
        "2014-11-18 10:10:00  2.028926  2.028926 -1.150286 -1.150286\n",
        "2014-11-18 10:11:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:12:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:13:00       NaN       NaN       NaN       NaN\n",
        "2014-11-18 10:14:00       NaN       NaN       NaN       NaN"
       ]
      }
     ],
     "prompt_number": 446
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ds.apply(lambda x: x.fillna(limit=limits[x.name],method='ffill'))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>open</th>\n",
        "      <th>high</th>\n",
        "      <th>low</th>\n",
        "      <th>close</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:10:00</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td> 2.028926</td>\n",
        "      <td>-1.150286</td>\n",
        "      <td>-1.150286</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:11:00</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td> 2.028926</td>\n",
        "      <td>-1.150286</td>\n",
        "      <td>-1.150286</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:12:00</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td> 2.028926</td>\n",
        "      <td>-1.150286</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:13:00</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td> 2.028926</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:14:00</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:15:00</th>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:16:00</th>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:17:00</th>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "      <td>-0.772578</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:18:00</th>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:19:00</th>\n",
        "      <td>-0.772578</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:20:00</th>\n",
        "      <td> 0.046551</td>\n",
        "      <td> 1.818591</td>\n",
        "      <td>-0.890383</td>\n",
        "      <td> 0.202406</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 449,
       "text": [
        "                         open      high       low     close\n",
        "2014-11-18 10:10:00  2.028926  2.028926 -1.150286 -1.150286\n",
        "2014-11-18 10:11:00  2.028926  2.028926 -1.150286 -1.150286\n",
        "2014-11-18 10:12:00  2.028926  2.028926 -1.150286       NaN\n",
        "2014-11-18 10:13:00  2.028926  2.028926       NaN       NaN\n",
        "2014-11-18 10:14:00  2.028926       NaN       NaN       NaN\n",
        "2014-11-18 10:15:00 -0.772578  0.752558 -0.772578  0.752558\n",
        "2014-11-18 10:16:00 -0.772578  0.752558 -0.772578  0.752558\n",
        "2014-11-18 10:17:00 -0.772578  0.752558 -0.772578       NaN\n",
        "2014-11-18 10:18:00 -0.772578  0.752558       NaN       NaN\n",
        "2014-11-18 10:19:00 -0.772578       NaN       NaN       NaN\n",
        "2014-11-18 10:20:00  0.046551  1.818591 -0.890383  0.202406"
       ]
      }
     ],
     "prompt_number": 449
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now suppose wa want to fill the values using a method while doing the undersampling itself "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "resampled"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>open</th>\n",
        "      <th>high</th>\n",
        "      <th>low</th>\n",
        "      <th>close</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:10:00</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td> 2.028926</td>\n",
        "      <td>-1.150286</td>\n",
        "      <td>-1.150286</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:15:00</th>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:20:00</th>\n",
        "      <td> 0.046551</td>\n",
        "      <td> 1.818591</td>\n",
        "      <td>-0.890383</td>\n",
        "      <td> 0.202406</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 450,
       "text": [
        "                         open      high       low     close\n",
        "2014-11-18 10:10:00  2.028926  2.028926 -1.150286 -1.150286\n",
        "2014-11-18 10:15:00 -0.772578  0.752558 -0.772578  0.752558\n",
        "2014-11-18 10:20:00  0.046551  1.818591 -0.890383  0.202406"
       ]
      }
     ],
     "prompt_number": 450
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "resampled.resample('2t',fill_method='bfill')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>open</th>\n",
        "      <th>high</th>\n",
        "      <th>low</th>\n",
        "      <th>close</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:10:00</th>\n",
        "      <td> 2.028926</td>\n",
        "      <td> 2.028926</td>\n",
        "      <td>-1.150286</td>\n",
        "      <td>-1.150286</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:12:00</th>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:14:00</th>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "      <td>-0.772578</td>\n",
        "      <td> 0.752558</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:16:00</th>\n",
        "      <td> 0.046551</td>\n",
        "      <td> 1.818591</td>\n",
        "      <td>-0.890383</td>\n",
        "      <td> 0.202406</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:18:00</th>\n",
        "      <td> 0.046551</td>\n",
        "      <td> 1.818591</td>\n",
        "      <td>-0.890383</td>\n",
        "      <td> 0.202406</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-11-18 10:20:00</th>\n",
        "      <td> 0.046551</td>\n",
        "      <td> 1.818591</td>\n",
        "      <td>-0.890383</td>\n",
        "      <td> 0.202406</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 451,
       "text": [
        "                         open      high       low     close\n",
        "2014-11-18 10:10:00  2.028926  2.028926 -1.150286 -1.150286\n",
        "2014-11-18 10:12:00 -0.772578  0.752558 -0.772578  0.752558\n",
        "2014-11-18 10:14:00 -0.772578  0.752558 -0.772578  0.752558\n",
        "2014-11-18 10:16:00  0.046551  1.818591 -0.890383  0.202406\n",
        "2014-11-18 10:18:00  0.046551  1.818591 -0.890383  0.202406\n",
        "2014-11-18 10:20:00  0.046551  1.818591 -0.890383  0.202406"
       ]
      }
     ],
     "prompt_number": 451
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Thus the function used is the fill_method "
     ]
    },
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Periods logic "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Periods are time spans vs time points (timestamps) .They help in easy calender arithmetic "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "pandas has got a period type "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pandas import Period as Pe"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 456
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p=Pe('2011',freq='A-jun')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 457
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 458,
       "text": [
        "Period('2011', 'A-JUN')"
       ]
      }
     ],
     "prompt_number": 458
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Arithmetic "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p+2"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 460,
       "text": [
        "Period('2013', 'A-JUN')"
       ]
      }
     ],
     "prompt_number": 460
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p.year"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 462,
       "text": [
        "2011"
       ]
      }
     ],
     "prompt_number": 462
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Conversions - suppose to monthly "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p.asfreq('M')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 463,
       "text": [
        "Period('2011-06', 'M')"
       ]
      }
     ],
     "prompt_number": 463
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "we get back june 2011 as it was A-june , annual june. If we want the start of the annual session then use : "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p.asfreq('M',how='start')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 464,
       "text": [
        "Period('2010-07', 'M')"
       ]
      }
     ],
     "prompt_number": 464
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We get july 2010 here ."
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Suppose we wanted the second month in the interval and third to last business day in that month "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "(p.asfreq('M',how='start')+1).asfreq('B','end')-2"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 465,
       "text": [
        "Period('2010-08-27', 'B')"
       ]
      }
     ],
     "prompt_number": 465
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "B is for business day "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s[:5]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 471,
       "text": [
        "2014-11-18 10:11:16.650422    2.028926\n",
        "2014-11-18 10:12:16.650422   -0.143383\n",
        "2014-11-18 10:13:16.650422   -0.100755\n",
        "2014-11-18 10:14:16.650422   -1.150286\n",
        "2014-11-18 10:15:16.650422   -0.772578\n",
        "Freq: T, dtype: float64"
       ]
      }
     ],
     "prompt_number": 471
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_month=s.resample('M')\n",
      "s_month[0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 478,
       "text": [
        "-0.0090549615425972903"
       ]
      }
     ],
     "prompt_number": 478
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(s_month[0])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 479,
       "text": [
        "numpy.float64"
       ]
      }
     ],
     "prompt_number": 479
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(s_month)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 480,
       "text": [
        "pandas.core.series.Series"
       ]
      }
     ],
     "prompt_number": 480
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s.index[0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 481,
       "text": [
        "Timestamp('2014-11-18 10:11:16.650422', offset='T')"
       ]
      }
     ],
     "prompt_number": 481
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "The index of the series s is a timestamp . Suppose we need a period span instead of a time stamp."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_month=s.resample('M',kind='Period')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 483
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_month[:4]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 486,
       "text": [
        "2014-11   -0.009055\n",
        "2014-12   -0.000431\n",
        "2015-01   -0.006632\n",
        "2015-02    0.000491\n",
        "Freq: M, dtype: float64"
       ]
      }
     ],
     "prompt_number": 486
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(s_month.index)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 488,
       "text": [
        "pandas.tseries.period.PeriodIndex"
       ]
      }
     ],
     "prompt_number": 488
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So we get a period index now instead of a time stamp"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_month=s_month[:4]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 489
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "list(s_month.index)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 491,
       "text": [
        "[Period('2014-11', 'M'),\n",
        " Period('2014-12', 'M'),\n",
        " Period('2015-01', 'M'),\n",
        " Period('2015-02', 'M')]"
       ]
      }
     ],
     "prompt_number": 491
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So we list the period objects now "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We can do the same frequency logics now "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s_month.asfreq('B',how='end')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 492,
       "text": [
        "2014-11-28   -0.009055\n",
        "2014-12-31   -0.000431\n",
        "2015-01-30   -0.006632\n",
        "2015-02-27    0.000491\n",
        "Freq: B, dtype: float64"
       ]
      }
     ],
     "prompt_number": 492
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Again to make a period range we use the same function as date_range"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "pd.period_range('2012-07',periods=3,freq='M')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 493,
       "text": [
        "<class 'pandas.tseries.period.PeriodIndex'>\n",
        "[2012-07, ..., 2012-09]\n",
        "Length: 3, Freq: M"
       ]
      }
     ],
     "prompt_number": 493
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Starts in july and has 3 periods "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "!ls"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "data_panel    foo.pkl       spx_px        test1.csv\r\n",
        "fec.pickle    fred_fx.csv   stk_prices    test2.csv\r\n",
        "foo.csv       macrodata.csv stock_prices\r\n"
       ]
      }
     ],
     "prompt_number": 495
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "md=pd.read_csv('macrodata.csv')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 496
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "md[:4]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>year</th>\n",
        "      <th>quarter</th>\n",
        "      <th>realgdp</th>\n",
        "      <th>realcons</th>\n",
        "      <th>realinv</th>\n",
        "      <th>realgovt</th>\n",
        "      <th>realdpi</th>\n",
        "      <th>cpi</th>\n",
        "      <th>m1</th>\n",
        "      <th>tbilrate</th>\n",
        "      <th>unemp</th>\n",
        "      <th>pop</th>\n",
        "      <th>infl</th>\n",
        "      <th>realint</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> 1959</td>\n",
        "      <td> 1</td>\n",
        "      <td> 2710.349</td>\n",
        "      <td> 1707.4</td>\n",
        "      <td> 286.898</td>\n",
        "      <td> 470.045</td>\n",
        "      <td> 1886.9</td>\n",
        "      <td> 28.98</td>\n",
        "      <td> 139.7</td>\n",
        "      <td> 2.82</td>\n",
        "      <td> 5.8</td>\n",
        "      <td> 177.146</td>\n",
        "      <td> 0.00</td>\n",
        "      <td> 0.00</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> 1959</td>\n",
        "      <td> 2</td>\n",
        "      <td> 2778.801</td>\n",
        "      <td> 1733.7</td>\n",
        "      <td> 310.859</td>\n",
        "      <td> 481.301</td>\n",
        "      <td> 1919.7</td>\n",
        "      <td> 29.15</td>\n",
        "      <td> 141.7</td>\n",
        "      <td> 3.08</td>\n",
        "      <td> 5.1</td>\n",
        "      <td> 177.830</td>\n",
        "      <td> 2.34</td>\n",
        "      <td> 0.74</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td> 1959</td>\n",
        "      <td> 3</td>\n",
        "      <td> 2775.488</td>\n",
        "      <td> 1751.8</td>\n",
        "      <td> 289.226</td>\n",
        "      <td> 491.260</td>\n",
        "      <td> 1916.4</td>\n",
        "      <td> 29.35</td>\n",
        "      <td> 140.5</td>\n",
        "      <td> 3.82</td>\n",
        "      <td> 5.3</td>\n",
        "      <td> 178.657</td>\n",
        "      <td> 2.74</td>\n",
        "      <td> 1.09</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td> 1959</td>\n",
        "      <td> 4</td>\n",
        "      <td> 2785.204</td>\n",
        "      <td> 1753.7</td>\n",
        "      <td> 299.356</td>\n",
        "      <td> 484.052</td>\n",
        "      <td> 1931.3</td>\n",
        "      <td> 29.37</td>\n",
        "      <td> 140.0</td>\n",
        "      <td> 4.33</td>\n",
        "      <td> 5.6</td>\n",
        "      <td> 179.386</td>\n",
        "      <td> 0.27</td>\n",
        "      <td> 4.06</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 497,
       "text": [
        "   year  quarter   realgdp  realcons  realinv  realgovt  realdpi    cpi  \\\n",
        "0  1959        1  2710.349    1707.4  286.898   470.045   1886.9  28.98   \n",
        "1  1959        2  2778.801    1733.7  310.859   481.301   1919.7  29.15   \n",
        "2  1959        3  2775.488    1751.8  289.226   491.260   1916.4  29.35   \n",
        "3  1959        4  2785.204    1753.7  299.356   484.052   1931.3  29.37   \n",
        "\n",
        "      m1  tbilrate  unemp      pop  infl  realint  \n",
        "0  139.7      2.82    5.8  177.146  0.00     0.00  \n",
        "1  141.7      3.08    5.1  177.830  2.34     0.74  \n",
        "2  140.5      3.82    5.3  178.657  2.74     1.09  \n",
        "3  140.0      4.33    5.6  179.386  0.27     4.06  "
       ]
      }
     ],
     "prompt_number": 497
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "md.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 498,
       "text": [
        "(203, 14)"
       ]
      }
     ],
     "prompt_number": 498
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We have been year and a quarter "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "md.year[:4]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 500,
       "text": [
        "0    1959\n",
        "1    1959\n",
        "2    1959\n",
        "3    1959\n",
        "Name: year, dtype: float64"
       ]
      }
     ],
     "prompt_number": 500
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ind=pd.PeriodIndex(year=md.year,quarter=md.quarter,freq='Q-DEC')\n",
      "ind"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 504,
       "text": [
        "<class 'pandas.tseries.period.PeriodIndex'>\n",
        "[1959Q1, ..., 2009Q3]\n",
        "Length: 203, Freq: Q-DEC"
       ]
      }
     ],
     "prompt_number": 504
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Clearly it is a quarterly data that ends in december "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "md.index=ind"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 505
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "md[:4]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>year</th>\n",
        "      <th>quarter</th>\n",
        "      <th>realgdp</th>\n",
        "      <th>realcons</th>\n",
        "      <th>realinv</th>\n",
        "      <th>realgovt</th>\n",
        "      <th>realdpi</th>\n",
        "      <th>cpi</th>\n",
        "      <th>m1</th>\n",
        "      <th>tbilrate</th>\n",
        "      <th>unemp</th>\n",
        "      <th>pop</th>\n",
        "      <th>infl</th>\n",
        "      <th>realint</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>1959Q1</th>\n",
        "      <td> 1959</td>\n",
        "      <td> 1</td>\n",
        "      <td> 2710.349</td>\n",
        "      <td> 1707.4</td>\n",
        "      <td> 286.898</td>\n",
        "      <td> 470.045</td>\n",
        "      <td> 1886.9</td>\n",
        "      <td> 28.98</td>\n",
        "      <td> 139.7</td>\n",
        "      <td> 2.82</td>\n",
        "      <td> 5.8</td>\n",
        "      <td> 177.146</td>\n",
        "      <td> 0.00</td>\n",
        "      <td> 0.00</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1959Q2</th>\n",
        "      <td> 1959</td>\n",
        "      <td> 2</td>\n",
        "      <td> 2778.801</td>\n",
        "      <td> 1733.7</td>\n",
        "      <td> 310.859</td>\n",
        "      <td> 481.301</td>\n",
        "      <td> 1919.7</td>\n",
        "      <td> 29.15</td>\n",
        "      <td> 141.7</td>\n",
        "      <td> 3.08</td>\n",
        "      <td> 5.1</td>\n",
        "      <td> 177.830</td>\n",
        "      <td> 2.34</td>\n",
        "      <td> 0.74</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1959Q3</th>\n",
        "      <td> 1959</td>\n",
        "      <td> 3</td>\n",
        "      <td> 2775.488</td>\n",
        "      <td> 1751.8</td>\n",
        "      <td> 289.226</td>\n",
        "      <td> 491.260</td>\n",
        "      <td> 1916.4</td>\n",
        "      <td> 29.35</td>\n",
        "      <td> 140.5</td>\n",
        "      <td> 3.82</td>\n",
        "      <td> 5.3</td>\n",
        "      <td> 178.657</td>\n",
        "      <td> 2.74</td>\n",
        "      <td> 1.09</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1959Q4</th>\n",
        "      <td> 1959</td>\n",
        "      <td> 4</td>\n",
        "      <td> 2785.204</td>\n",
        "      <td> 1753.7</td>\n",
        "      <td> 299.356</td>\n",
        "      <td> 484.052</td>\n",
        "      <td> 1931.3</td>\n",
        "      <td> 29.37</td>\n",
        "      <td> 140.0</td>\n",
        "      <td> 4.33</td>\n",
        "      <td> 5.6</td>\n",
        "      <td> 179.386</td>\n",
        "      <td> 0.27</td>\n",
        "      <td> 4.06</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 506,
       "text": [
        "        year  quarter   realgdp  realcons  realinv  realgovt  realdpi    cpi  \\\n",
        "1959Q1  1959        1  2710.349    1707.4  286.898   470.045   1886.9  28.98   \n",
        "1959Q2  1959        2  2778.801    1733.7  310.859   481.301   1919.7  29.15   \n",
        "1959Q3  1959        3  2775.488    1751.8  289.226   491.260   1916.4  29.35   \n",
        "1959Q4  1959        4  2785.204    1753.7  299.356   484.052   1931.3  29.37   \n",
        "\n",
        "           m1  tbilrate  unemp      pop  infl  realint  \n",
        "1959Q1  139.7      2.82    5.8  177.146  0.00     0.00  \n",
        "1959Q2  141.7      3.08    5.1  177.830  2.34     0.74  \n",
        "1959Q3  140.5      3.82    5.3  178.657  2.74     1.09  \n",
        "1959Q4  140.0      4.33    5.6  179.386  0.27     4.06  "
       ]
      }
     ],
     "prompt_number": 506
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "md.index"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 507,
       "text": [
        "<class 'pandas.tseries.period.PeriodIndex'>\n",
        "[1959Q1, ..., 2009Q3]\n",
        "Length: 203, Freq: Q-DEC"
       ]
      }
     ],
     "prompt_number": 507
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We can drop out the first 2 columns now "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "del md['year']\n",
      "del md['quarter']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 508
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "md.head(4)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>realgdp</th>\n",
        "      <th>realcons</th>\n",
        "      <th>realinv</th>\n",
        "      <th>realgovt</th>\n",
        "      <th>realdpi</th>\n",
        "      <th>cpi</th>\n",
        "      <th>m1</th>\n",
        "      <th>tbilrate</th>\n",
        "      <th>unemp</th>\n",
        "      <th>pop</th>\n",
        "      <th>infl</th>\n",
        "      <th>realint</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>1959Q1</th>\n",
        "      <td> 2710.349</td>\n",
        "      <td> 1707.4</td>\n",
        "      <td> 286.898</td>\n",
        "      <td> 470.045</td>\n",
        "      <td> 1886.9</td>\n",
        "      <td> 28.98</td>\n",
        "      <td> 139.7</td>\n",
        "      <td> 2.82</td>\n",
        "      <td> 5.8</td>\n",
        "      <td> 177.146</td>\n",
        "      <td> 0.00</td>\n",
        "      <td> 0.00</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1959Q2</th>\n",
        "      <td> 2778.801</td>\n",
        "      <td> 1733.7</td>\n",
        "      <td> 310.859</td>\n",
        "      <td> 481.301</td>\n",
        "      <td> 1919.7</td>\n",
        "      <td> 29.15</td>\n",
        "      <td> 141.7</td>\n",
        "      <td> 3.08</td>\n",
        "      <td> 5.1</td>\n",
        "      <td> 177.830</td>\n",
        "      <td> 2.34</td>\n",
        "      <td> 0.74</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1959Q3</th>\n",
        "      <td> 2775.488</td>\n",
        "      <td> 1751.8</td>\n",
        "      <td> 289.226</td>\n",
        "      <td> 491.260</td>\n",
        "      <td> 1916.4</td>\n",
        "      <td> 29.35</td>\n",
        "      <td> 140.5</td>\n",
        "      <td> 3.82</td>\n",
        "      <td> 5.3</td>\n",
        "      <td> 178.657</td>\n",
        "      <td> 2.74</td>\n",
        "      <td> 1.09</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1959Q4</th>\n",
        "      <td> 2785.204</td>\n",
        "      <td> 1753.7</td>\n",
        "      <td> 299.356</td>\n",
        "      <td> 484.052</td>\n",
        "      <td> 1931.3</td>\n",
        "      <td> 29.37</td>\n",
        "      <td> 140.0</td>\n",
        "      <td> 4.33</td>\n",
        "      <td> 5.6</td>\n",
        "      <td> 179.386</td>\n",
        "      <td> 0.27</td>\n",
        "      <td> 4.06</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 510,
       "text": [
        "         realgdp  realcons  realinv  realgovt  realdpi    cpi     m1  \\\n",
        "1959Q1  2710.349    1707.4  286.898   470.045   1886.9  28.98  139.7   \n",
        "1959Q2  2778.801    1733.7  310.859   481.301   1919.7  29.15  141.7   \n",
        "1959Q3  2775.488    1751.8  289.226   491.260   1916.4  29.35  140.5   \n",
        "1959Q4  2785.204    1753.7  299.356   484.052   1931.3  29.37  140.0   \n",
        "\n",
        "        tbilrate  unemp      pop  infl  realint  \n",
        "1959Q1      2.82    5.8  177.146  0.00     0.00  \n",
        "1959Q2      3.08    5.1  177.830  2.34     0.74  \n",
        "1959Q3      3.82    5.3  178.657  2.74     1.09  \n",
        "1959Q4      4.33    5.6  179.386  0.27     4.06  "
       ]
      }
     ],
     "prompt_number": 510
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now lets make time series plots "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(md.unemp)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 511,
       "text": [
        "[<matplotlib.lines.Line2D at 0x10a6dbcd0>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10a686e50>"
       ]
      }
     ],
     "prompt_number": 511
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Lets make the above data only for 2008 "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "md.unemp['2008':].plot()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 512,
       "text": [
        "<matplotlib.axes._subplots.AxesSubplot at 0x10a6f24d0>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10a6fb4d0>"
       ]
      }
     ],
     "prompt_number": 512
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "md.unemp[:'1960'].plot()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 513,
       "text": [
        "<matplotlib.axes._subplots.AxesSubplot at 0x10d256d10>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10d388f10>"
       ]
      }
     ],
     "prompt_number": 513
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Multiple datas plotting "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "md.ix['2008':,['unemp','tbilrate']].plot()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 514,
       "text": [
        "<matplotlib.axes._subplots.AxesSubplot at 0x10d3aecd0>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAXIAAAEMCAYAAADZDD24AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3Xl4VNX9x/H3yQKEyI6sAYIigrhEA8iiiK3g0iqgVERB\ngxUthVZtqxW1P9THtlCfKipUVAQq4FI3xFZwZUQNCkYWEZVdVhFRTCCYhMz5/XEnIYGsk5m5c2c+\nr+eZJ7kzd+587yT3O2e+95xzjbUWERHxrgS3AxARkbpRIhcR8TglchERj1MiFxHxOCVyERGPUyIX\nEfG4KhO5MWaWMWaPMeazMvc1N8a8ZYxZb4x50xjTNPxhiohIZaprkc8GLjrqvjuAt6y1XYF3Assi\nIuISU92AIGNMOvCatfa0wPKXwHnW2j3GmDaAz1rbLdyBiohIxYKpkbe21u4J/L4HaB3CeEREpJbq\ndLLTOs15jfEXEXFRUhDP2WOMaWOt/cYY0xb4tqKVjDFK8CIiQbDWmtqsH0yLfCFwXeD364AFVQQT\ns7dJkya5HoP2T/tW0e28885zPQb9/YK/BaO67ofPAtnAycaY7caYMcBkYJAxZj3ws8By3Bk4cKDb\nIYRVLO9fLO8bQIMGDdwOIaxi/e8XjGp7rQS9YWNsuLYtIpXLyspizpw5bochQTLGYCNQWhGRKJaV\nleV2CBJhapGLiESRYFrkwfRaqRNjahWf1II+OAXA5/OpjhxnIp7IQQknHPQBKRK/XEnkIhI+ao17\ny4ED8OWX8MUXzs9gKJGLiETA3r1Osj769t130LUrdO/u3IIR8ZOdgUJ+WF4znul9lRKqkbvH74ft\n2ytO2MXFR5J12VunTpCYeGQbnjjZKSLidUVFsHHjscn6q6+gSZMjSTojA0aOdH5v3RrCdSpLLfIY\nofdVJPTK1q/L3rZuhQ4djm1dd+vmJPK6CKZFrkQeI/S+igSvuvp1t27lE/ZJJ0G4ZkLQyM46SEhI\nYPPmzaXLWVlZ/OUvfwGcmmNaWhoPPvggrVu3pl27duWGQBcUFPCnP/2JTp060aZNG8aNG8dPP/1U\n7rkPPPAArVq1ol27dixYsIDXX3+drl270qJFCyZPPjJdzT333MPw4cO56qqraNy4MZmZmaxZsyYy\nb4LEBJ/P53YIUcnvh6+/hsWL4aGH4MYb4dxzoWVLJ1nfcQcsXw5pafD734PPB3l5sGoVPPccTJoE\nV14Jp50WviQeLNXIK2GMKdc3e8+ePeTm5rJr1y7efPNNhg8fzrBhw2jSpAl33HEHW7ZsYfXq1SQl\nJXH11Vdz33338be//a30uQUFBezevZvZs2dzww03cOGFF7Jy5Uq+/vprevbsyciRI+nUqRMACxcu\n5LnnnmP+/PlMnTqVoUOHsn79epKS9OcSqU601a8jIoxTMdqKVHa/24wxdtOmTaXLWVlZ9u6777bW\nWrtkyRKbkpJii4uLSx9v1aqV/fjjj63f77epqanlnpudnW07d+5c7rl+v99aa21ubq41xtjly5eX\nrp+ZmWlfffVVa621kyZNsn379i19zO/327Zt29r333+/yvij9X0VCZe8PGtXrLB27lxr77zT2mHD\nrO3Wzdr69a3t0sXaSy+19vbbrZ0929qPPrJ2/363I66ZwLFcq3wbdU28UH0qhrpc3KJFCxISjlSi\nGjZsyIEDB9i7dy/5+flkZmaWeW2L3+8v99yS1n1KSgoArVsfuUJeSkoKBw4cKF1OS0sr/d0YQ1pa\nGrt37w7tDol4TG4uzJoFixZVXL++6qrw16+jVdQlcrfO1zVs2JD8/PzS5d27d9OhQ4dqn9eyZUtS\nUlJYt24dbdu2DUks27dvL/3d7/ezY8cO2rVrF5JtS+yLtX7kmzfDI4/A00/DhRfChAnQo8ex/a/j\nmU52BmRkZDB//nyKi4tZvHgxS5curdHzEhISGDt2LLfccgt79+4FYOfOnbz55ptBx5KTk8Mrr7zC\n4cOHmTp1Kg0aNKBPnz5Bb0/Ea6yFpUvh8suhd2+oXx9Wr4Znn4VLL4UTTlASL0uJPODhhx/mtdde\no1mzZjzzzDMMGzas3ONVTUo1ZcoUunTpQp8+fWjSpAmDBg1i/fr1lT63qm0ZYxgyZAjPP/88zZs3\nZ/78+bz88ssk6r9WasjLrfHCQpg3D3r2hBtugAsucPpsT5ni9NuWiqkfeZS599572bhxI3Pnzq3V\n8/S+ipd99x08/jj8619OnfvWW+HiiyEhDpua6kceA5SMpa681I983TqnP/dJJzm18EWL4O234Re/\niM8kHqyoO9kZ747uvy4Sa6yFN95wBuWsWQPjxjl9vFu1cjsy71JpJUbofZVol58Pc+fCww9DcrJT\nPhk50jmRKUdo9kMRiTo7dzq17yefhD59YPp0GDjQ4yMpo4yqUCIxJlpq5Dk5MGqUMzdJbi58+CEs\nXAjnn68kHmpK5CISMsXF8PLLzmRUl1/uzGeyaRM8+qhzQlPCQzXyGKH3VdyUmwtPPeWMwGzbFm65\nxUnkmuet9lQjF5GIOnr4/HPPwdlnux1V/FFppRJbt24lISGh3ORXZf39739n7NixNVpXJJLCXSMv\nGT4/bNixw+eVxN2hRF5Geno67777bo3WnThxIk8++WRIXtfn89Vogi4RNx09fH7QIA2fjxYqrZQR\njjpzyfY0yEciJdRzrRw9fP6+++J3+Hy00p8iYPTo0Wzbto1LL72URo0a8cILLwDw1FNP0b59e9q1\na8c///nP0vXvueceRo8eXeG2Bg4cyN13303//v1JTU1l8+bNzJ49m1NOOYXGjRtz4okn8sQTTwBw\n8OBBLr74Ynbt2kWjRo1o3Lgx33zzDdZaJk+eTJcuXWjZsiUjRozghx9+CP8bIRKg4fPeoT9HwNy5\nc+nYsSP//e9/ycvL48orrwScssfGjRt58803mTJlCu+88w5QfQt73rx5zJw5kwMHDtCpUydat27N\n//73P3Jzc5k9eza33norK1euJDU1lcWLF9OuXTvy8vLIzc2lTZs2PPLIIyxcuJClS5eye/dumjVr\nxvjx48P+Poj31aVGbq1zTcsLL4Sf/9y5fuVXXzk9Uk4/PXQxSmgpkVeipCQyadIkUlJSOPXUUxkz\nZgzPPvtsuccrYowhKyuL7t27k5CQQFJSEpdccgmdO3cGYMCAAQwePJj333+/0m09/vjj3H///bRr\n147k5GQmTZrEiy++qBOqEhb5+U75pEcP+POfnaHzW7fC//2f5kDxgqirkZt7Q1NLtpNCU+suexKy\nY8eOfPbZZ7V+HsCiRYu499572bBhA36/n/z8fE6voomzdetWhg0bVu7ycklJSezZsydkVyKS2FSb\nGvnOnc6Q+SefhL59NXzeq6IukYcqAQejonLJtm3bOPnkk0t/b9++fa23VVBQwBVXXMG8efMYMmQI\niYmJDBs2rMoToR07dmT27Nn07ds3mF0RqdInn8DUqfD663DNNZCdrZGXXqbSShmtW7dm06ZN5e67\n//77OXToEJ9//jlz5sxhxIgRNdpW2XJJYWEhhYWFtGzZkoSEBBYtWlTuUnCtW7dm37595Obmlt73\nm9/8hjvvvJNt27YBsHfvXhYuXFiX3ZM4UVmNvOzw+Suu0PD5WBJ1LXI3TZw4kd/97nfcfvvt3H33\n3RhjOO+88+jSpQt+v5/bbruNCy64ADh23vCqLufWqFEjHnnkEa688koKCgq49NJLGTJkSOnj3bp1\nY+TIkZxwwgn4/X7WrVvHzTffjLWWwYMHs2vXLlq1asVVV13FZZddFuZ3QWKNhs/HvqDnWjHGTARG\nAX7gM2CMtbagzOOaayWC9L7K0coOnx882Jn/WyMvo1/ELvVmjEkHxgJnWWtPAxKBq4LZloiETmXD\n5zUHSmwLtkaeCxQBDY0xSUBDYGfIohKRWrEWXnsN+vWDq6/2afh8nAmqSmat/d4Y809gG3AIeMNa\n+3ZIIxORahUXw4svwt/+5nQZvPNOaNHCGcwj8SOoGrkx5kTgNeBc4EfgBeBFa+38MuuoRh5Bel/j\nS1GRM4HV5MlO4r7rLrjkEvX/jgWRnI+8J5Btrd0XeOGXgX7A/LIrZWVlkZ6eDkDTpk3JyMgI8uWk\nJnw+X+lgkJIuaFqOreWzzx7IrFlw330+0tJgxoyBDBwI773n47333I9Py7Vf9vl8zJkzB6A0X9ZW\nsC3yM3CSdi/gJ2AOsNxaO73MOmqRR5De19iWlwePPQYPPQS9ejkllD59Kl637Ae6eE/EWuTW2tXG\nmKeBT3C6H34KPBHMtkSkct9/73QhnD7dqXu/8YYmr5JjuXLNTgkPtchjxzffwIMPwsyZMHQo3HEH\ndO3qdlQSCZ64ZqeSjUjlvv4aHngAnnnGmQNl1Sro2NHtqCTaaa4VkSiwfj2MGQNnnQWpqfDFF84c\nKMEk8brMRy7epNkWRFy0erXTB/zdd2HCBNiwAZo3dzsq8ZqI18hFBD76CP76V8jJgT/8AW66CRo1\ncjsqiQaeqJGLxCtrYckSJ4Fv2gS33w4vvAANGrgdmXidauQiYVZ2HpRx42D0aKeE8tvfhieJq0Ye\nf9QiFwmTiuZBueIKSEx0OzKJNaqRi4SY5kGRulCNXMRFhw7BrFnwj384l06bMUMXMpbIUI1cpI7y\n8pzkfcIJzhD655+Ht9+G8893J4mrRh5/1CIXCZLmQZFooRq5SC1pHhQJp4hds1MkHn39tTP68pRT\nnHr4qlVOTVxJXNymRC5SjVDOgxIJqpHHH9XIRSqheVDEK1QjFzlKyTwon3zizIPym99oHhSJHPUj\nFwlSRfOg/Oc/kJLidmQi1VONXOJaVfOgeDWJq0Yef9Qil7ikeVAklqhGLnHl4EFn5OWUKc6Jy7vu\ngl/8QsPoJXqoRi5SgeJip+fJ3LmwcKFTRtE8KBJLVCOXmGQtrFwJf/wjdOjglE4yM+HLL+H1192b\nByUSVCOPP2qRS0zZts25Av3cuZCfD6NGOa3xbt3cjkwkfFQjF8/bv985cTlvHnz2GfzqV04C79cP\nEvSdUzwmmBq5Erl4UkEBLFrkJO+33oJBg5zkffHFUL++29GJBE+JXGKatZCd7STvF16AHj2c5D18\nODRr5nZ00cPn8zFw4EC3w5AgqdeKxKSvvnKS9/z5zsWKR4+GnBzo1MntyESig1rkEpX27HH6e8+d\nCzt2wNVXO63vjIzY7W0iAiqtiMcdPAivvuq0vrOz4bLLnOT9s59Bkr47SpzQhSXEc4qLnZOV114L\n7ds7SXzUKNi5E55+GgYPVhKvLfUjjz86RCTirHWurjNvHjz7rJPAR42CBx6A1q3djk7Ee1RakYip\naLDONddosI5IWaqRS9QpO1hn7Vqnq+Do0c5gHZ20FDmWauQSFQoKYMECJ2l36gSLF8Mttzh17xkz\noH9/JfFwUo08/qhGLiFR0WCd0aPhySc1WEck3IIurRhjmgIzgR6ABa631n5U5nGVVuJARYN1rr5a\ng3VEghXpkZ0PA69ba4cbY5KA1DpsSzykosE6L72kwToibgmqRW6MaQKstNaeUMU6apHHkIoG64we\n7QzW0eXRoovmWvG2SLbIOwN7jTGzgTOAHOBma21+kNuTKFTRlXVGjXJq4Kn6/iUSNYJtkfcElgH9\nrLUrjDFTgVxr7f+VWUctcg8qLoZPP4XnnjsyWGf0aBgxQoN1RCIhki3yHcAOa+2KwPKLwB1Hr5SV\nlUV6ejoATZs2JSMjo/QrX0kXKS27u9y370BWrIA5c3ysWQNffTWQ9u0hM9PH5Mlw7bVH1v/iC/fj\n1bKWY23Z5/MxZ84cgNJ8WVt16bWyFLjBWrveGHMPkGKt/XOZx9Uij0J5ebBsGSxdCu+/70wH2707\nnHsuDBgA55wDLVu6HaXUhU81ck+LdK+V3wHzjTH1gE3AmDpsS8Jk71744AMnaS9d6lx8ODPTSdx3\n3QV9+0KjRm5HKSJ1oSH6MWbbNidplyTunTudk5QDBjjJu1cvXQpNJJpprpU4Y60zIKckab//vjMZ\nVUmZ5Nxz4Ywz1D1QxEuUyGNccTGsXn0kcX/wAaSkHEna554LJ5+sQTnxTjVyb9M1O2NMQQGsWHGk\ntZ2d7XQHHDAALr8cHnoIOnZ0O0oRcZta5FFEPUpERKUVj6mqR8mAAepRIhKPlMijnHqUSCSoRu5t\nqpFHkep6lNx4o3qUiEhoqEUeItX1KBkwALp2VY8SEamaSisRVFWPkpKugOpRIiK1pUQeJsXFzonI\nnJwjt1Wr1KNEopNq5N6mGnkIVJS0V6+GNm2cHiWZmTBkiHNiUj1KRCQaxHWLvCZJu2dPOPNMaNrU\n7WhFJB6otFIFJW0R8QIl8gAlbYlnqpF7W1zWyCs7Edm27ZGkPXSokraIxC5PtchrkrTV0hYRL4up\n0oqStojEI88mciVtkdBRjdzbPFEjV01bRCS0wtoiP3zYqqUtIlILUVdaSU21StoiIrUQdYn8hx+s\nkrZIhKlG7m3BJPKEcAUDanmLiERCVPRaERERR9S1yEVEJPyUyEVijM/nczsEiTAlchERj1ONXEQk\niqhGLiISh5TIRWKMauTxR4lcRMTjVCMXEYkiqpGLiMQhJXKRGKMaefxRIhcR8TjVyEVEokjEa+TG\nmERjzEpjzGt12Y6IiASvrqWVm4F1gJreIlFCNfL4E3QiN8akAZcAM4FafQ0QEZHQqUuL/CHgNsAf\nolhEJAR0daD4E1QiN8b8EvjWWrsStcZFRFyVFOTz+gGXGWMuARoAjY0xT1trry27UlZWFunp6QA0\nbdqUjIyM0tZCSR1Py1rWcmiXy9bIoyEeLVf/95ozZw5Aab6srTp3PzTGnAf8yVp76VH3q/uhiAt8\nuviyp7k5RF8ZWyRKKInHHw0IEhGJIpo0S0TK1cglPiiRi4h4nEorIiJRRKUVEZE4pEQuEmNUI48/\nSuQiIh6nGrmISBRRjVxEJA4pkYvEGNXI448SuYiIx6lGLiISRVQjFxGJQ0rkIjFGNfL4o0QuIuJx\nqpGLiEQR1chFROKQErlIjFGNPP4okYuIeJxq5CIiUUQ1chGROKRELhJjVCOPP0rkIiIepxq5iEgU\nUY1cRCQOKZGLxBjVyOOPErmIiMepRi4iEkVUIxcRiUNK5CIxRjXy+KNELiLicaqRi4hEEdXIRUTi\nkBK5SIxRjTz+KJGLiHicauQiIlFENXIRkTgUVCI3xnQwxiwxxnxujFlrjPl9qAMTkeCoRh5/koJ8\nXhFwq7V2lTHmOCDHGPOWtfaLEMYmIiI1EJIauTFmAfCotfadMvepRi4iUkuu1MiNMenAmcDHdd2W\niIjUXp0SeaCs8iJws7X2QGhCEpG6UI08/gRbI8cYkwy8BMyz1i6oaJ2srCzS09MBaNq0KRkZGQwc\nOBA48s+mZS1rWcvxvOzz+ZgzZw5Aab6sraBq5MYYA/wb2GetvbWSdVQjFxGppWBq5MEm8nOApcAa\noGQDE621i8uso0QuIlJLEUvkNQxGiVzEBT6fr/QrvHiPRnaGmbWWg4UH2f7jdg4VHXI7HBERII5b\n5IeKDvH9oe/Zd2if8zPf+VnuvgoeSzAJNG3QlB8LfuS0VqfRr0M/+nfoT78O/WjbqK3buyUiHheX\npZWCwwXHJuD8fRUm5LKPFdtiWqS0oEXDFjRPaU7zlOa0SGlR/mcFj6UkpwCQX5TPip0ryN6ezYfb\nPyR7ezZNGjQpTer9O/Tn1FankpiQGPb3QERih6cTeVFxUaUJuapWcmFxYaVJt6qE3DC5IU7nm9Dw\nWz/r963nw20flib33Qd207t979Lkfnb7s2nSoEnIXlOkIqqRe1vUJfLsbdk1biUfOnyIZg2a1Toh\nH1fvuJAm5FD6Lv87PtrxkZPcd2STsyuHE5ufSL+0fk6rvWN/OjftHLXxizcpkXtb1CXyPjP71Dgh\nN67fOOYTWmFxIau+WUX29uzSVnuxv5j+HfuXJvez2p5F/aT6bocqIi6JukQezSc7o4G1lm0/bitX\nZ1+/bz0ZbTJK6+x9O/SlVWort0MVkQhRIo8BeQV5LN+5vDS5f7TjI45PPb7cSdTux3cnwajnqFRM\npRVvUyKPQX7rZ93edaV19uzt2XyX/x190vqUJvfe7XtzXL3j3A5VooQSubcpkceJPQf2sGzHstLk\nvuqbVXRr2Y1+ac4J1H4d+tGhcYeYP+cgEouUyONUweECcnbnlKu1JycklzuJmtEmg+TEZLdDFZFq\nKJEL4JxE3fzD5tKknr09my37t5DZNrPcSdTmKc3dDlXCQKUVb1Mil0rt/2k/H+/4uLTVvnznctIa\np9GvQ7/S5N61RVeVY2KAErm3KZFLjR32H2btt2tL6+wfbvuQA4UH6NuhL+d0OIcRp44gvWm622GK\nxB0lcqmTnbk7WbZjGUu2LOH5z5+nf8f+jO81ngtOuEDdHUUiRIlcQuZg4UGe+ewZpq+YzqHDhxjf\nazzXnXGd5orxAJVWvE3zkUvIpNZLZWzmWFbetJKnLnuKZTuWkf5wOuP+O4613651OzwRKUMtcqmx\n3Xm7eSLnCZ749Am6NO/ChF4TGNptqLo1ioSQSisSEUXFRSz4cgHTVkxj4/cbuSnzJm7MvJE2x7Vx\nOzQRz1NpRSIiOTGZX/X4Fe9lvcfiaxazK28X3ad3Z+RLI/lg2wfoA9xdPp/P7RAkwpTIpU5Oa30a\nM345gy03b6FP+z5c/+r1nPn4mcz8dCb5RfluhycSF1RakZDyWz9vb36bacunkb09m+vOuI5xvcbR\npXkXt0MT8QTVyCWqbPlhCzM+mcGsVbPo1a4X43uN56IuF+k6piJVUCKXqHSo6BDPf/4805ZP44ef\nfmBcz3Fcf+b1muslTNSP3Nt0slOiUkpyClkZWawYu4JnLn+G1XtWc+IjJ/LrV3/Np7s/dTs8Ec9T\ni1xc8e3Bb5n56UxmfDKDtMZpTOg9geGnDKdeYj23QxNxlUor4jmH/Yd57avXmL5iOmu/XcvYs8Zy\nU8+bSGuc5nZoIq5QaUU8JykhiWHdh/H2tW+z5Lol7P9pP6c/djrD/zOcJVuWqE96ENSPPP6oRS5R\nJ68gj7lr5jJt+TSMMYzvNZ7Rp4+mUf1GbofmCTrZ6W0qrUhMsdbi2+pj2oppLNmyhGtOu4bxvcfT\nrWU3t0MTCRslcolZ23/czuM5jzPz05mc2upUJvSewC+7/pKkhCS3QxMJKSVyiXkFhwt4cd2LTFsx\njZ25OxnXcxw3nHUDx6ce73ZoUUOlFW/TyU6JefWT6nPN6dew7NfLeGXEK2z4fgMnPXoS175yLR/v\n+FgnRyUuqUUunrcvfx+zVs7isU8eo0XDFozvNZ4RPUaQkpzidmgitabSisS1Yn8xizYuYvqK6eTs\nymFMxhjG9RoXsxeRttZS5C8ivyif/KJ8DhYeJL8on8LiQhITEklOSCYpIanKW3Kis06iScSYWuUO\nCZOIJnJjzEXAVCARmGmtnXLU40rk4poN+zbw2CeP8e/V/6Z/h/5M6D0hoheRrizJli4XHbV81OP5\nh2v2HGMMqcmpNExuWHor2FRAw5Macth/uMpbUXFR6e/FtphEk1htwq/2g6EmHx41WKeq10xOSKZe\nYr3SW/2k+uWWj77VT6xPUkKSZz6oIpbIjTGJwFfABcBOYAUw0lr7RZl1lMjFdSUXkZ62YhqHigIX\nkc64jobJDYNLsBWtU8lzEkxCuQSbWq98wm2Y3PCYJHzMcr2qH6/oMntTp07llltuqdX7ZK2l2BZX\nm/Ar/VDwV79OTbdV3fYKiwsp8hdRWFxIweECCosLK7wVFB957LD/cKVJvsoPgZIPiYQqHqviA6Ta\n7R51SzSJJCQk1DqRB9t3qzew0Vq7FcAY8xwwBPiiqieJRFrJRaRvOOsGPtz+IdOWT+O2t24DqFXC\nTE1OpVVqqzon2UjYv39/rZ9jjCHJJMVsd06/9VNUXFRpoj/mQ6CKD4iyzy0pZdV0u9Vt22/9Qe1f\nsH+19sD2Mss7gLOD3JYnxXoXr1jbP2MM53Q8h3M6nsO7S97lZ+f/zO2Qwmbr1q1uhxBWwfxvJpgE\n6ifVp35S/fAEFSLF/mKS7ql9Wg62YBj3NZNYn88ilvdv6XtL3Q4hrFatWuV2CGEVy/+bwV50Jdga\neR/gHmvtRYHliYC/7AlPY0zcJ3sRkWBE6mRnEs7Jzp8Du4DlHHWyU0REIiOoGrm19rAxZgLwBk73\nw6eUxEVE3BG2AUEiIhIZIRkdYYxJM8a8aoxZb4zZaIyZaoxJNsa0MMYsMcbkGWMeDcVruaGK/Rtk\njPnEGLMm8PN8t2OtrSr2rbcxZmXgtsYYM8LtWINR2f6VebyjMeaAMeaPbsYZLB17OvYgBIncOMOl\nXgZettZ2BboCxwF/BQ4BdwN/quvruKWa/dsL/NJaezpwHTDXtUCDUM2+fQZkWmvPBAYD0wMDwTyj\nmv0r8SDwPxfCqzMdezr2Sllr63TDOeH53lH3NQK+AxoElrOAR+v6Wm7carJ/gfsMsA9IdjvmMOxb\nZ2CT2/GGeP9SgKHAP4BJwB/djjccfz8de9F5C/WxF4rSSg8gp+wd1to8YBtwYsldIXgdt1S1f13K\n3H0FkGOtLYpgbHVV5b4FvuJ9DnwO/MGF+Oqquv/N24F7Ih9WyOjYc8T9sReK8bhV/aO4M0Y5tKra\nvyQAY0wPYDIwKCIRhU6V+2atXQ70MMZ0AxYbY3zW2h8jFFsoVLZ/BngYeMham2+8MpvSsXTs6dgD\nQnOycx2QWfYOY0xjoAOwIQTbd1uV+2eMScOpdY221m5xIb66qNHfzlr7JbCJ8q0gL6hs/9KApsA/\njDFbgJuBO40xv418iHWiY0/HHhCCRG6tfQdoaIwZHQgmEfgn8Iy19mBJjHV9HbdUtX84rZ7/AX+2\n1i5zL8rgVLNvxwcGfmGM6QSchMeSQzX/m5nW2s7W2s440zH/1Vr7LxfDrTUdezr2ym4wFIX7NOBV\nYD3wA/A8gRMPwFacExEl9Z9ubp9oCNH+1cPpFXAAWFnm1tLteEO0b6OAtYF9Wg5c5HasIdy/5KPW\nmQT8we0l0g1IAAACz0lEQVRYQ71/Ovai+xbKYy/kA4KMMX2BJ4Ff2Rgc7RnL+xfL+wbaP6+L5f2r\n675pZKeIiMdF5rpXIiISNkrkIiIeV+NEbozpEJi74XNjzFpjzO8D9zc3xrwVmC/gTWNM0zLPmWiM\n2WCM+dIYM7jM/WOMMZ8ZY1YbYxYZY1qEdrdEYkeIj70RgeNurTFmshv7I6FX4xq5MaYN0MZau8oY\ncxzOqKShwBjgO2vtP4wxfwaaWWvvMMacgtOVphfOpeHexulGkwzsBk6y1n5vjJkC5Ftr7w31zonE\nghAee82BT4GzrLX7jDFzgKette9Gfq8klGrcIrfWfmOtXRX4/QDOhZbbA5cB/w6s9m+cfzBwLsb8\nrLW2yDoXad6Ic9HmwzhdbY4LjKhrDOys+66IxKYQHXtnAycAG6y1+wLrvYMzvF08LqgauTEmHTgT\n+Bhoba3dE3hoD9A68Hs7nIsyl9gBpFlr/Tgj6dbiJPDuwKxg4hCJN3U49trhDCo52RjTKTDgZCjO\nSELxuFon8sBXu5eAm60zyUsp69RpqqrV2MAw1EeAM6y17XCmbJxY2zhE4k0djz2stfuBcTgDT5YC\nW4Di8EQrkVSrRG6cCflfAuZaaxcE7t4TqOFhjGkLfBu4fyflP+3TONIC32KPzI3wAtAvuPBF4kOI\njj2stf+11vax1vbDGVH4VSTil/CqTa8VAzwFrLPWTi3z0EKcid0J/FxQ5v6rjDH1jDGdcU62LAc2\nA92MMS0D6w3CmUBGRCoQwmMPY0yrwM9mOK3zmeHfAwm32vRaOQfn69gajnyFm4jzD/IfoCPO3A5X\nBr7CYYy5E7ge5wTnzdbaNwL3XwvcBvgDz8my1v4Qkj0SiTEhPvaeAc4IbONea+1/IrQbEkYaoi8i\n4nEa2Ski4nFK5CIiHqdELiLicUrkIiIep0QuIuJxSuQiIh6nRC4i4nFK5CIiHvf/Me+dJOVK4a0A\nAAAASUVORK5CYII=\n",
       "text": [
        "<matplotlib.figure.Figure at 0x1133be250>"
       ]
      }
     ],
     "prompt_number": 514
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Suppose we want to plot these on separate axis , we use the following way "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ax1=md.ix['2008':,'infl'].plot(style='k')\n",
      "ax2=md.ix['2008':,'cpi'].plot(secondary_y=True,style='g')\n",
      "ax1.set_ylabel('inflation')\n",
      "ax2.set_ylabel('cpi')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 519,
       "text": [
        "<matplotlib.text.Text at 0x113ea5510>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nrkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x113cbaf50>"
       ]
      }
     ],
     "prompt_number": 519
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Inflation scale is the left scale and the black line and the right scale represents the CPI and the green line represents it "
     ]
    },
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Time Zone Handling "
     ]
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "There is no time zone till now that was asoociated with out working "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "pd.Timestamp('now')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 520,
       "text": [
        "Timestamp('2014-11-20 17:02:12')"
       ]
      }
     ],
     "prompt_number": 520
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is the present timestamp "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stamp_naive=pd.Timestamp('2012-07-17 11:00')#no time zone here \n",
      "stamp_naive"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 525,
       "text": [
        "Timestamp('2012-07-17 11:00:00')"
       ]
      }
     ],
     "prompt_number": 525
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stamp=pd.Timestamp('2012-07-17 11:00',tz='US/Central')\n",
      "stamp"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 526,
       "text": [
        "Timestamp('2012-07-17 11:00:00-0500', tz='US/Central')"
       ]
      }
     ],
     "prompt_number": 526
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stamp.tz"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 527,
       "text": [
        "<DstTzInfo 'US/Central' CDT-1 day, 19:00:00 DST>"
       ]
      }
     ],
     "prompt_number": 527
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So now the time stamp has time zone info as well"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Converting into a time zone a naive time zone"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stamp_naive"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 528,
       "text": [
        "Timestamp('2012-07-17 11:00:00')"
       ]
      }
     ],
     "prompt_number": 528
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stamp2=stamp_naive.tz_localize('US/Central')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 529
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stamp2"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 530,
       "text": [
        "Timestamp('2012-07-17 11:00:00-0500', tz='US/Central')"
       ]
      }
     ],
     "prompt_number": 530
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now I am In India lets do it form our point of view "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stamp=pd.Timestamp('now')\n",
      "stamp"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 535,
       "text": [
        "Timestamp('2014-11-20 17:08:34')"
       ]
      }
     ],
     "prompt_number": 535
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We in general get the time stamp with respect to the GMT ...not the computer time "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now as India is GMT+5:30 , we will just add that much time to create a timestamp of the present time in india and then we will initialize the timezone of india"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from datetime import datetime\n",
      "stamp=pd.Timestamp('now')\n",
      "stamp_ind=datetime(stamp.year,stamp.month,stamp.day,stamp.hour+5\n",
      "                    ,stamp.minute+30,stamp.second)\n",
      "stamp_ind"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 546,
       "text": [
        "datetime.datetime(2014, 11, 20, 22, 45, 50)"
       ]
      }
     ],
     "prompt_number": 546
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stamp_ind=pd.Timestamp(stamp_ind)\n",
      "stamp_ind"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 548,
       "text": [
        "Timestamp('2014-11-20 22:45:50')"
       ]
      }
     ],
     "prompt_number": 548
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is the correct present Indian time . We will now convert it to the the time in US by first initializing it as the indian time and then convertion "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stamp_ind=stamp_ind.tz_localize('Asia/Kolkata')\n",
      "stamp_ind"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 555,
       "text": [
        "Timestamp('2014-11-20 22:45:50+0530', tz='Asia/Kolkata')"
       ]
      }
     ],
     "prompt_number": 555
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So now we can convert this to US time using the tz_convert function "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stamp_us=stamp_ind.tz_convert('US/Central')\n",
      "stamp_us"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 558,
       "text": [
        "Timestamp('2014-11-20 11:15:50-0600', tz='US/Central')"
       ]
      }
     ],
     "prompt_number": 558
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So there is 11:15 am in US at this time "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stamp_ind.value"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 559,
       "text": [
        "1416503750000000000"
       ]
      }
     ],
     "prompt_number": 559
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stamp_us.value"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 560,
       "text": [
        "1416503750000000000"
       ]
      }
     ],
     "prompt_number": 560
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So they have the same value . So 2 time zones of same time stamp could be compared by comparing their values "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rng=pd.date_range('2014-10-01',periods=5,tz='Asia/Kolkata')\n",
      "s_tz=Series(range(5),index=rng)\n",
      "s_tz"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 563,
       "text": [
        "2014-10-01 00:00:00+05:30    0\n",
        "2014-10-02 00:00:00+05:30    1\n",
        "2014-10-03 00:00:00+05:30    2\n",
        "2014-10-04 00:00:00+05:30    3\n",
        "2014-10-05 00:00:00+05:30    4\n",
        "Freq: D, dtype: int64"
       ]
      }
     ],
     "prompt_number": 563
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "UTC"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "UTC is from where all the other time zones are referenced as "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Suppose we want the time now in UTC so we use the following code for that:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "N=pd.Timestamp('now')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 584
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "N"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 585,
       "text": [
        "Timestamp('2014-11-21 16:39:49')"
       ]
      }
     ],
     "prompt_number": 585
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "N=N.tz_localize('utc')\n",
      "N"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 586,
       "text": [
        "Timestamp('2014-11-21 16:39:49+0000', tz='UTC')"
       ]
      }
     ],
     "prompt_number": 586
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So the present UTC time is 4:39 pm"
     ]
    }
   ],
   "metadata": {}
  }
 ]
}