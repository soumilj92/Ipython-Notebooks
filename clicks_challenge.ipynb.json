{
 "metadata": {
  "name": "",
  "signature": "sha256:3af44cd7b9923aed72427b555d97daf8a00fc06cd2ab560fc494acf128fa59e4"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import pandas as pd\n",
      "from pandas import Series,DataFrame\n",
      "import numpy as np\n",
      "import matplotlib.pyplot as plt\n",
      "import os\n",
      "import timeit\n",
      "from datetime import datetime\n",
      "import random\n",
      "from sklearn import ensemble\n",
      "from scipy.stats.stats import pearsonr\n",
      "import statsmodels.api as sm\n",
      "from sklearn.linear_model import LogisticRegression"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%pylab inline\n",
      "os.chdir('desktop/clicks')\n",
      "\n",
      "train=pd.read_csv('train.csv')\n",
      "test=pd.read_csv('test.csv')\n",
      "ss=pd.read_csv('sampleSubmission.csv')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "WARNING: pylab import has clobbered these variables: ['random', 'datetime']\n",
        "`%matplotlib` prevents importing * from pylab and numpy\n",
        "/Users/soumiljain/anaconda/lib/python2.7/site-packages/pandas/io/parsers.py:1139: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.\n",
        "  data = self._reader.read(nrows)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Populating the interactive namespace from numpy and matplotlib\n"
       ]
      }
     ],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import random\n",
      "rnd=random.sample(range(len(train)),1000000)\n",
      "rnd1=rnd[:500000]\n",
      "rnd2=rnd[500000:]\n",
      "t1=train.ix[rnd1]\n",
      "t2=train.ix[rnd2]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1['h']=0\n",
      "t1['d']=0\n",
      "t2['h']=0\n",
      "t2['d']=0\n",
      "test['h']=0\n",
      "test['d']=0\n",
      "t1.index=range(500000)\n",
      "t2.index=range(500000)\n",
      "\n",
      "for i in range(len(t1)):\n",
      "    t1['h'][i]=int(str(t1['hour'][i])[6:8])\n",
      "    t1['d'][i]=int(str(t1['hour'][i])[4:6])\n",
      "    t2['h'][i]=int(str(t2['hour'][i])[6:8])\n",
      "    t2['d'][i]=int(str(t2['hour'][i])[4:6])\n",
      "    \n",
      "for i in range(len(test)):\n",
      "    test['h'][i]=int(str(test['hour'][i])[6:8])\n",
      "    test['d'][i]=int(str(test['hour'][i])[4:6])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1['weekday']=0\n",
      "t2['weekday']=0\n",
      "test['weekday']=0\n",
      "for i in range(len(t1)):\n",
      "    t1['weekday'][i]=pd.Timestamp(datetime(2014,10,t1['d'][i],t1['h'][i])).dayofweek\n",
      "    t2['weekday'][i]=pd.Timestamp(datetime(2014,10,t2['d'][i],t2['h'][i])).dayofweek\n",
      "for i in range(len(test)):\n",
      "    test['weekday'][i]=pd.Timestamp(datetime(2014,10,test['d'][i],test['h'][i])).dayofweek"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def validate(f) : \n",
      "    model = LogisticRegression()\n",
      "    model = model.fit(t1[f],t1['click'])\n",
      "    print 'model_score in time validation >>>>>',model.score(t1[f],t1['click'])\n",
      "    print 'model_score out of time validation >>>>>',model.score(t2[f],t2['click'])\n",
      "    probs = model.predict_proba(test[f])\n",
      "    predictY= DataFrame(probs)\n",
      "    ss['click']=predictY[1]\n",
      "    ss.to_csv('new_way.csv',index=False)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 309
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.text?"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 88
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def sorted_plot(f,set1,k):\n",
      "    temp_avg=np.array([])\n",
      "    for i in range(len(set1[f].unique())):\n",
      "        temp_avg=np.append(temp_avg,np.mean(set1['click'][set1[f]==(set1[f].unique())[i]]))\n",
      "    if(k==2):\n",
      "        f1=figure()\n",
      "        plt.plot(range(len(set1[f].unique())), temp_avg, 'bo',range(len(set1[f].unique())), temp_avg, 'k')\n",
      "        plt.grid()\n",
      "        plt.show()\n",
      "    \n",
      "    fig=plt.figure()\n",
      "    ax = fig.add_subplot(111)\n",
      "    df_temp=DataFrame({f:set1[f].unique(),'Avg_click':temp_avg})\n",
      "    df_temp=df_temp.sort(columns='Avg_click')\n",
      "    plt.plot(range(len(set1[f].unique())), df_temp['Avg_click'], 'bo',range(len(set1[f].unique())), df_temp['Avg_click'], 'k')\n",
      "    for x,y in zip(range(len(set1[f].unique())), df_temp['Avg_click']):                                                # <--\n",
      "        #ax.annotate('(%s, %s)' % xy, xy=xy, textcoords='offset points')\n",
      "        plt.text(x-0.004,y+0.007,df_temp[f][x],fontsize=12)\n",
      "    plt.grid()\n",
      "    plt.show()\n",
      "    print 'total count =',len(df_temp)\n",
      "    print 'maximum_value =',df_temp['Avg_click'].max(),'at',df_temp[f][df_temp['Avg_click']==df_temp['Avg_click'].max()]\n",
      "    print 'minimum_value =',df_temp['Avg_click'].min(),'at',df_temp[f][df_temp['Avg_click']==df_temp['Avg_click'].min()]\n",
      "    print 'number of zeroes =',len(df_temp[df_temp['Avg_click']==0])\n",
      "    print 'number of ones =',len(df_temp[df_temp['Avg_click']==1])\n",
      "    print 'Distribution:(including the starting value)'\n",
      "    for i in np.arange(0,1.1,0.1):\n",
      "        print i,'<->',(i+0.1),' = ',len(df_temp[(df_temp['Avg_click']>=i) & (df_temp['Avg_click']<(i+0.1))])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 103
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def validation_check(feature_cols,list1):\n",
      "    validate(feature_cols)\n",
      "    print 'After Adding : '\n",
      "    new=feature_cols+list1\n",
      "    validate(new)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1.columns"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 11,
       "text": [
        "Index([u'id', u'click', u'hour', u'C1', u'banner_pos', u'site_id', u'site_domain', u'site_category', u'app_id', u'app_domain', u'app_category', u'device_id', u'device_ip', u'device_model', u'device_type', u'device_conn_type', u'C14', u'C15', u'C16', u'C17', u'C18', u'C19', u'C20', u'C21', u'h', u'd', u'weekday'], dtype='object')"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "site=train['site_category'].value_counts()\n",
      "site=site[site>30]\n",
      "site=site.index"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "avg_site=np.array([])\n",
      "for i in site:\n",
      "    avg_site=np.append(avg_site,np.mean(train['click'][train['site_category']==i]))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "site_df=DataFrame({'site':site,'avg_click':avg_site})\n",
      "site_df=site_df.sort(columns='avg_click')\n",
      "plt.plot(range(len(site_df)), site_df['avg_click'], 'bo',range(len(site_df)), site_df['avg_click'], 'k')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "[<matplotlib.lines.Line2D at 0x10ce1e250>,\n",
        " <matplotlib.lines.Line2D at 0x10d601810>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nAAAASUVORK5CYII=\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10d114350>"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "site_df.tail(2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>avg_click</th>\n",
        "      <th>site</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>3 </th>\n",
        "      <td> 0.283003</td>\n",
        "      <td> 3e814130</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10</th>\n",
        "      <td> 0.514000</td>\n",
        "      <td> dedf689d</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "    avg_click      site\n",
        "3    0.283003  3e814130\n",
        "10   0.514000  dedf689d"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1['special_site']=0\n",
      "t2['special_site']=0\n",
      "test['special_site']=0\n",
      "t1['special_site'][t1['site_category']=='dedf689d']=1\n",
      "t2['special_site'][t2['site_category']=='dedf689d']=1\n",
      "test['special_site'][test['site_category']=='dedf689d']=1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print sum(t1['special_site']),sum(t2['special_site']),sum(test['special_site'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "313 298 1347\n"
       ]
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "feature_cols=['special_site']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 23
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validate(feature_cols)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "model_score in time validation >>>>> 0.830664\n",
        "model_score out of time validation >>>>> "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0.829948\n"
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sorted_plot('C1',train,1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x111c6a2d0>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "total count = 7\n",
        "maximum_value = 0.210731480197 at 1    1002\n",
        "Name: C1, dtype: int64\n",
        "minimum_value = 0.0333932156821 at 3    1001\n",
        "Name: C1, dtype: int64\n",
        "number of zeroes = 0\n",
        "number of ones = 0\n",
        "Distribution:(including the starting value)\n",
        "0.0 <-> 0.1  =  3\n",
        "0.1 <-> 0.2  =  3\n",
        "0.2 <-> 0.3  =  1\n",
        "0.3 <-> 0.4  =  0\n",
        "0.4 <-> 0.5  =  0\n",
        "0.5 <-> 0.6  =  0\n",
        "0.6 <-> 0.7  =  0\n",
        "0.7 <-> 0.8  =  0\n",
        "0.8 <-> 0.9  =  0\n",
        "0.9 <-> 1.0  =  0\n",
        "1.0 <-> 1.1  =  0\n"
       ]
      }
     ],
     "prompt_number": 25
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "c1=train['C1'].unique()\n",
      "avg_c1=np.array([])\n",
      "for i in c1:\n",
      "    avg_c1=np.append(avg_c1,np.mean(train['click'][train['C1']==i]))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 32
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df_c1=DataFrame({'c1':c1,'avg_click':avg_c1})"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 33
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(df_c1['avg_click'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 34,
       "text": [
        "[<matplotlib.lines.Line2D at 0x10ffdc1d0>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nAAAASUVORK5CYII=\n",
       "text": [
        "<matplotlib.figure.Figure at 0x111cb46d0>"
       ]
      }
     ],
     "prompt_number": 34
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df_c1=df_c1.sort(columns='avg_click')\n",
      "plt.plot(range(len(df_c1)), df_c1['avg_click'], 'bo',range(len(df_c1)), df_c1['avg_click'], 'k')        "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 35,
       "text": [
        "[<matplotlib.lines.Line2D at 0x113eb7410>,\n",
        " <matplotlib.lines.Line2D at 0x10cf83c10>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x11316e990>"
       ]
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df_c1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>avg_click</th>\n",
        "      <th>c1</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td> 0.033393</td>\n",
        "      <td> 1001</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td> 0.039429</td>\n",
        "      <td> 1007</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td> 0.095215</td>\n",
        "      <td> 1010</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5</th>\n",
        "      <td> 0.121652</td>\n",
        "      <td> 1008</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> 0.169331</td>\n",
        "      <td> 1005</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6</th>\n",
        "      <td> 0.172493</td>\n",
        "      <td> 1012</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> 0.210731</td>\n",
        "      <td> 1002</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 36,
       "text": [
        "   avg_click    c1\n",
        "3   0.033393  1001\n",
        "4   0.039429  1007\n",
        "2   0.095215  1010\n",
        "5   0.121652  1008\n",
        "0   0.169331  1005\n",
        "6   0.172493  1012\n",
        "1   0.210731  1002"
       ]
      }
     ],
     "prompt_number": 36
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1['C1'][0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 37,
       "text": [
        "1005"
       ]
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "l1=[1001,1007]\n",
      "l2=[1010,1008]\n",
      "l3=[1005,1012]\n",
      "t1['c1_1']=0\n",
      "t2['c1_1']=0\n",
      "test['c1_1']=0\n",
      "t1['c1_2']=0\n",
      "t2['c1_2']=0\n",
      "test['c1_2']=0\n",
      "t1['c1_3']=0\n",
      "t2['c1_3']=0\n",
      "test['c1_3']=0\n",
      "for k in l1:\n",
      "    t1['c1_1'][t1['C1']==k]=1\n",
      "    t2['c1_1'][t2['C1']==k]=1\n",
      "    test['c1_1'][test['C1']==k]=1\n",
      "for k in l2:\n",
      "    t1['c1_2'][t1['C1']==k]=1\n",
      "    t2['c1_2'][t2['C1']==k]=1\n",
      "    test['c1_2'][test['C1']==k]=1\n",
      "for k in l3: \n",
      "    t1['c1_3'][t1['C1']==k]=1\n",
      "    t2['c1_3'][t2['C1']==k]=1\n",
      "    test['c1_3'][test['C1']==k]=1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 40
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "l=['c1_1','c1_2','c1_3']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 41
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validation_check(feature_cols,l)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "model_score in time validation >>>>> 0.830664\n",
        "model_score out of time validation >>>>> "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0.829948\n",
        "After Adding : "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "model_score in time validation >>>>>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 0.830664\n",
        "model_score out of time validation >>>>> 0.829948\n"
       ]
      }
     ],
     "prompt_number": 42
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print sum(test['c1_1']),sum(test['c1_2']),sum(test['c1_3'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "11690 67261 "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "4331088\n"
       ]
      }
     ],
     "prompt_number": 49
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "feature_cols"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 45,
       "text": [
        "['special_site']"
       ]
      }
     ],
     "prompt_number": 45
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#Now lets try to check the C1 variable with 6 dummy variables "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 50
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "c1=t1['C1'].unique()\n",
      "for i in range(1,7,1):\n",
      "    pair='c1',format(i)\n",
      "    str1=''.join(pair)\n",
      "    t1[str1]=0\n",
      "    t2[str1]=0\n",
      "    test[str1]=0\n",
      "    t1[str1][t1['C1']==c1[i-1]]=1\n",
      "    t2[str1][t2['C1']==c1[i-1]]=1\n",
      "    test[str1][test['C1']==c1[i-1]]=1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 52
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print sum(test['c11']),sum(test['c12']),sum(test['c13']),sum(test['c14']),sum(test['c15']),sum(test['c16'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "4316693 167425 "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "14395 67260 "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "9700 1\n"
       ]
      }
     ],
     "prompt_number": 54
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test['C1'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 55,
       "text": [
        "1005    4316693\n",
        "1002     167425\n",
        "1010      67260\n",
        "1012      14395\n",
        "1007       9700\n",
        "1001       1990\n",
        "1008          1\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 55
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train['C1'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 56,
       "text": [
        "1005    37140632\n",
        "1002     2220812\n",
        "1010      903457\n",
        "1012      113512\n",
        "1007       35304\n",
        "1001        9463\n",
        "1008        5787\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 56
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#1008 wont make a difference in case of the test data "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 57
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "c1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 58,
       "text": [
        "array([1005, 1002, 1012, 1010, 1007, 1008, 1001])"
       ]
      }
     ],
     "prompt_number": 58
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "c1=train['C1'].value_counts()\n",
      "c1=c1.index\n",
      "c1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 61,
       "text": [
        "Int64Index([1005, 1002, 1010, 1012, 1007, 1001, 1008], dtype='int64')"
       ]
      }
     ],
     "prompt_number": 61
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "for i in range(1,7,1):\n",
      "    pair='c1',format(i)\n",
      "    str1=''.join(pair)\n",
      "    t1[str1]=0\n",
      "    t2[str1]=0\n",
      "    test[str1]=0\n",
      "    t1[str1][t1['C1']==c1[i-1]]=1\n",
      "    t2[str1][t2['C1']==c1[i-1]]=1\n",
      "    test[str1][test['C1']==c1[i-1]]=1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 62
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print sum(test['c11']),sum(test['c12']),sum(test['c13']),sum(test['c14']),sum(test['c15']),sum(test['c16'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "4316693 167425 "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "67260 14395 "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "9700 1990\n"
       ]
      }
     ],
     "prompt_number": 63
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "l_c1=['c11','c12','c13','c14','c15','c16']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 64
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validation_check(feature_cols,l_c1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "model_score in time validation >>>>> 0.830664\n",
        "model_score out of time validation >>>>> "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0.829948\n",
        "After Adding : "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "model_score in time validation >>>>>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 0.830664\n",
        "model_score out of time validation >>>>> "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0.829948\n"
       ]
      }
     ],
     "prompt_number": 65
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "feature_cols"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 66,
       "text": [
        "['special_site']"
       ]
      }
     ],
     "prompt_number": 66
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validate(l_c1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "model_score in time validation >>>>> 0.830622\n",
        "model_score out of time validation >>>>> "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0.82994\n"
       ]
      }
     ],
     "prompt_number": 68
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "LEFT C1"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1.columns"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 69,
       "text": [
        "Index([u'id', u'click', u'hour', u'C1', u'banner_pos', u'site_id', u'site_domain', u'site_category', u'app_id', u'app_domain', u'app_category', u'device_id', u'device_ip', u'device_model', u'device_type', u'device_conn_type', u'C14', u'C15', u'C16', u'C17', u'C18', u'C19', u'C20', u'C21', u'h', u'd', u'weekday', u'special_site', u'c1_1', u'c1_2', u'c1_3', u'c11', u'c12', u'c13', u'c14', u'c15', u'c16'], dtype='object')"
       ]
      }
     ],
     "prompt_number": 69
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train['banner_pos'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 71,
       "text": [
        "0    29109590\n",
        "1    11247282\n",
        "7       43577\n",
        "2       13001\n",
        "4        7704\n",
        "5        5778\n",
        "3        2035\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 71
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test['banner_pos'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 72,
       "text": [
        "0    3653650\n",
        "1     913194\n",
        "7       5582\n",
        "3       3249\n",
        "2       1582\n",
        "4        207\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 72
    },
    {
     "cell_type": "heading",
     "level": 5,
     "metadata": {},
     "source": [
      "There is no banner position called 5 in the test data "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sorted_plot('banner_pos',train,1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nJ08+7D2jo9G1cUREktAbb7xBs2bN6N69e1yeX80+zpJxbhgN5UteYc4GyZXP3WN2wbOjUbMXEQnY\n/Pnz2b59OwMGDIjba2hmLyISsD59+nDppZdy0003VXkffQetiEgSWb58Ob1792bdunWkpaVVeT+9\nQZtgkmluWB3Kl7zCnA2SJ98jjzzCsGHDomr01aFmLyISkA0bNjB79mxuueWWuL+WxjgiIgEZPnw4\nDRs2rNaXiWtmLyKSBLZt20b79u359NNPadmyZdT7a2afYJJlblhdype8wpwNEj/fE088waWXXlqt\nRl8dNf9iQxERicp3333HE088wbx582rtNTXGERGpZRMnTuS9995j5syZ1X4OzexFRBLYwYMHad++\nPTNmzKBr167Vfh7N7BNMos8Na0r5kleYs0Hi5nvllVdo1apVjRp9dajZi4jUktILnt199921/toa\n44iI1JI5c+bw29/+luXLl9f46pYa44iIJKh4X8a4Imr2cZaoc8NYUb7kFeZskHj5Fi1axNq1a7ny\nyisDeX01exGRWpCVlcUdd9xB/fr1A3l9zexFROJszZo1nH/++RQUFHDMMcfE5Dk1sxcRSTCPPvoo\ngwcPjlmjrw41+zhLtLlhrClf8gpzNkicfFu3buUvf/kLt956a6B1qNmLiMTR448/ztVXX02LFi0C\nrUMzexGRONm5cydt2rRh4cKFtGnTJqbPrZm9iEiCeOqpp7jkkkti3uirQ80+zhJlbhgvype8wpwN\ngs934MABxo0bx4gRIwKto5SavYhIHLz44oucccYZnH322UGXAmhmLyISc8XFxZx55plMnDiRn//8\n53F5Dc3sRUQCNmvWLJo0acJFF10UdCmHqNnHWdBzw3hTvuQV5mwQbL6srKzALnh2NGr2IiIx9OGH\nH/Lll19y2WWXBV3KYTSzFxGJoX79+tG3b19uueWWuL6OvoNWRCQgn376KRdffDEFBQU0atQorq+l\nN2gTjOaiyS3M+cKcDYLJ9+ijjzJ06NC4N/rqSA26ABGRMNi4cSNvvvkm+fn5QZdSrkrHOGbWGxgH\npABT3X3MEet/DYwADNgFDHb35ZF164GdQBFQ6O7nlfP8GuOISNK74447MDMee+yxWnm9mM7szSwF\n+By4GNgMLAKucvfVZbb5GbDK3XdEfjH83t27RtYVAOe4+zcVvIaavYgktW+++YZ27dqxfPlyTj31\n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\n7EWAtWvXkpOTQ3Z2NvPmzQeWU/KNms0pbYzNmxvXXXd1zBtw2fv16tU77As3Yq1Xr/uZO/fB7z3+\nk5+MZMyY0XF73doybFhP8vPvi/yrrETbtvcydGjdu379kdTs4yysM+1SyZqvsLCQjz76iOzsbLKz\ns9mxYwd9+/ZlyJAhFBefzfvvZ0W2zAMyAGjVagUDBgwIqOLYOLwZ5gEZoWqGpWO2CRNGsnXrRk46\nqRVDh/au8/N6ULOXGFqzZg0//elPufzyy3nhhReCLud7vv76a95++22ys7OZM2cObdu2JTMzk+nT\np9O5c+dDY4f69Y9nw4ZwHh1+vxm+F7pm2LfvhfTte2HSHojEi86zl5jp2bMn+/btIz09neeffz7o\ncnB3Vq5ceejofcWKFfTo0YPMzEz69OlDy5Ytj7pvTs58Jkx4h337UkhLK2Lo0EtC1RAl+UV7nr2a\nvcTESy+9xMyZMznjjDNYu3ZtYEf2+/btIzc391CDr1evHpmZmWRmZtK9e3fS0tICqUsk1nQ9+wQT\n9uu95+XlsXPnTkaNGsUf//jHQL7VacuWLUyZMoX+/fvTokUL/vd//5fTTjuN2bNns27dOiZMmECv\nXr2q1ejD/PMLczYIf75oaWYvNTZy5EhuvPFGWrZsGdczSUoVFxezePHiQ2fPFBQU0Lt3b6644gqe\nfvppTjjhhLjXIJJs1OzjLOxvEDVr1oz33nuPJUuWAMTtyH7Xrl288847ZGdnM3v2bI4//ngyMzP5\n4x//yPnnn09qanz+Kof55xfmbBD+fNFSs5camTdvHuvXr+e0004DYPfu3RQVFbF69WoWL15co+fO\nz88/dPS+YMECfvazn5GZmcl9991H27ZtY1G+SJ2hZh9nYT/968c//vGh72R1dx599FHWr1/Pk08+\nGfVzHTx4kI8++uhQg//mm2/o27cvgwcP5tVXX6Vp06axLr9SYf75hTkbhD9ftNTspUYaNmxIixYt\nDi0fc8wxNGrUqMpz823bth127nvr1q3JzMzkueee45xzzgnkI/ciYaRTL6VWuTurVq06dGrksmXL\nuOiii+jbty99+vThlFNOCbpEkaSg8+wl4ezbt4+8vDyys7PJycmhuLiYfv36kZmZSUZGhs59F6kG\nnWefYMJ6rm9Oznx69bqfTp0G0avX/eTkzD9s/ZYtW5g6dSoDBgygRYsWPPjgg5x66qnMmjWL9evX\n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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x11d80f650>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "total count = 7\n",
        "maximum_value = 0.32010005278 at 5    7\n",
        "Name: banner_pos, dtype: int64\n",
        "minimum_value = 0.119221598339 at 4    2\n",
        "Name: banner_pos, dtype: int64\n",
        "number of zeroes = 0\n",
        "number of ones = 0\n",
        "Distribution:(including the starting value)\n",
        "0.0 <-> 0.1  =  0\n",
        "0.1 <-> 0.2  =  6\n",
        "0.2 <-> 0.3  =  0\n",
        "0.3 <-> 0.4  =  1\n",
        "0.4 <-> 0.5  =  0\n",
        "0.5 <-> 0.6  =  0\n",
        "0.6 <-> 0.7  =  0\n",
        "0.7 <-> 0.8  =  0\n",
        "0.8 <-> 0.9  =  0\n",
        "0.9 <-> 1.0  =  0\n",
        "1.0 <-> 1.1  =  0\n"
       ]
      }
     ],
     "prompt_number": 115
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1['banner_high']=0\n",
      "t2['banner_high']=0\n",
      "test['banner_high']=0\n",
      "t1['banner_high'][t1['banner_pos']==3]=1\n",
      "t2['banner_high'][t2['banner_pos']==3]=1\n",
      "test['banner_high'][test['banner_pos']==3]=1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 107
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "l_banner_high=['banner_high']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 108
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validate(l_banner_high)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "model_score in time validation >>>>> 0.830622\n",
        "model_score out of time validation >>>>> "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0.82994\n"
       ]
      }
     ],
     "prompt_number": 109
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validation_check(feature_cols,l_banner_high)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "model_score in time validation >>>>> 0.830664\n",
        "model_score out of time validation >>>>> 0.829948\n",
        "After Adding : "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "model_score in time validation >>>>>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 0.830664\n",
        "model_score out of time validation >>>>> 0.829948\n"
       ]
      }
     ],
     "prompt_number": 110
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#Making banner bins"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 111
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test['banner_pos'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 112,
       "text": [
        "0    3653650\n",
        "1     913194\n",
        "7       5582\n",
        "3       3249\n",
        "2       1582\n",
        "4        207\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 112
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train['banner_pos'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 114,
       "text": [
        "0    29109590\n",
        "1    11247282\n",
        "7       43577\n",
        "2       13001\n",
        "4        7704\n",
        "5        5778\n",
        "3        2035\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 114
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "l_banner_low=['banner_low']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 116
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1['banner_low']=0\n",
      "t2['banner_low']=0\n",
      "test['banner_low']=0\n",
      "t1['banner_low'][(t1['banner_pos']==1) | (t1['banner_pos']==0)]=1\n",
      "t2['banner_low'][(t2['banner_pos']==1) | (t2['banner_pos']==0)]=1\n",
      "test['banner_low'][(test['banner_pos']==1) | (test['banner_pos']==0)]=1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 118
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validation_check(feature_cols,(l_banner_low+l_banner_high))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "model_score in time validation >>>>> 0.830664\n",
        "model_score out of time validation >>>>> 0.829948\n",
        "After Adding : "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "model_score in time validation >>>>>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 0.830664\n",
        "model_score out of time validation >>>>> 0.829948\n"
       ]
      }
     ],
     "prompt_number": 123
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1.columns"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 124,
       "text": [
        "Index([u'id', u'click', u'hour', u'C1', u'banner_pos', u'site_id', u'site_domain', u'site_category', u'app_id', u'app_domain', u'app_category', u'device_id', u'device_ip', u'device_model', u'device_type', u'device_conn_type', u'C14', u'C15', u'C16', u'C17', u'C18', u'C19', u'C20', u'C21', u'h', u'd', u'weekday', u'special_site', u'c1_1', u'c1_2', u'c1_3', u'c11', u'c12', u'c13', u'c14', u'c15', u'c16', u'banner_high', u'banner_low'], dtype='object')"
       ]
      }
     ],
     "prompt_number": 124
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sorted_plot('h',t1,1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x121f3bcd0>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "total count = 24\n",
        "maximum_value = 0.183530510585 at 6    15\n",
        "Name: h, dtype: int64\n",
        "minimum_value = 0.155999427262 at 21    20\n",
        "Name: h, dtype: int64\n",
        "number of zeroes = 0\n",
        "number of ones = 0\n",
        "Distribution:(including the starting value)\n",
        "0.0 <-> 0.1  =  0\n",
        "0.1 <-> 0.2  =  24\n",
        "0.2 <-> 0.3  =  0\n",
        "0.3 <-> 0.4  =  0\n",
        "0.4 <-> 0.5  =  0\n",
        "0.5 <-> 0.6  =  0\n",
        "0.6 <-> 0.7  =  0\n",
        "0.7 <-> 0.8  =  0\n",
        "0.8 <-> 0.9  =  0\n",
        "0.9 <-> 1.0  =  0\n",
        "1.0 <-> 1.1  =  0\n"
       ]
      }
     ],
     "prompt_number": 125
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#all are between 1 and 2 not much difference , This could be put as a linear variable by changing the values "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 126
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "h_ascend=[19,6,9,1,14,12,15,13,11,17,10,7,4,0,8,2,21,3,5,16,18,20,23,22]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 127
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(h_ascend)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 128,
       "text": [
        "24"
       ]
      }
     ],
     "prompt_number": 128
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "h_df=DataFrame({'rank':range(1,25,1),'h':h_ascend})\n",
      "A_df=h_dict[h_dict['h']==14]\n",
      "A_df.iloc[0]['rank']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 154,
       "text": [
        "5"
       ]
      }
     ],
     "prompt_number": 154
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "h_df=DataFrame({'rank':range(1,25,1),'h':h_ascend})\n",
      "t1['h_rank']=0\n",
      "t2['h_rank']=0\n",
      "test['h_rank']=0\n",
      "for i in range(len(t1)):\n",
      "    A_df=h_df[h_df['h']==t1['h'][i]]\n",
      "    t1['h_rank'][i]=A_df.iloc[0]['rank']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 155
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "h_df=DataFrame({'rank':range(1,25,1),'h':h_ascend})\n",
      "for i in range(len(t2)):\n",
      "    A_df=h_df[h_df['h']==t2['h'][i]]\n",
      "    t2['h_rank'][i]=A_df.iloc[0]['rank']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 156
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "for i in range(len(test)):\n",
      "    A_df=h_df[h_df['h']==test['h'][i]]\n",
      "    test['h_rank'][i]=A_df.iloc[0]['rank']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 157
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validate(['h_rank']+feature_cols)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "model_score in time validation >>>>> 0.830664\n",
        "model_score out of time validation >>>>> "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0.829948\n"
       ]
      }
     ],
     "prompt_number": 162
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print feature_cols"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['special_site']\n"
       ]
      }
     ],
     "prompt_number": 160
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validation_check(feature_cols,['h_rank'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "model_score in time validation >>>>> 0.830664\n",
        "model_score out of time validation >>>>> 0.829948\n",
        "After Adding : "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "model_score in time validation >>>>>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 0.830664\n",
        "model_score out of time validation >>>>> 0.829948\n"
       ]
      }
     ],
     "prompt_number": 163
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t2['click'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 164,
       "text": [
        "0    414970\n",
        "1     85030\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 164
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def validate2(f):\n",
      "    model = LogisticRegression()\n",
      "    model = model.fit(t1[f],t1['click'])\n",
      "    probs = model.predict_proba(t2[f])\n",
      "    predictY= DataFrame(probs)\n",
      "    p=predictY[1]\n",
      "    s=0\n",
      "    for i in range(len(t2)):\n",
      "        s=s+abs((t2['click'][i])-p[i])\n",
      "    print s"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 176
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validate2(feature_cols)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "140840.055994\n"
       ]
      }
     ],
     "prompt_number": 177
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validate2(['banner_low'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "140906.26998\n"
       ]
      }
     ],
     "prompt_number": 182
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validate2(['banner_high'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "140915.604919\n"
       ]
      }
     ],
     "prompt_number": 183
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validate2(l_c1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "140671.32131\n"
       ]
      }
     ],
     "prompt_number": 184
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "c1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 185,
       "text": [
        "Int64Index([1005, 1002, 1010, 1012, 1007, 1001, 1008], dtype='int64')"
       ]
      }
     ],
     "prompt_number": 185
    },
    {
     "cell_type": "heading",
     "level": 5,
     "metadata": {},
     "source": [
      "l_c1 seems to be a better estimator than feature_cols"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print feature_cols"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['special_site']\n"
       ]
      }
     ],
     "prompt_number": 186
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validate2(l_c1+feature_cols)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "140590.073418\n"
       ]
      }
     ],
     "prompt_number": 187
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "feature_cols=['special_site']+l_c1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 190
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print feature_cols"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['special_site', 'c11', 'c12', 'c13', 'c14', 'c15', 'c16']\n"
       ]
      }
     ],
     "prompt_number": 191
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1.columns"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 192,
       "text": [
        "Index([u'id', u'click', u'hour', u'C1', u'banner_pos', u'site_id', u'site_domain', u'site_category', u'app_id', u'app_domain', u'app_category', u'device_id', u'device_ip', u'device_model', u'device_type', u'device_conn_type', u'C14', u'C15', u'C16', u'C17', u'C18', u'C19', u'C20', u'C21', u'h', u'd', u'weekday', u'special_site', u'c1_1', u'c1_2', u'c1_3', u'c11', u'c12', u'c13', u'c14', u'c15', u'c16', u'banner_high', u'banner_low', u'h_rank'], dtype='object')"
       ]
      }
     ],
     "prompt_number": 192
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def validation_check2(f,l):\n",
      "    validate2(f)\n",
      "    print '-----'\n",
      "    validate2(l)\n",
      "    print '-----'\n",
      "    validate2(l+f)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 201
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print feature_cols"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['special_site', 'c11', 'c12', 'c13', 'c14', 'c15', 'c16']\n"
       ]
      }
     ],
     "prompt_number": 194
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sorted_plot('device_conn_type',train,1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x1209e11d0>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "total count = 4\n",
        "maximum_value = 0.181125300034 at 1    0\n",
        "Name: device_conn_type, dtype: int64\n",
        "minimum_value = 0.0296106318489 at 3    5\n",
        "Name: device_conn_type, dtype: int64\n",
        "number of zeroes = 0\n",
        "number of ones = 0\n",
        "Distribution:(including the starting value)\n",
        "0.0 <-> 0.1  =  2\n",
        "0.1 <-> 0.2  =  2\n",
        "0.2 <-> 0.3  =  0\n",
        "0.3 <-> 0.4  =  0\n",
        "0.4 <-> 0.5  =  0\n",
        "0.5 <-> 0.6  =  0\n",
        "0.6 <-> 0.7  =  0\n",
        "0.7 <-> 0.8  =  0\n",
        "0.8 <-> 0.9  =  0\n",
        "0.9 <-> 1.0  =  0\n",
        "1.0 <-> 1.1  =  0\n"
       ]
      }
     ],
     "prompt_number": 195
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "conn=train['device_conn_type'].unique()\n",
      "conn"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 196,
       "text": [
        "array([2, 0, 3, 5])"
       ]
      }
     ],
     "prompt_number": 196
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test['device_conn_type'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 198,
       "text": [
        "0    3858479\n",
        "2     459847\n",
        "3     249814\n",
        "5       9324\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 198
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "for i in range(1,4,1):\n",
      "    pair='conn_type',format(i)\n",
      "    str1=''.join(pair)\n",
      "    t1[str1]=0\n",
      "    t2[str1]=0\n",
      "    test[str1]=0\n",
      "    t1[str1][t1['device_conn_type']==conn[i-1]]=1\n",
      "    t2[str1][t2['device_conn_type']==conn[i-1]]=1\n",
      "    test[str1][test['device_conn_type']==conn[i-1]]=1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 199
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validation_check2(feature_cols,['conn_type1','conn_type2','conn_type3'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "140590.259911\n",
        "-----\n",
        "139862.221935"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "-----\n",
        "139676.967262"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 202
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1.columns"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 203,
       "text": [
        "Index([u'id', u'click', u'hour', u'C1', u'banner_pos', u'site_id', u'site_domain', u'site_category', u'app_id', u'app_domain', u'app_category', u'device_id', u'device_ip', u'device_model', u'device_type', u'device_conn_type', u'C14', u'C15', u'C16', u'C17', u'C18', u'C19', u'C20', u'C21', u'h', u'd', u'weekday', u'special_site', u'c1_1', u'c1_2', u'c1_3', u'c11', u'c12', u'c13', u'c14', u'c15', u'c16', u'banner_high', u'banner_low', u'h_rank', u'conn_type1', u'conn_type2', u'conn_type3'], dtype='object')"
       ]
      }
     ],
     "prompt_number": 203
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test['C18'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 206,
       "text": [
        "0    2122105\n",
        "3    1291718\n",
        "2     934132\n",
        "1     229509\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 206
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sorted_plot('C18',train,1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nAPhFmLMDPJx5AAAAAElFTkSuQmCC\n",
       "text": [
        "<matplotlib.figure.Figure at 0x121f2ed10>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "total count = 4\n",
        "maximum_value = 0.294975813856 at 2    2\n",
        "Name: C18, dtype: int64\n",
        "minimum_value = 0.0341764281299 at 3    1\n",
        "Name: C18, dtype: int64\n",
        "number of zeroes = 0\n",
        "number of ones = 0\n",
        "Distribution:(including the starting value)\n",
        "0.0 <-> 0.1  =  1\n",
        "0.1 <-> 0.2  =  2\n",
        "0.2 <-> 0.3  =  1\n",
        "0.3 <-> 0.4  =  0\n",
        "0.4 <-> 0.5  =  0\n",
        "0.5 <-> 0.6  =  0\n",
        "0.6 <-> 0.7  =  0\n",
        "0.7 <-> 0.8  =  0\n",
        "0.8 <-> 0.9  =  0\n",
        "0.9 <-> 1.0  =  0\n",
        "1.0 <-> 1.1  =  0\n"
       ]
      }
     ],
     "prompt_number": 207
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "c18=train['C18'].unique()\n",
      "for i in range(1,4,1):\n",
      "    pair='c18',format(i)\n",
      "    str1='_'.join(pair)\n",
      "    t1[str1]=0\n",
      "    t2[str1]=0\n",
      "    test[str1]=0\n",
      "    t1[str1][t1['C18']==c18[i-1]]=1\n",
      "    t2[str1][t2['C18']==c18[i-1]]=1\n",
      "    test[str1][test['C18']==c18[i-1]]=1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 208
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "feature_cols=feature_cols+['conn_type1','conn_type2','conn_type3']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 209
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validation_check2(feature_cols,['c18_1','c18_2','c18_3'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "139676.967346\n",
        "-----\n",
        "136569.258488"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "-----\n",
        "136248.134503"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 210
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "feature_cols=feature_cols+['c18_1','c18_2','c18_3']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 211
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print feature_cols"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['special_site', 'c11', 'c12', 'c13', 'c14', 'c15', 'c16', 'conn_type1', 'conn_type2', 'conn_type3', 'c18_1', 'c18_2', 'c18_3']\n"
       ]
      }
     ],
     "prompt_number": 212
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1.columns"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 213,
       "text": [
        "Index([u'id', u'click', u'hour', u'C1', u'banner_pos', u'site_id', u'site_domain', u'site_category', u'app_id', u'app_domain', u'app_category', u'device_id', u'device_ip', u'device_model', u'device_type', u'device_conn_type', u'C14', u'C15', u'C16', u'C17', u'C18', u'C19', u'C20', u'C21', u'h', u'd', u'weekday', u'special_site', u'c1_1', u'c1_2', u'c1_3', u'c11', u'c12', u'c13', u'c14', u'c15', u'c16', u'banner_high', u'banner_low', u'h_rank', u'conn_type1', u'conn_type2', u'conn_type3', u'c18_1', u'c18_2', u'c18_3'], dtype='object')"
       ]
      }
     ],
     "prompt_number": 213
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sorted_plot('weekday',t1,1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nBQAAAABJRU5ErkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x117a7b110>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "total count = 7\n",
        "maximum_value = 0.184494561337 at 5    6\n",
        "Name: weekday, dtype: int64\n",
        "minimum_value = 0.156792092118 at 4    2\n",
        "Name: weekday, dtype: int64\n",
        "number of zeroes = 0\n",
        "number of ones = 0\n",
        "Distribution:(including the starting value)\n",
        "0.0 <-> 0.1  =  0\n",
        "0.1 <-> 0.2  =  7\n",
        "0.2 <-> 0.3  =  0\n",
        "0.3 <-> 0.4  =  0\n",
        "0.4 <-> 0.5  =  0\n",
        "0.5 <-> 0.6  =  0\n",
        "0.6 <-> 0.7  =  0\n",
        "0.7 <-> 0.8  =  0\n",
        "0.8 <-> 0.9  =  0\n",
        "0.9 <-> 1.0  =  0\n",
        "1.0 <-> 1.1  =  0\n"
       ]
      }
     ],
     "prompt_number": 218
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test['C15'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 226,
       "text": [
        "320     4294482\n",
        "300      239865\n",
        "216       23051\n",
        "728       19229\n",
        "768         319\n",
        "1024        301\n",
        "480         171\n",
        "120          46\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 226
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train['C15'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 228,
       "text": [
        "320     37708959\n",
        "300      2337294\n",
        "216       298794\n",
        "728        74533\n",
        "120         3069\n",
        "1024        2560\n",
        "480         2137\n",
        "768         1621\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 228
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sorted_plot('C15',train,1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nzzj4KYwx5vxszKIQbNq0ieDgYPz9/fnhhx/429/+xqxZs7jlllsIDg7m3Xff5c4772TUqFEsWbKE\nU6dO0bRpUxo2bMibb77JihUrAGjbti1DhgxhwIABDn8iY4yvs0tnXahOnTr4+/tnLF966aVUqlSJ\n+fPnU7duXbp27cqll15KlSpV+Pbbb+nbty+zZs1izpw5DB8+nGrVqlGtWjWGDx+ece8XY4zxJVYs\nCii933PQoEEEBARQp04dRo4cScOGDdm0aRP169fnt99+46677iIyMpIbbriB6667DoDNmzdTv379\njNeqV68emzZtciS/W1l+57g5O7g/v7dZsSgk06ZNIzk5mdjYWEaNGsVXX33FiRMnOHz4MCEhIdxw\nww189tlnVKxYkePHjwNpz8wuW7ZsxmuUKVOG5ORkpz6CMcacl41ZFIHHHnuMyy67jLVr17Jp0ybm\nz59P+/btAahbty4vvPACXbp0ISgoiNjYWBo1agTA+vXradWqFceOHXMyvjHGBWzMohg4dOgQ8+bN\n48SJE9x8880ZheLEiRNs376dOnXqAGljHQkJCRntEhMTufnmmx3JbIwxObFiUUALFiwgMjKSEydO\nkJqaysiRI/noo4/o2rUrcXFx/PDDD8yfP58///yTcePGERISwvXXXw9A7969mThxInv27GH37t1M\nnDiRPn36eDW/2/ttLb9z3Jwd3J/f22wGdwGJCG+99RaPPfYYv//+OyLCa6+9xrBhwwCYN28eTzzx\nBL169aJZs2ZERkZmtB0wYAA7duygbt26APTr14/+/fs78jmMMSYnNmZxgaKjVzF5cgwnT5bg1Knd\n/PJLDKGhLZk2bZo9d8IYU+Ts3lAuEB29iqFDl7J9+4vAG8AbVK58K/ff388KhTGmWMp1zEJEOojI\n9yKyVURGnGefyZ7tiSLSINP6nSKyUUQ2iMhXhRncSRMnLmL79hpAE2AK8Dn790cxZcoyZ4NdALf3\n21p+57g5O7g/v7fleGYhIn7AVKANsBtYJyJRqrol0z6dgOtUtZaINAXeBJp5NisQqqqHiiS9F6kq\n69at4+2332bVqveBDsA44HKgFgB//unnYEJjjCk6uZ1ZNAG2qepOVU0BIoG7ztrnH8AsAFX9EggS\nkcy3T/Van1pROHLkCFOnTiUkJIQePXpQs2ZNmjfvD3wMdAJaZ+zr75/qVMwLFhoa6nSEArH8znFz\n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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x11c7aa310>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "total count = 8\n",
        "maximum_value = 0.425663170882 at 7    768\n",
        "Name: C15, dtype: int64\n",
        "minimum_value = 0.01889866406 at 4    120\n",
        "Name: C15, dtype: int64\n",
        "number of zeroes = 0\n",
        "number of ones = 0\n",
        "Distribution:(including the starting value)\n",
        "0.0 <-> 0.1  =  2\n",
        "0.1 <-> 0.2  =  2\n",
        "0.2 <-> 0.3  =  2\n",
        "0.3 <-> 0.4  =  1\n",
        "0.4 <-> 0.5  =  1\n",
        "0.5 <-> 0.6  =  0\n",
        "0.6 <-> 0.7  =  0\n",
        "0.7 <-> 0.8  =  0\n",
        "0.8 <-> 0.9  =  0\n",
        "0.9 <-> 1.0  =  0\n",
        "1.0 <-> 1.1  =  0\n"
       ]
      }
     ],
     "prompt_number": 230
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "c15=train['C15'].unique()\n",
      "for i in range(1,8,1):\n",
      "    pair='c15_',format(i)\n",
      "    str1=''.join(pair)\n",
      "    t1[str1]=0\n",
      "    t2[str1]=0\n",
      "    test[str1]=0\n",
      "    t1[str1][t1['C15']==c15[i-1]]=1\n",
      "    t2[str1][t2['C15']==c15[i-1]]=1\n",
      "    test[str1][test['C15']==c15[i-1]]=1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 231
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "l15=[]\n",
      "for i in range(1,8,1):\n",
      "    pair='c15_',format(i)\n",
      "    str1=''.join(pair)\n",
      "    l15=l15+[str1]\n",
      "l15"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 233,
       "text": [
        "['c15_1', 'c15_2', 'c15_3', 'c15_4', 'c15_5', 'c15_6', 'c15_7']"
       ]
      }
     ],
     "prompt_number": 233
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validation_check2(feature_cols,l15)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "136248.095544\n",
        "-----\n",
        "138675.116338"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "-----\n",
        "135226.858041"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 234
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "feature_cols=feature_cols+l15"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 235
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print feature_cols"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['special_site', 'c11', 'c12', 'c13', 'c14', 'c15', 'c16', 'conn_type1', 'conn_type2', 'conn_type3', 'c18_1', 'c18_2', 'c18_3', 'c15_1', 'c15_2', 'c15_3', 'c15_4', 'c15_5', 'c15_6', 'c15_7']\n"
       ]
      }
     ],
     "prompt_number": 236
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test['C16'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 237,
       "text": [
        "50      4335701\n",
        "250      185809\n",
        "36        23051\n",
        "90        19229\n",
        "480       12837\n",
        "1024        319\n",
        "768         301\n",
        "320         171\n",
        "20           46\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 237
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train['C16'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 240,
       "text": [
        "50      38136554\n",
        "250      1806334\n",
        "36        298794\n",
        "480       103365\n",
        "90         74533\n",
        "20          3069\n",
        "768         2560\n",
        "320         2137\n",
        "1024        1621\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 240
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "c16=train['C16'].unique()\n",
      "for i in range(1,9,1):\n",
      "    pair='c16_',format(i)\n",
      "    str1=''.join(pair)\n",
      "    t1[str1]=0\n",
      "    t2[str1]=0\n",
      "    test[str1]=0\n",
      "    t1[str1][t1['C16']==c16[i-1]]=1\n",
      "    t2[str1][t2['C16']==c16[i-1]]=1\n",
      "    test[str1][test['C16']==c16[i-1]]=1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 241
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "l=[]\n",
      "for i in range(1,9,1):\n",
      "    pair='c16_',format(i)\n",
      "    str1=''.join(pair)\n",
      "    l=l+[str1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 242
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validation_check2(feature_cols,l)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "135226.760192\n",
        "-----\n",
        "137913.267947"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "-----\n",
        "134875.043313"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 243
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "feature_cols=feature_cols+l"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 244
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print feature_cols"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['special_site', 'c11', 'c12', 'c13', 'c14', 'c15', 'c16', 'conn_type1', 'conn_type2', 'conn_type3', 'c18_1', 'c18_2', 'c18_3', 'c15_1', 'c15_2', 'c15_3', 'c15_4', 'c15_5', 'c15_6', 'c15_7', 'c16_1', 'c16_2', 'c16_3', 'c16_4', 'c16_5', 'c16_6', 'c16_7', 'c16_8']\n"
       ]
      }
     ],
     "prompt_number": 245
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "c21=train['C21'].value_counts()\n",
      "c21=c21[c21>30]\n",
      "c21=c21.index"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 251
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(c21)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 252,
       "text": [
        "60"
       ]
      }
     ],
     "prompt_number": 252
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "avg_c21=np.array([])\n",
      "for i in range(len(c21)):\n",
      "    avg_c21=np.append(avg_c21,np.mean(train['click'][train['C21']==c21[i]]))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 253
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(avg_c21)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 254,
       "text": [
        "[<matplotlib.lines.Line2D at 0x11c231e50>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\niy9KIKO8zQAAAABJRU5ErkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x121f142d0>"
       ]
      }
     ],
     "prompt_number": 254
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df_c21=DataFrame({'c21':c21,'Avg':avg_c21})"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 255
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df_c21=df_c21.sort(columns='Avg')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 256
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df_c21.head(2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Avg</th>\n",
        "      <th>c21</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>4 </th>\n",
        "      <td> 0.028201</td>\n",
        "      <td>  71</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>34</th>\n",
        "      <td> 0.036322</td>\n",
        "      <td> 204</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 257,
       "text": [
        "         Avg  c21\n",
        "4   0.028201   71\n",
        "34  0.036322  204"
       ]
      }
     ],
     "prompt_number": 257
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(df_c21['Avg'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 258,
       "text": [
        "[<matplotlib.lines.Line2D at 0x121f0a6d0>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x11d811f50>"
       ]
      }
     ],
     "prompt_number": 258
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print df_c21['Avg'].max(),df_c21['Avg'].min()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0.39391903758 0.0282006700511\n"
       ]
      }
     ],
     "prompt_number": 259
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df_c21.tail(2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Avg</th>\n",
        "      <th>c21</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>43</th>\n",
        "      <td> 0.284454</td>\n",
        "      <td> 35</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8 </th>\n",
        "      <td> 0.393919</td>\n",
        "      <td> 33</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 261,
       "text": [
        "         Avg  c21\n",
        "43  0.284454   35\n",
        "8   0.393919   33"
       ]
      }
     ],
     "prompt_number": 261
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1['c21_high']=0\n",
      "t2['c21_high']=0\n",
      "test['c21_high']=0\n",
      "t1['c21_high'][t1['C21']==35]=1\n",
      "t2['c21_high'][t2['C21']==35]=1\n",
      "test['c21_high'][test['C21']==35]=1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 262
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validation_check2(feature_cols,['c21_high'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "134875.070172\n",
        "-----\n",
        "140904.186379"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "-----\n",
        "134875.001569"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 263
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print feature_cols"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['special_site', 'c11', 'c12', 'c13', 'c14', 'c15', 'c16', 'conn_type1', 'conn_type2', 'conn_type3', 'c18_1', 'c18_2', 'c18_3', 'c15_1', 'c15_2', 'c15_3', 'c15_4', 'c15_5', 'c15_6', 'c15_7', 'c16_1', 'c16_2', 'c16_3', 'c16_4', 'c16_5', 'c16_6', 'c16_7', 'c16_8']\n"
       ]
      }
     ],
     "prompt_number": 264
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1.columns"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 265,
       "text": [
        "Index([u'id', u'click', u'hour', u'C1', u'banner_pos', u'site_id', u'site_domain', u'site_category', u'app_id', u'app_domain', u'app_category', u'device_id', u'device_ip', u'device_model', u'device_type', u'device_conn_type', u'C14', u'C15', u'C16', u'C17', u'C18', u'C19', u'C20', u'C21', u'h', u'd', u'weekday', u'special_site', u'c1_1', u'c1_2', u'c1_3', u'c11', u'c12', u'c13', u'c14', u'c15', u'c16', u'banner_high', u'banner_low', u'h_rank', u'conn_type1', u'conn_type2', u'conn_type3', u'c18_1', u'c18_2', u'c18_3', u'c15_1', u'c15_2', u'c15_3', u'c15_4', u'c15_5', u'c15_6', u'c15_7', u'c16_1', u'c16_2', u'c16_3', u'c16_4', u'c16_5', u'c16_6', u'c16_7', u'c16_8', u'c21_high'], dtype='object')"
       ]
      }
     ],
     "prompt_number": 265
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1['device_type'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 267,
       "text": [
        "1    461357\n",
        "0     27410\n",
        "4      9669\n",
        "5      1564\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 267
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sorted_plot('device_type',train,1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nYkXfGGPKkP8HegPaHcsJA00AAAAASUVORK5CYII=\n",
       "text": [
        "<matplotlib.figure.Figure at 0x122608d10>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "total count = 5\n",
        "maximum_value = 0.210731480197 at 1    0\n",
        "Name: device_type, dtype: int64\n",
        "minimum_value = 0.0645161290323 at 4    2\n",
        "Name: device_type, dtype: int64\n",
        "number of zeroes = 0\n",
        "number of ones = 0\n",
        "Distribution:(including the starting value)\n",
        "0.0 <-> 0.1  =  3\n",
        "0.1 <-> 0.2  =  1\n",
        "0.2 <-> 0.3  =  1\n",
        "0.3 <-> 0.4  =  0\n",
        "0.4 <-> 0.5  =  0\n",
        "0.5 <-> 0.6  =  0\n",
        "0.6 <-> 0.7  =  0\n",
        "0.7 <-> 0.8  =  0\n",
        "0.8 <-> 0.9  =  0\n",
        "0.9 <-> 1.0  =  0\n",
        "1.0 <-> 1.1  =  0\n"
       ]
      }
     ],
     "prompt_number": 268
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.mean(train['click'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 269,
       "text": [
        "0.16980562476404604"
       ]
      }
     ],
     "prompt_number": 269
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1['device_type_1']=0\n",
      "t1['device_type_2']=0\n",
      "t1['device_type_3']=0\n",
      "\n",
      "t2['device_type_1']=0\n",
      "t2['device_type_2']=0\n",
      "t2['device_type_3']=0\n",
      "\n",
      "test['device_type_1']=0\n",
      "test['device_type_2']=0\n",
      "test['device_type_3']=0\n",
      "\n",
      "t1['device_type_1'][t1['device_type']==1]=1\n",
      "t1['device_type_2'][t1['device_type']==2]=1\n",
      "t1['device_type_3'][t1['device_type']==5]=1\n",
      "\n",
      "t2['device_type_1'][t2['device_type']==1]=1\n",
      "t2['device_type_2'][t2['device_type']==2]=1\n",
      "t2['device_type_3'][t2['device_type']==5]=1\n",
      "\n",
      "test['device_type_1'][test['device_type']==1]=1\n",
      "test['device_type_2'][test['device_type']==2]=1\n",
      "test['device_type_3'][test['device_type']==5]=1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 270
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "l=['device_type_1','device_type_2','device_type_3']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 271
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validation_check2(feature_cols,l)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "134875.026035\n",
        "-----\n",
        "140878.009954"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "-----\n",
        "134873.071465"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 272
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "feature_cols=feature_cols+l"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 274
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1.columns"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 275,
       "text": [
        "Index([u'id', u'click', u'hour', u'C1', u'banner_pos', u'site_id', u'site_domain', u'site_category', u'app_id', u'app_domain', u'app_category', u'device_id', u'device_ip', u'device_model', u'device_type', u'device_conn_type', u'C14', u'C15', u'C16', u'C17', u'C18', u'C19', u'C20', u'C21', u'h', u'd', u'weekday', u'special_site', u'c1_1', u'c1_2', u'c1_3', u'c11', u'c12', u'c13', u'c14', u'c15', u'c16', u'banner_high', u'banner_low', u'h_rank', u'conn_type1', u'conn_type2', u'conn_type3', u'c18_1', u'c18_2', u'c18_3', u'c15_1', u'c15_2', u'c15_3', u'c15_4', u'c15_5', u'c15_6', u'c15_7', u'c16_1', u'c16_2', u'c16_3', u'c16_4', u'c16_5', u'c16_6', u'c16_7', u'c16_8', u'c21_high', u'device_type_1', u'device_type_2', u'device_type_3'], dtype='object')"
       ]
      }
     ],
     "prompt_number": 275
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train['app_category'].value_counts().shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 279,
       "text": [
        "(36,)"
       ]
      }
     ],
     "prompt_number": 279
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1['app_category'].value_counts().shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 280,
       "text": [
        "(23,)"
       ]
      }
     ],
     "prompt_number": 280
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1['app_category'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 281,
       "text": [
        "07d7df22    323515\n",
        "0f2161f8    118148\n",
        "cef3e649     21496\n",
        "8ded1f7a     18314\n",
        "f95efa07     14111\n",
        "d1327cf5      1516\n",
        "09481d60       651\n",
        "dc97ec06       644\n",
        "75d80bbe       505\n",
        "fc6fa53d       310\n",
        "4ce2e9fc       248\n",
        "879c24eb       159\n",
        "a3c42688       135\n",
        "4681bb9d        80\n",
        "0f9a328c        68\n",
        "2281a340        35\n",
        "a86a3e89        29\n",
        "8df2e842        24\n",
        "0bfbc358         4\n",
        "79f0b860         4\n",
        "7113d72a         2\n",
        "2fc4f2aa         1\n",
        "5326cf99         1\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 281
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "app_cat=t1['app_category'].value_counts()\n",
      "app_cat=app_cat[app_cat>30]\n",
      "app_cat=app_cat.index\n",
      "len(app_cat)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 282,
       "text": [
        "16"
       ]
      }
     ],
     "prompt_number": 282
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "avg_app_cat=np.array([])\n",
      "for i in range(len(app_cat)):\n",
      "    avg_app_cat=np.append(avg_app_cat,np.mean(train['click'][train['app_category']==app_cat[i]]))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 284
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df_app_cat=DataFrame({'app_cat':app_cat,'avg':avg_app_cat})\n",
      "df_app_cat=df_app_cat.sort(columns='avg')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 285
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(df_app_cat['avg'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 286,
       "text": [
        "[<matplotlib.lines.Line2D at 0x117a0d290>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\na4SM9gAAAABJRU5ErkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x121f0a390>"
       ]
      }
     ],
     "prompt_number": 286
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(df_app_cat['avg'], 'bo',df_app_cat['avg'], 'k')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 287,
       "text": [
        "[<matplotlib.lines.Line2D at 0x11c906dd0>,\n",
        " <matplotlib.lines.Line2D at 0x1209d82d0>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nTkSuQmCC\n",
       "text": [
        "<matplotlib.figure.Figure at 0x1226012d0>"
       ]
      }
     ],
     "prompt_number": 287
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df_app_cat.max()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 288,
       "text": [
        "app_cat     fc6fa53d\n",
        "avg        0.2475875\n",
        "dtype: object"
       ]
      }
     ],
     "prompt_number": 288
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1['app_cat_high']=0\n",
      "t2['app_cat_high']=0\n",
      "test['app_cat_high']=0\n",
      "t1['app_cat_high'][t1['app_category']=='fc6fa53d']=1\n",
      "t2['app_cat_high'][t2['app_category']=='fc6fa53d']=1\n",
      "test['app_cat_high'][test['app_category']=='fc6fa53d']=1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 289
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validation_check2(feature_cols,['app_cat_high'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "134873.233697\n",
        "-----\n",
        "140907.928817"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "-----\n",
        "134869.727605"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 292
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df_app_cat"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>app_cat</th>\n",
        "      <th>avg</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>15</th>\n",
        "      <td> 2281a340</td>\n",
        "      <td> 0.013375</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12</th>\n",
        "      <td> a3c42688</td>\n",
        "      <td> 0.047208</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9 </th>\n",
        "      <td> fc6fa53d</td>\n",
        "      <td> 0.048515</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3 </th>\n",
        "      <td> 8ded1f7a</td>\n",
        "      <td> 0.089978</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2 </th>\n",
        "      <td> cef3e649</td>\n",
        "      <td> 0.093240</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8 </th>\n",
        "      <td> 75d80bbe</td>\n",
        "      <td> 0.095966</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>11</th>\n",
        "      <td> 879c24eb</td>\n",
        "      <td> 0.104732</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1 </th>\n",
        "      <td> 0f2161f8</td>\n",
        "      <td> 0.108118</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5 </th>\n",
        "      <td> d1327cf5</td>\n",
        "      <td> 0.123319</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10</th>\n",
        "      <td> 4ce2e9fc</td>\n",
        "      <td> 0.123784</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13</th>\n",
        "      <td> 4681bb9d</td>\n",
        "      <td> 0.144333</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6 </th>\n",
        "      <td> 09481d60</td>\n",
        "      <td> 0.155194</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14</th>\n",
        "      <td> 0f9a328c</td>\n",
        "      <td> 0.155265</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7 </th>\n",
        "      <td> dc97ec06</td>\n",
        "      <td> 0.156504</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>0 </th>\n",
        "      <td> 07d7df22</td>\n",
        "      <td> 0.199148</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4 </th>\n",
        "      <td> f95efa07</td>\n",
        "      <td> 0.247588</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 293,
       "text": [
        "     app_cat       avg\n",
        "15  2281a340  0.013375\n",
        "12  a3c42688  0.047208\n",
        "9   fc6fa53d  0.048515\n",
        "3   8ded1f7a  0.089978\n",
        "2   cef3e649  0.093240\n",
        "8   75d80bbe  0.095966\n",
        "11  879c24eb  0.104732\n",
        "1   0f2161f8  0.108118\n",
        "5   d1327cf5  0.123319\n",
        "10  4ce2e9fc  0.123784\n",
        "13  4681bb9d  0.144333\n",
        "6   09481d60  0.155194\n",
        "14  0f9a328c  0.155265\n",
        "7   dc97ec06  0.156504\n",
        "0   07d7df22  0.199148\n",
        "4   f95efa07  0.247588"
       ]
      }
     ],
     "prompt_number": 293
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rank=[1,2,2,3,3,3,3,3,4,4,5,6,6,6,7,8]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 294
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df_app_cat['rank']=rank"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 295
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df_app_cat"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>app_cat</th>\n",
        "      <th>avg</th>\n",
        "      <th>rank</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>15</th>\n",
        "      <td> 2281a340</td>\n",
        "      <td> 0.013375</td>\n",
        "      <td> 1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12</th>\n",
        "      <td> a3c42688</td>\n",
        "      <td> 0.047208</td>\n",
        "      <td> 2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9 </th>\n",
        "      <td> fc6fa53d</td>\n",
        "      <td> 0.048515</td>\n",
        "      <td> 2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3 </th>\n",
        "      <td> 8ded1f7a</td>\n",
        "      <td> 0.089978</td>\n",
        "      <td> 3</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2 </th>\n",
        "      <td> cef3e649</td>\n",
        "      <td> 0.093240</td>\n",
        "      <td> 3</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8 </th>\n",
        "      <td> 75d80bbe</td>\n",
        "      <td> 0.095966</td>\n",
        "      <td> 3</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>11</th>\n",
        "      <td> 879c24eb</td>\n",
        "      <td> 0.104732</td>\n",
        "      <td> 3</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1 </th>\n",
        "      <td> 0f2161f8</td>\n",
        "      <td> 0.108118</td>\n",
        "      <td> 3</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5 </th>\n",
        "      <td> d1327cf5</td>\n",
        "      <td> 0.123319</td>\n",
        "      <td> 4</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10</th>\n",
        "      <td> 4ce2e9fc</td>\n",
        "      <td> 0.123784</td>\n",
        "      <td> 4</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13</th>\n",
        "      <td> 4681bb9d</td>\n",
        "      <td> 0.144333</td>\n",
        "      <td> 5</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6 </th>\n",
        "      <td> 09481d60</td>\n",
        "      <td> 0.155194</td>\n",
        "      <td> 6</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14</th>\n",
        "      <td> 0f9a328c</td>\n",
        "      <td> 0.155265</td>\n",
        "      <td> 6</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7 </th>\n",
        "      <td> dc97ec06</td>\n",
        "      <td> 0.156504</td>\n",
        "      <td> 6</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>0 </th>\n",
        "      <td> 07d7df22</td>\n",
        "      <td> 0.199148</td>\n",
        "      <td> 7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4 </th>\n",
        "      <td> f95efa07</td>\n",
        "      <td> 0.247588</td>\n",
        "      <td> 8</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 296,
       "text": [
        "     app_cat       avg  rank\n",
        "15  2281a340  0.013375     1\n",
        "12  a3c42688  0.047208     2\n",
        "9   fc6fa53d  0.048515     2\n",
        "3   8ded1f7a  0.089978     3\n",
        "2   cef3e649  0.093240     3\n",
        "8   75d80bbe  0.095966     3\n",
        "11  879c24eb  0.104732     3\n",
        "1   0f2161f8  0.108118     3\n",
        "5   d1327cf5  0.123319     4\n",
        "10  4ce2e9fc  0.123784     4\n",
        "13  4681bb9d  0.144333     5\n",
        "6   09481d60  0.155194     6\n",
        "14  0f9a328c  0.155265     6\n",
        "7   dc97ec06  0.156504     6\n",
        "0   07d7df22  0.199148     7\n",
        "4   f95efa07  0.247588     8"
       ]
      }
     ],
     "prompt_number": 296
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "for i in range(1,8,1):\n",
      "    pair='app_cat_',format(i)\n",
      "    str1=''.join(pair)\n",
      "    t1[str1]=0\n",
      "    t2[str1]=0\n",
      "    test[str1]=0\n",
      "    l=list(df_app_cat['app_cat'][df_app_cat['rank']==i])\n",
      "    for k in l:\n",
      "        t1[str1][t1['app_category']==k]=1\n",
      "        t2[str1][t2['app_category']==k]=1\n",
      "        test[str1][test['app_category']==k]=1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 297
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "l=[]\n",
      "for i in range(1,8,1):\n",
      "    pair='app_cat_',format(i)\n",
      "    str1=''.join(pair)\n",
      "    l=l+[str1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 298
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "validation_check2(feature_cols,l)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "134873.233697\n",
        "-----\n",
        "138733.224586"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "-----\n",
        "134170.344154"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 299
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "feature_cols=feature_cols+l"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 300
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print feature_cols"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['special_site', 'c11', 'c12', 'c13', 'c14', 'c15', 'c16', 'conn_type1', 'conn_type2', 'conn_type3', 'c18_1', 'c18_2', 'c18_3', 'c15_1', 'c15_2', 'c15_3', 'c15_4', 'c15_5', 'c15_6', 'c15_7', 'c16_1', 'c16_2', 'c16_3', 'c16_4', 'c16_5', 'c16_6', 'c16_7', 'c16_8', 'device_type_1', 'device_type_2', 'device_type_3', 'app_cat_1', 'app_cat_2', 'app_cat_3', 'app_cat_4', 'app_cat_5', 'app_cat_6', 'app_cat_7']\n"
       ]
      }
     ],
     "prompt_number": 301
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sorted_plot('weekday',t1,2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nIiIi2Lp1K8eOHXN73xs3bqRSpUpUqFDB+c6GLZiav5FjV65c4c4772TevHnUr18/z+20a9eO0NBQ\nXn/9dQujMyB1Lqzg4GDeeOMNt/Y7ePBgzp8/z4gRI9zar/F3puZvWK5YsWL07duXPn365LmNw4cP\nExcXx7PPPmthZEYaXVf92PmRjUbmTPLXxFNrji+++CLx8fFO489q+/jx43nmmWcoWbKk9cG5kV2P\nX2hoKPv37+fAgQP5aic347t48SJbtmzh0UcfzVef7mTX4+dOJvkbueLv78+gQYPo3bs3uS3JXb16\nlUmTJplyjwsVKlSIdu3aMXPmTLf1uWLFCh566CFzv4aHMTV/I9dSUlIIDg5myJAhtGnTJsfvmzJl\nCrNmzTLzvrjYypUr6dGjB9u2bXNLfz169OD222/nvffec0t/RvZMzd9wmQIFCjBs2DA++OADkpOT\nc/QepdTNeXwM12rcuDFnzpxh165dbunPXN/vmUzy18TTa44tW7akVKlSTJ8+PdPtGce3du1aLl68\nSEREhBuicz07Hz8/Pz86dOiQr9JPTsd35MgRzpw5Q3BwcJ770sHOx89dTPI38iTtgS/9+/fnxo0b\nTvePjo7m9ddfp0AB8yvnDmlX/bi6bBobG0tYWJg5rh7I1PyNfGnRogWtW7fmtddey3KfP/74g3vv\nvZeDBw9SunRpN0bnu5RSBAUFMWfOHOrWreuyfjp27EjTpk154YUXXNaHkTs5rfmb5G/ky5YtW2jZ\nsiX79u2jePHime7Tv39/zpw5w7hx49wcnW/r06cPycnJDB/+t0duWyIlJYVy5cqxefNmj3oEp7cz\nJ3xtzltqjnXr1uXRRx9l9OjRf1mfNr7r168zceJEunXrpiE61/GE45c2109KSkqu35uT8W3dupVb\nb73VIxO/Jxw/VzPJ38i3wYMHM3LkSM6dO/e3bbNnz6Z27drUqlVLQ2S+rU6dOhQvXpxffvnFJe2b\nu3o9myn7GJbo0qULt956698e+tKgQQP69OnDk08+qSky3zZ48GBOnz79t7/MrBAWFsYbb7xB69at\nLW/byDtT8zfc6ujRo9x///3s2LHj5syO69evJzIykvj4ePz8/DRH6Jv27t1LSEgIR48etfQYXLly\nhXLlyvHHH394/FQd3sbU/G3O22qOlSpV4vnnn2fIkCFA6viio6N57bXXvDLxe8rxq1mzJhUrVmTl\n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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x117a1ecd0>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nBQAAAABJRU5ErkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x11945a990>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "total count = 7\n",
        "maximum_value = 0.184494561337 at 5    6\n",
        "Name: weekday, dtype: int64\n",
        "minimum_value = 0.156792092118 at 4    2\n",
        "Name: weekday, dtype: int64\n",
        "number of zeroes = 0\n",
        "number of ones = 0\n",
        "Distribution:(including the starting value)\n",
        "0.0 <-> 0.1  =  0\n",
        "0.1 <-> 0.2  =  7\n",
        "0.2 <-> 0.3  =  0\n",
        "0.3 <-> 0.4  =  0\n",
        "0.4 <-> 0.5  =  0\n",
        "0.5 <-> 0.6  =  0\n",
        "0.6 <-> 0.7  =  0\n",
        "0.7 <-> 0.8  =  0\n",
        "0.8 <-> 0.9  =  0\n",
        "0.9 <-> 1.0  =  0\n",
        "1.0 <-> 1.1  =  0\n"
       ]
      }
     ],
     "prompt_number": 311
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print feature_cols"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['special_site', 'c11', 'c12', 'c13', 'c14', 'c15', 'c16', 'conn_type1', 'conn_type2', 'conn_type3', 'c18_1', 'c18_2', 'c18_3', 'c15_1', 'c15_2', 'c15_3', 'c15_4', 'c15_5', 'c15_6', 'c15_7', 'c16_1', 'c16_2', 'c16_3', 'c16_4', 'c16_5', 'c16_6', 'c16_7', 'c16_8', 'device_type_1', 'device_type_2', 'device_type_3', 'app_cat_1', 'app_cat_2', 'app_cat_3', 'app_cat_4', 'app_cat_5', 'app_cat_6', 'app_cat_7']\n"
       ]
      }
     ],
     "prompt_number": 312
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1.columns"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 313,
       "text": [
        "Index([u'id', u'click', u'hour', u'C1', u'banner_pos', u'site_id', u'site_domain', u'site_category', u'app_id', u'app_domain', u'app_category', u'device_id', u'device_ip', u'device_model', u'device_type', u'device_conn_type', u'C14', u'C15', u'C16', u'C17', u'C18', u'C19', u'C20', u'C21', u'h', u'd', u'weekday', u'special_site', u'c1_1', u'c1_2', u'c1_3', u'c11', u'c12', u'c13', u'c14', u'c15', u'c16', u'banner_high', u'banner_low', u'h_rank', u'conn_type1', u'conn_type2', u'conn_type3', u'c18_1', u'c18_2', u'c18_3', u'c15_1', u'c15_2', u'c15_3', u'c15_4', u'c15_5', u'c15_6', u'c15_7', u'c16_1', u'c16_2', u'c16_3', u'c16_4', u'c16_5', u'c16_6', u'c16_7', u'c16_8', u'c21_high', u'device_type_1', u'device_type_2', u'device_type_3', u'app_cat_high', u'app_cat_1', u'app_cat_2', u'app_cat_3', u'app_cat_4', u'app_cat_5', u'app_cat_6', u'app_cat_7'], dtype='object')"
       ]
      }
     ],
     "prompt_number": 313
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1['site_id'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 314,
       "text": [
        "85f751fd    180578\n",
        "1fbe01fe     80119\n",
        "e151e245     32555\n",
        "d9750ee7     11945\n",
        "5b08c53b     11321\n",
        "5b4d2eda      9532\n",
        "856e6d3f      9479\n",
        "a7853007      5724\n",
        "b7e9786d      4480\n",
        "5ee41ff2      4423\n",
        "6399eda6      4311\n",
        "5bcf81a2      4295\n",
        "6256f5b4      3874\n",
        "57ef2c87      3765\n",
        "17caea14      3418\n",
        "...\n",
        "a143e732    1\n",
        "9bc74559    1\n",
        "a3d3b11b    1\n",
        "1d5e8665    1\n",
        "44fd20d9    1\n",
        "1e9bd9a8    1\n",
        "51444fdb    1\n",
        "c7c875bb    1\n",
        "2cdfa4ac    1\n",
        "8d53f28f    1\n",
        "1b4a95c0    1\n",
        "4f62cc06    1\n",
        "7088862f    1\n",
        "5e2a5c16    1\n",
        "6bb466a1    1\n",
        "Length: 2289, dtype: int64"
       ]
      }
     ],
     "prompt_number": 314
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}