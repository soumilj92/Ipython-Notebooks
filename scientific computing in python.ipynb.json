{
 "metadata": {
  "name": "",
  "signature": "sha256:b1c5eb1b79f6ea0d65bfa33b77a218f802019f4c6e20657adabc9f379f56adf7"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import pandas as pd\n",
      "import numpy as np\n",
      "import matplotlib.pyplot as plt\n",
      "import pylab as py\n",
      "import sklearn as sk\n",
      "from pandas import DataFrame,Series\n",
      "from sklearn import datasets\n",
      "from sklearn import svm\n",
      "import math\n",
      "%matplotlib inline\n",
      "import os\n",
      "import IPython.html.widgets as widgets\n",
      "import numpy.random as random\n",
      "from __future__ import division\n",
      "import scipy.stats as stats\n",
      "import scipy.linalg as linalg\n",
      "import matplotlib.patches as patches\n",
      "import scipy.integrate as integrate\n",
      "from sympy import init_printing,symbols,Matrix,solve,lambdify"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 476
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We will first make a directory for our tutorials :"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "os.getcwd()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 399,
       "text": [
        "'/Users/soumiljain/Desktop/tutorials'"
       ]
      }
     ],
     "prompt_number": 399
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "os.chdir('desktop/tutorials')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "OSError",
       "evalue": "[Errno 2] No such file or directory: 'desktop/tutorials'",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)",
        "\u001b[0;32m<ipython-input-400-adc490e327bd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'desktop/tutorials'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
        "\u001b[0;31mOSError\u001b[0m: [Errno 2] No such file or directory: 'desktop/tutorials'"
       ]
      }
     ],
     "prompt_number": 400
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Currently there is nothing inside our tutorials folder ."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "!ls"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "noisy_quadratic.dat sincos.pdf\r\n"
       ]
      }
     ],
     "prompt_number": 401
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "help(np.arange)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Help on built-in function arange in module numpy.core.multiarray:\n",
        "\n",
        "arange(...)\n",
        "    arange([start,] stop[, step,], dtype=None)\n",
        "    \n",
        "    Return evenly spaced values within a given interval.\n",
        "    \n",
        "    Values are generated within the half-open interval ``[start, stop)``\n",
        "    (in other words, the interval including `start` but excluding `stop`).\n",
        "    For integer arguments the function is equivalent to the Python built-in\n",
        "    `range <http://docs.python.org/lib/built-in-funcs.html>`_ function,\n",
        "    but returns an ndarray rather than a list.\n",
        "    \n",
        "    When using a non-integer step, such as 0.1, the results will often not\n",
        "    be consistent.  It is better to use ``linspace`` for these cases.\n",
        "    \n",
        "    Parameters\n",
        "    ----------\n",
        "    start : number, optional\n",
        "        Start of interval.  The interval includes this value.  The default\n",
        "        start value is 0.\n",
        "    stop : number\n",
        "        End of interval.  The interval does not include this value, except\n",
        "        in some cases where `step` is not an integer and floating point\n",
        "        round-off affects the length of `out`.\n",
        "    step : number, optional\n",
        "        Spacing between values.  For any output `out`, this is the distance\n",
        "        between two adjacent values, ``out[i+1] - out[i]``.  The default\n",
        "        step size is 1.  If `step` is specified, `start` must also be given.\n",
        "    dtype : dtype\n",
        "        The type of the output array.  If `dtype` is not given, infer the data\n",
        "        type from the other input arguments.\n",
        "    \n",
        "    Returns\n",
        "    -------\n",
        "    arange : ndarray\n",
        "        Array of evenly spaced values.\n",
        "    \n",
        "        For floating point arguments, the length of the result is\n",
        "        ``ceil((stop - start)/step)``.  Because of floating point overflow,\n",
        "        this rule may result in the last element of `out` being greater\n",
        "        than `stop`.\n",
        "    \n",
        "    See Also\n",
        "    --------\n",
        "    linspace : Evenly spaced numbers with careful handling of endpoints.\n",
        "    ogrid: Arrays of evenly spaced numbers in N-dimensions.\n",
        "    mgrid: Grid-shaped arrays of evenly spaced numbers in N-dimensions.\n",
        "    \n",
        "    Examples\n",
        "    --------\n",
        "    >>> np.arange(3)\n",
        "    array([0, 1, 2])\n",
        "    >>> np.arange(3.0)\n",
        "    array([ 0.,  1.,  2.])\n",
        "    >>> np.arange(3,7)\n",
        "    array([3, 4, 5, 6])\n",
        "    >>> np.arange(3,7,2)\n",
        "    array([3, 5])\n",
        "\n"
       ]
      }
     ],
     "prompt_number": 402
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.arange?"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 403
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.arange(-2.*np.pi,2.*np.pi,0.3)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 404,
       "text": [
        "array([-6.28318531, -5.98318531, -5.68318531, -5.38318531, -5.08318531,\n",
        "       -4.78318531, -4.48318531, -4.18318531, -3.88318531, -3.58318531,\n",
        "       -3.28318531, -2.98318531, -2.68318531, -2.38318531, -2.08318531,\n",
        "       -1.78318531, -1.48318531, -1.18318531, -0.88318531, -0.58318531,\n",
        "       -0.28318531,  0.01681469,  0.31681469,  0.61681469,  0.91681469,\n",
        "        1.21681469,  1.51681469,  1.81681469,  2.11681469,  2.41681469,\n",
        "        2.71681469,  3.01681469,  3.31681469,  3.61681469,  3.91681469,\n",
        "        4.21681469,  4.51681469,  4.81681469,  5.11681469,  5.41681469,\n",
        "        5.71681469,  6.01681469])"
       ]
      }
     ],
     "prompt_number": 404
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x=np.arange(-2.*np.pi,2.*np.pi,0.3)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 405
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print(\"Mean value:\",x.mean())\n",
      "print(\"MAX value:\",x.max())\n",
      "print(\"MIN value:\",x.min())\n",
      "print(\"STD value:\",x.std())"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "('Mean value:', -0.13318530717958993)\n",
        "('MAX value:', 6.0168146928204074)\n",
        "('MIN value:', -6.2831853071795862)\n",
        "('STD value:', 3.6362755671153395)\n"
       ]
      }
     ],
     "prompt_number": 406
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "dir(np)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 407,
       "text": [
        "['ALLOW_THREADS',\n",
        " 'BUFSIZE',\n",
        " 'CLIP',\n",
        " 'ComplexWarning',\n",
        " 'DataSource',\n",
        " 'ERR_CALL',\n",
        " 'ERR_DEFAULT',\n",
        " 'ERR_IGNORE',\n",
        " 'ERR_LOG',\n",
        " 'ERR_PRINT',\n",
        " 'ERR_RAISE',\n",
        " 'ERR_WARN',\n",
        " 'FLOATING_POINT_SUPPORT',\n",
        " 'FPE_DIVIDEBYZERO',\n",
        " 'FPE_INVALID',\n",
        " 'FPE_OVERFLOW',\n",
        " 'FPE_UNDERFLOW',\n",
        " 'False_',\n",
        " 'Inf',\n",
        " 'Infinity',\n",
        " 'MAXDIMS',\n",
        " 'MachAr',\n",
        " 'ModuleDeprecationWarning',\n",
        " 'NAN',\n",
        " 'NINF',\n",
        " 'NZERO',\n",
        " 'NaN',\n",
        " 'PINF',\n",
        " 'PZERO',\n",
        " 'PackageLoader',\n",
        " 'RAISE',\n",
        " 'RankWarning',\n",
        " 'SHIFT_DIVIDEBYZERO',\n",
        " 'SHIFT_INVALID',\n",
        " 'SHIFT_OVERFLOW',\n",
        " 'SHIFT_UNDERFLOW',\n",
        " 'ScalarType',\n",
        " 'Tester',\n",
        " 'True_',\n",
        " 'UFUNC_BUFSIZE_DEFAULT',\n",
        " 'UFUNC_PYVALS_NAME',\n",
        " 'VisibleDeprecationWarning',\n",
        " 'WRAP',\n",
        " '__NUMPY_SETUP__',\n",
        " '__all__',\n",
        " '__builtins__',\n",
        " '__config__',\n",
        " '__doc__',\n",
        " '__file__',\n",
        " '__git_revision__',\n",
        " '__name__',\n",
        " '__package__',\n",
        " '__path__',\n",
        " '__version__',\n",
        " '_import_tools',\n",
        " '_mat',\n",
        " 'abs',\n",
        " 'absolute',\n",
        " 'absolute_import',\n",
        " 'add',\n",
        " 'add_docstring',\n",
        " 'add_newdoc',\n",
        " 'add_newdoc_ufunc',\n",
        " 'add_newdocs',\n",
        " 'alen',\n",
        " 'all',\n",
        " 'allclose',\n",
        " 'alltrue',\n",
        " 'alterdot',\n",
        " 'amax',\n",
        " 'amin',\n",
        " 'angle',\n",
        " 'any',\n",
        " 'append',\n",
        " 'apply_along_axis',\n",
        " 'apply_over_axes',\n",
        " 'arange',\n",
        " 'arccos',\n",
        " 'arccosh',\n",
        " 'arcsin',\n",
        " 'arcsinh',\n",
        " 'arctan',\n",
        " 'arctan2',\n",
        " 'arctanh',\n",
        " 'argmax',\n",
        " 'argmin',\n",
        " 'argpartition',\n",
        " 'argsort',\n",
        " 'argwhere',\n",
        " 'around',\n",
        " 'array',\n",
        " 'array2string',\n",
        " 'array_equal',\n",
        " 'array_equiv',\n",
        " 'array_repr',\n",
        " 'array_split',\n",
        " 'array_str',\n",
        " 'asanyarray',\n",
        " 'asarray',\n",
        " 'asarray_chkfinite',\n",
        " 'ascontiguousarray',\n",
        " 'asfarray',\n",
        " 'asfortranarray',\n",
        " 'asmatrix',\n",
        " 'asscalar',\n",
        " 'atleast_1d',\n",
        " 'atleast_2d',\n",
        " 'atleast_3d',\n",
        " 'average',\n",
        " 'bartlett',\n",
        " 'base_repr',\n",
        " 'bench',\n",
        " 'binary_repr',\n",
        " 'bincount',\n",
        " 'bitwise_and',\n",
        " 'bitwise_not',\n",
        " 'bitwise_or',\n",
        " 'bitwise_xor',\n",
        " 'blackman',\n",
        " 'bmat',\n",
        " 'bool',\n",
        " 'bool8',\n",
        " 'bool_',\n",
        " 'broadcast',\n",
        " 'broadcast_arrays',\n",
        " 'busday_count',\n",
        " 'busday_offset',\n",
        " 'busdaycalendar',\n",
        " 'byte',\n",
        " 'byte_bounds',\n",
        " 'bytes_',\n",
        " 'c_',\n",
        " 'can_cast',\n",
        " 'cast',\n",
        " 'cdouble',\n",
        " 'ceil',\n",
        " 'cfloat',\n",
        " 'char',\n",
        " 'character',\n",
        " 'chararray',\n",
        " 'choose',\n",
        " 'clip',\n",
        " 'clongdouble',\n",
        " 'clongfloat',\n",
        " 'column_stack',\n",
        " 'common_type',\n",
        " 'compare_chararrays',\n",
        " 'compat',\n",
        " 'complex',\n",
        " 'complex128',\n",
        " 'complex256',\n",
        " 'complex64',\n",
        " 'complex_',\n",
        " 'complexfloating',\n",
        " 'compress',\n",
        " 'concatenate',\n",
        " 'conj',\n",
        " 'conjugate',\n",
        " 'convolve',\n",
        " 'copy',\n",
        " 'copysign',\n",
        " 'copyto',\n",
        " 'core',\n",
        " 'corrcoef',\n",
        " 'correlate',\n",
        " 'cos',\n",
        " 'cosh',\n",
        " 'count_nonzero',\n",
        " 'cov',\n",
        " 'cross',\n",
        " 'csingle',\n",
        " 'ctypeslib',\n",
        " 'cumprod',\n",
        " 'cumproduct',\n",
        " 'cumsum',\n",
        " 'datetime64',\n",
        " 'datetime_as_string',\n",
        " 'datetime_data',\n",
        " 'deg2rad',\n",
        " 'degrees',\n",
        " 'delete',\n",
        " 'deprecate',\n",
        " 'deprecate_with_doc',\n",
        " 'diag',\n",
        " 'diag_indices',\n",
        " 'diag_indices_from',\n",
        " 'diagflat',\n",
        " 'diagonal',\n",
        " 'diff',\n",
        " 'digitize',\n",
        " 'disp',\n",
        " 'divide',\n",
        " 'division',\n",
        " 'dot',\n",
        " 'double',\n",
        " 'dsplit',\n",
        " 'dstack',\n",
        " 'dtype',\n",
        " 'dual',\n",
        " 'e',\n",
        " 'ediff1d',\n",
        " 'einsum',\n",
        " 'emath',\n",
        " 'empty',\n",
        " 'empty_like',\n",
        " 'equal',\n",
        " 'errstate',\n",
        " 'euler_gamma',\n",
        " 'exp',\n",
        " 'exp2',\n",
        " 'expand_dims',\n",
        " 'expm1',\n",
        " 'extract',\n",
        " 'eye',\n",
        " 'fabs',\n",
        " 'fastCopyAndTranspose',\n",
        " 'fft',\n",
        " 'fill_diagonal',\n",
        " 'find_common_type',\n",
        " 'finfo',\n",
        " 'fix',\n",
        " 'flatiter',\n",
        " 'flatnonzero',\n",
        " 'flexible',\n",
        " 'fliplr',\n",
        " 'flipud',\n",
        " 'float',\n",
        " 'float128',\n",
        " 'float16',\n",
        " 'float32',\n",
        " 'float64',\n",
        " 'float_',\n",
        " 'floating',\n",
        " 'floor',\n",
        " 'floor_divide',\n",
        " 'fmax',\n",
        " 'fmin',\n",
        " 'fmod',\n",
        " 'format_parser',\n",
        " 'frexp',\n",
        " 'frombuffer',\n",
        " 'fromfile',\n",
        " 'fromfunction',\n",
        " 'fromiter',\n",
        " 'frompyfunc',\n",
        " 'fromregex',\n",
        " 'fromstring',\n",
        " 'full',\n",
        " 'full_like',\n",
        " 'fv',\n",
        " 'generic',\n",
        " 'genfromtxt',\n",
        " 'get_array_wrap',\n",
        " 'get_include',\n",
        " 'get_printoptions',\n",
        " 'getbuffer',\n",
        " 'getbufsize',\n",
        " 'geterr',\n",
        " 'geterrcall',\n",
        " 'geterrobj',\n",
        " 'gradient',\n",
        " 'greater',\n",
        " 'greater_equal',\n",
        " 'half',\n",
        " 'hamming',\n",
        " 'hanning',\n",
        " 'histogram',\n",
        " 'histogram2d',\n",
        " 'histogramdd',\n",
        " 'hsplit',\n",
        " 'hstack',\n",
        " 'hypot',\n",
        " 'i0',\n",
        " 'identity',\n",
        " 'iinfo',\n",
        " 'imag',\n",
        " 'in1d',\n",
        " 'index_exp',\n",
        " 'indices',\n",
        " 'inexact',\n",
        " 'inf',\n",
        " 'info',\n",
        " 'infty',\n",
        " 'inner',\n",
        " 'insert',\n",
        " 'int',\n",
        " 'int0',\n",
        " 'int16',\n",
        " 'int32',\n",
        " 'int64',\n",
        " 'int8',\n",
        " 'int_',\n",
        " 'int_asbuffer',\n",
        " 'intc',\n",
        " 'integer',\n",
        " 'interp',\n",
        " 'intersect1d',\n",
        " 'intp',\n",
        " 'invert',\n",
        " 'ipmt',\n",
        " 'irr',\n",
        " 'is_busday',\n",
        " 'isclose',\n",
        " 'iscomplex',\n",
        " 'iscomplexobj',\n",
        " 'isfinite',\n",
        " 'isfortran',\n",
        " 'isinf',\n",
        " 'isnan',\n",
        " 'isneginf',\n",
        " 'isposinf',\n",
        " 'isreal',\n",
        " 'isrealobj',\n",
        " 'isscalar',\n",
        " 'issctype',\n",
        " 'issubclass_',\n",
        " 'issubdtype',\n",
        " 'issubsctype',\n",
        " 'iterable',\n",
        " 'ix_',\n",
        " 'kaiser',\n",
        " 'kron',\n",
        " 'ldexp',\n",
        " 'left_shift',\n",
        " 'less',\n",
        " 'less_equal',\n",
        " 'lexsort',\n",
        " 'lib',\n",
        " 'linalg',\n",
        " 'linspace',\n",
        " 'little_endian',\n",
        " 'load',\n",
        " 'loads',\n",
        " 'loadtxt',\n",
        " 'log',\n",
        " 'log10',\n",
        " 'log1p',\n",
        " 'log2',\n",
        " 'logaddexp',\n",
        " 'logaddexp2',\n",
        " 'logical_and',\n",
        " 'logical_not',\n",
        " 'logical_or',\n",
        " 'logical_xor',\n",
        " 'logspace',\n",
        " 'long',\n",
        " 'longcomplex',\n",
        " 'longdouble',\n",
        " 'longfloat',\n",
        " 'longlong',\n",
        " 'lookfor',\n",
        " 'ma',\n",
        " 'mafromtxt',\n",
        " 'mask_indices',\n",
        " 'mat',\n",
        " 'math',\n",
        " 'matrix',\n",
        " 'matrixlib',\n",
        " 'max',\n",
        " 'maximum',\n",
        " 'maximum_sctype',\n",
        " 'may_share_memory',\n",
        " 'mean',\n",
        " 'median',\n",
        " 'memmap',\n",
        " 'meshgrid',\n",
        " 'mgrid',\n",
        " 'min',\n",
        " 'min_scalar_type',\n",
        " 'minimum',\n",
        " 'mintypecode',\n",
        " 'mirr',\n",
        " 'mod',\n",
        " 'modf',\n",
        " 'msort',\n",
        " 'multiply',\n",
        " 'nan',\n",
        " 'nan_to_num',\n",
        " 'nanargmax',\n",
        " 'nanargmin',\n",
        " 'nanmax',\n",
        " 'nanmean',\n",
        " 'nanmedian',\n",
        " 'nanmin',\n",
        " 'nanpercentile',\n",
        " 'nanstd',\n",
        " 'nansum',\n",
        " 'nanvar',\n",
        " 'nbytes',\n",
        " 'ndarray',\n",
        " 'ndenumerate',\n",
        " 'ndfromtxt',\n",
        " 'ndim',\n",
        " 'ndindex',\n",
        " 'nditer',\n",
        " 'negative',\n",
        " 'nested_iters',\n",
        " 'newaxis',\n",
        " 'newbuffer',\n",
        " 'nextafter',\n",
        " 'nonzero',\n",
        " 'not_equal',\n",
        " 'nper',\n",
        " 'npv',\n",
        " 'numarray',\n",
        " 'number',\n",
        " 'obj2sctype',\n",
        " 'object',\n",
        " 'object0',\n",
        " 'object_',\n",
        " 'ogrid',\n",
        " 'oldnumeric',\n",
        " 'ones',\n",
        " 'ones_like',\n",
        " 'outer',\n",
        " 'packbits',\n",
        " 'pad',\n",
        " 'partition',\n",
        " 'percentile',\n",
        " 'pi',\n",
        " 'piecewise',\n",
        " 'pkgload',\n",
        " 'place',\n",
        " 'pmt',\n",
        " 'poly',\n",
        " 'poly1d',\n",
        " 'polyadd',\n",
        " 'polyder',\n",
        " 'polydiv',\n",
        " 'polyfit',\n",
        " 'polyint',\n",
        " 'polymul',\n",
        " 'polynomial',\n",
        " 'polysub',\n",
        " 'polyval',\n",
        " 'power',\n",
        " 'ppmt',\n",
        " 'print_function',\n",
        " 'prod',\n",
        " 'product',\n",
        " 'promote_types',\n",
        " 'ptp',\n",
        " 'put',\n",
        " 'putmask',\n",
        " 'pv',\n",
        " 'r_',\n",
        " 'rad2deg',\n",
        " 'radians',\n",
        " 'random',\n",
        " 'rank',\n",
        " 'rate',\n",
        " 'ravel',\n",
        " 'ravel_multi_index',\n",
        " 'real',\n",
        " 'real_if_close',\n",
        " 'rec',\n",
        " 'recarray',\n",
        " 'recfromcsv',\n",
        " 'recfromtxt',\n",
        " 'reciprocal',\n",
        " 'record',\n",
        " 'remainder',\n",
        " 'repeat',\n",
        " 'require',\n",
        " 'reshape',\n",
        " 'resize',\n",
        " 'restoredot',\n",
        " 'result_type',\n",
        " 'right_shift',\n",
        " 'rint',\n",
        " 'roll',\n",
        " 'rollaxis',\n",
        " 'roots',\n",
        " 'rot90',\n",
        " 'round',\n",
        " 'round_',\n",
        " 'row_stack',\n",
        " 's_',\n",
        " 'safe_eval',\n",
        " 'save',\n",
        " 'savetxt',\n",
        " 'savez',\n",
        " 'savez_compressed',\n",
        " 'sctype2char',\n",
        " 'sctypeDict',\n",
        " 'sctypeNA',\n",
        " 'sctypes',\n",
        " 'searchsorted',\n",
        " 'select',\n",
        " 'set_numeric_ops',\n",
        " 'set_printoptions',\n",
        " 'set_string_function',\n",
        " 'setbufsize',\n",
        " 'setdiff1d',\n",
        " 'seterr',\n",
        " 'seterrcall',\n",
        " 'seterrobj',\n",
        " 'setxor1d',\n",
        " 'shape',\n",
        " 'short',\n",
        " 'show_config',\n",
        " 'sign',\n",
        " 'signbit',\n",
        " 'signedinteger',\n",
        " 'sin',\n",
        " 'sinc',\n",
        " 'single',\n",
        " 'singlecomplex',\n",
        " 'sinh',\n",
        " 'size',\n",
        " 'sometrue',\n",
        " 'sort',\n",
        " 'sort_complex',\n",
        " 'source',\n",
        " 'spacing',\n",
        " 'split',\n",
        " 'sqrt',\n",
        " 'square',\n",
        " 'squeeze',\n",
        " 'std',\n",
        " 'str',\n",
        " 'str_',\n",
        " 'string0',\n",
        " 'string_',\n",
        " 'subtract',\n",
        " 'sum',\n",
        " 'swapaxes',\n",
        " 'sys',\n",
        " 'take',\n",
        " 'tan',\n",
        " 'tanh',\n",
        " 'tensordot',\n",
        " 'test',\n",
        " 'testing',\n",
        " 'tile',\n",
        " 'timedelta64',\n",
        " 'trace',\n",
        " 'transpose',\n",
        " 'trapz',\n",
        " 'tri',\n",
        " 'tril',\n",
        " 'tril_indices',\n",
        " 'tril_indices_from',\n",
        " 'trim_zeros',\n",
        " 'triu',\n",
        " 'triu_indices',\n",
        " 'triu_indices_from',\n",
        " 'true_divide',\n",
        " 'trunc',\n",
        " 'typeDict',\n",
        " 'typeNA',\n",
        " 'typecodes',\n",
        " 'typename',\n",
        " 'ubyte',\n",
        " 'ufunc',\n",
        " 'uint',\n",
        " 'uint0',\n",
        " 'uint16',\n",
        " 'uint32',\n",
        " 'uint64',\n",
        " 'uint8',\n",
        " 'uintc',\n",
        " 'uintp',\n",
        " 'ulonglong',\n",
        " 'unicode',\n",
        " 'unicode0',\n",
        " 'unicode_',\n",
        " 'union1d',\n",
        " 'unique',\n",
        " 'unpackbits',\n",
        " 'unravel_index',\n",
        " 'unsignedinteger',\n",
        " 'unwrap',\n",
        " 'ushort',\n",
        " 'vander',\n",
        " 'var',\n",
        " 'vdot',\n",
        " 'vectorize',\n",
        " 'version',\n",
        " 'void',\n",
        " 'void0',\n",
        " 'vsplit',\n",
        " 'vstack',\n",
        " 'warnings',\n",
        " 'where',\n",
        " 'who',\n",
        " 'zeros',\n",
        " 'zeros_like']"
       ]
      }
     ],
     "prompt_number": 407
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "n dimentional array - basic object in all scientific python "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(x)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 408,
       "text": [
        "numpy.ndarray"
       ]
      }
     ],
     "prompt_number": 408
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Clicking the tab key gives us the attributes which we have for the n dmientional array like mean median max min etc."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x.ndim"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 409,
       "text": [
        "1"
       ]
      }
     ],
     "prompt_number": 409
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 410,
       "text": [
        "(42,)"
       ]
      }
     ],
     "prompt_number": 410
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Why dont we use a python list "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "l=[1,2,3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 411
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "l+l"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 412,
       "text": [
        "[1, 2, 3, 1, 2, 3]"
       ]
      }
     ],
     "prompt_number": 412
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is completely useless"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x=np.array([1,2,3])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 413
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 414,
       "text": [
        "array([1, 2, 3])"
       ]
      }
     ],
     "prompt_number": 414
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x+x"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 415,
       "text": [
        "array([2, 4, 6])"
       ]
      }
     ],
     "prompt_number": 415
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "suppose we have a array "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x=np.arange(-1,1,0.1)\n",
      "x"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 416,
       "text": [
        "array([ -1.00000000e+00,  -9.00000000e-01,  -8.00000000e-01,\n",
        "        -7.00000000e-01,  -6.00000000e-01,  -5.00000000e-01,\n",
        "        -4.00000000e-01,  -3.00000000e-01,  -2.00000000e-01,\n",
        "        -1.00000000e-01,  -2.22044605e-16,   1.00000000e-01,\n",
        "         2.00000000e-01,   3.00000000e-01,   4.00000000e-01,\n",
        "         5.00000000e-01,   6.00000000e-01,   7.00000000e-01,\n",
        "         8.00000000e-01,   9.00000000e-01])"
       ]
      }
     ],
     "prompt_number": 416
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s1=[math.sin(xx) for xx in x]\n",
      "s2=map(math.sin,x)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 417
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s2"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 418,
       "text": [
        "[-0.8414709848078965,\n",
        " -0.7833269096274833,\n",
        " -0.7173560908995228,\n",
        " -0.6442176872376911,\n",
        " -0.5646424733950355,\n",
        " -0.4794255386042031,\n",
        " -0.38941834230865063,\n",
        " -0.2955202066613397,\n",
        " -0.19866933079506138,\n",
        " -0.09983341664682835,\n",
        " -2.220446049250313e-16,\n",
        " 0.0998334166468278,\n",
        " 0.19866933079506097,\n",
        " 0.2955202066613394,\n",
        " 0.3894183423086502,\n",
        " 0.4794255386042026,\n",
        " 0.564642473395035,\n",
        " 0.6442176872376909,\n",
        " 0.7173560908995225,\n",
        " 0.7833269096274831]"
       ]
      }
     ],
     "prompt_number": 418
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 419,
       "text": [
        "[-0.8414709848078965,\n",
        " -0.7833269096274833,\n",
        " -0.7173560908995228,\n",
        " -0.6442176872376911,\n",
        " -0.5646424733950355,\n",
        " -0.4794255386042031,\n",
        " -0.38941834230865063,\n",
        " -0.2955202066613397,\n",
        " -0.19866933079506138,\n",
        " -0.09983341664682835,\n",
        " -2.220446049250313e-16,\n",
        " 0.0998334166468278,\n",
        " 0.19866933079506097,\n",
        " 0.2955202066613394,\n",
        " 0.3894183423086502,\n",
        " 0.4794255386042026,\n",
        " 0.564642473395035,\n",
        " 0.6442176872376909,\n",
        " 0.7173560908995225,\n",
        " 0.7833269096274831]"
       ]
      }
     ],
     "prompt_number": 419
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Both s1 and s2 gives the same output "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print type(s1),type(s2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<type 'list'> <type 'list'>\n"
       ]
      }
     ],
     "prompt_number": 420
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Thus we get lists here . To convert list into an ndarray :"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s3=np.array(s1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 421
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s3"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 422,
       "text": [
        "array([ -8.41470985e-01,  -7.83326910e-01,  -7.17356091e-01,\n",
        "        -6.44217687e-01,  -5.64642473e-01,  -4.79425539e-01,\n",
        "        -3.89418342e-01,  -2.95520207e-01,  -1.98669331e-01,\n",
        "        -9.98334166e-02,  -2.22044605e-16,   9.98334166e-02,\n",
        "         1.98669331e-01,   2.95520207e-01,   3.89418342e-01,\n",
        "         4.79425539e-01,   5.64642473e-01,   6.44217687e-01,\n",
        "         7.17356091e-01,   7.83326910e-01])"
       ]
      }
     ],
     "prompt_number": 422
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(s3)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 423,
       "text": [
        "numpy.ndarray"
       ]
      }
     ],
     "prompt_number": 423
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now to get directly yhe np array instead of getting a list at the first place we use the np functions ."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s4=np.sin(x)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 424
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s4"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 425,
       "text": [
        "array([ -8.41470985e-01,  -7.83326910e-01,  -7.17356091e-01,\n",
        "        -6.44217687e-01,  -5.64642473e-01,  -4.79425539e-01,\n",
        "        -3.89418342e-01,  -2.95520207e-01,  -1.98669331e-01,\n",
        "        -9.98334166e-02,  -2.22044605e-16,   9.98334166e-02,\n",
        "         1.98669331e-01,   2.95520207e-01,   3.89418342e-01,\n",
        "         4.79425539e-01,   5.64642473e-01,   6.44217687e-01,\n",
        "         7.17356091e-01,   7.83326910e-01])"
       ]
      }
     ],
     "prompt_number": 425
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(s4)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 426,
       "text": [
        "numpy.ndarray"
       ]
      }
     ],
     "prompt_number": 426
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.sin"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 427,
       "text": [
        "<ufunc 'sin'>"
       ]
      }
     ],
     "prompt_number": 427
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Everything is written in C , the numpy functions which makes thm really fast . Otherwise python is not so fast. We use the modules to make it fast ."
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now we will see that all the mathematical operations we do , they work for the numpy arrays ."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x=np.array([1.,2.,3.])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 428
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "In numpy all the elements have to be of the same type "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "y=np.array([1.,2,3])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 429
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print x,y"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[ 1.  2.  3.] [ 1.  2.  3.]\n"
       ]
      }
     ],
     "prompt_number": 430
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Thus automatic conversion takes place ."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x+y"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 431,
       "text": [
        "array([ 2.,  4.,  6.])"
       ]
      }
     ],
     "prompt_number": 431
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(x+y)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 432,
       "text": [
        "numpy.ndarray"
       ]
      }
     ],
     "prompt_number": 432
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "2*x"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 433,
       "text": [
        "array([ 2.,  4.,  6.])"
       ]
      }
     ],
     "prompt_number": 433
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "3*y"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 434,
       "text": [
        "array([ 3.,  6.,  9.])"
       ]
      }
     ],
     "prompt_number": 434
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We can as well use complex numbers multiplication "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "cc=np.array([1+2j,2+4j,4j])\n",
      "cc*2j"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 435,
       "text": [
        "array([-4.+2.j, -8.+4.j, -8.+0.j])"
       ]
      }
     ],
     "prompt_number": 435
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "To get the type of the elements in the nparray "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "cc.dtype"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 436,
       "text": [
        "dtype('complex128')"
       ]
      }
     ],
     "prompt_number": 436
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Visualizing the arrays we just built:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x=np.linspace(-2.*np.pi,2.*np.pi,101)\n",
      "y=np.sin(x)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 437
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Matplot lib works like matlab with pyplot being higher level functions "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(x,y)\n",
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nKQAAAABJRU5ErkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x11867fe90>"
       ]
      }
     ],
     "prompt_number": 438
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%matplotlib"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Using matplotlib backend: MacOSX\n"
       ]
      }
     ],
     "prompt_number": 439
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "% indicates that this is internal to ipython - not python . These are also called the magic functions ."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(x,np.sin(x))\n",
      "plt.plot(x,np.cos(x))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 440,
       "text": [
        "[<matplotlib.lines.Line2D at 0x11b520a10>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x11b520850>"
       ]
      }
     ],
     "prompt_number": 440
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Adding labels and legends in the plots : "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(x,np.sin(x),label=\"$\\sin(x)$\")\n",
      "plt.plot(x,np.cos(x),\"ro--\",label=\"$\\cos(x)$\")\n",
      "plt.xlabel(\"$x$\",size=20)\n",
      "plt.ylabel(\"$\\sin(x), \\cos(x)$\",size=20)\n",
      "plt.legend()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 441,
       "text": [
        "<matplotlib.legend.Legend at 0x110a567d0>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x11a823850>"
       ]
      }
     ],
     "prompt_number": 441
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We can then save our graph :"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.savefig(\"sincos.pdf\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "text": [
        "<matplotlib.figure.Figure at 0x11a5c42d0>"
       ]
      }
     ],
     "prompt_number": 442
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "!ls"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "noisy_quadratic.dat sincos.pdf\r\n"
       ]
      }
     ],
     "prompt_number": 443
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "But the file saved above is an empty pdf file . To save the above graph we need to use the savefig command with the graph commands "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(x,np.sin(x),label=\"$\\sin(x)$\")\n",
      "plt.plot(x,np.cos(x),\"ro--\",label=\"$\\cos(x)$\")\n",
      "plt.xlabel(\"$x$\",size=20)\n",
      "plt.ylabel(\"$\\sin(x),\\cos(x)$\",size=20)\n",
      "plt.legend()\n",
      "plt.savefig(\"sincos.pdf\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x11a0ed8d0>"
       ]
      }
     ],
     "prompt_number": 444
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We now get the required file in our folder tutorials "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now to get the same aspect ratio that is the same distance on both the axis we use the command plt.axis(\"equal\")"
     ]
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "QUESTION "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Try to plot the graphs for Log x and exp(x) and y=x to see check there symmetry about the line y=x . Also use the aspect ratio command to get the correct aspect ratio ."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x=np.arange(-10,10,1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 445
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.log?"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 446
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x=np.arange(-10,10,1)\n",
      "y1 = np.log(x)\n",
      "y2 = np.exp(x)\n",
      "y3=  x\n",
      "\n",
      "\n",
      "plt.plot(x, y1, 'y-',label=\"log(x)\")\n",
      "plt.plot(x, y2, 'b-',label=\"exp(x)\")\n",
      "plt.plot(x, y3, 'r-',label=\"x\")\n",
      "\n",
      "plt.ylim([-5,5])\n",
      "\n",
      "plt.xlabel(\"$x$\",size=20)\n",
      "plt.ylabel(\"Log(x),Exp(x)\",size=20)\n",
      "\n",
      "plt.legend()\n",
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x11a7bcd10>"
       ]
      }
     ],
     "prompt_number": 447
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Interactivity in Ipython "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def func(a):\n",
      "    print a**2"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 448
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "widgets.interact(func,a=(-5,5,0.001))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "1e-06\n"
       ]
      },
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 449,
       "text": [
        "<function __main__.func>"
       ]
      }
     ],
     "prompt_number": 449
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "The output of the function changes mathematically "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def sincos(a,b):\n",
      "    plt.plot(x,a*np.sin(x+b),label=\"$a \\sin(x) +b$\")\n",
      "    plt.plot(x,a*np.cos(x),\"ro--\",label=\"$a \\cos(x)$\")\n",
      "    \n",
      "    plt.xlabel(\"$x$\",size=20)\n",
      "    plt.ylabel(\"$\\sin(x),\\cos(x)$\",size=20)\n",
      "    plt.legend()\n",
      "    \n",
      "    plt.xlim(-2.*np.pi,2.*np.pi)\n",
      "    plt.ylim(-2,2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 450
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "widgets.interact(sincos,a=(-5,5,0.1),b=(-5,5,0.1))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAZUAAAEYCAYAAACUdWs9AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzsnXeYVOXVwH8HEFBRQEUUBUGwgAVRQSzgWugKdtHYIyFR\ngRA7JaDRKGoMguhnMGpUBBXBwC4iRZZiQVBAlA5SA4gKImUX2D3fH+/sujtzZ9uUO+X8nmeenbnv\nO/eeuzNzz31PFVXFMAzDMKJBJb8FMAzDMFIHUyqGYRhG1DClYhiGYUQNUyqGYRhG1DClYhiGYUQN\nUyqGYRhG1EhKpSIi9UVkhoh8JyLfikjvMPOGichKEVkkIi3iLadhGEa6UcVvASrIfqCvqi4UkRrA\nVyIyVVWXFkwQkc5AE1U9SUTOA14GWvskr2EYRlqQlCsVVd2iqgsDz3cBS4F6QdO6Av8JzJkL1BKR\nunEV1DAMI81ISqVSFBFpCLQA5gYNHQdsKPJ6I3B8fKQyDMNIT5JaqQRMX2OBPoEVS8iUoNdWk8Yw\nDCOGJKtPBRE5CPgAeFtVP/SYsgmoX+T18YFtwfsxRWMYhlEBVDX4xj05VyoiIsC/gSWqOjTMtAnA\nbYH5rYEdqrrVa6Kqej4GDRoUdiyZH6l4XnZOyfFIxXNK1fMq7ZzCkawrlQuBW4BvRGRBYFs/oAGA\nqr6iqpNEpLOIrAJ2A3f6I6phGEb6kJRKRVXnUIZVlqreFwdxDMMwjABJaf6KFxkZGX6LEBNS8bzs\nnJKDVDwnSM3zqug5SUm2sXRARDTd/weGYRjlRURQD0d9Upq/DMNIXVwcjpFIlOfG25SKYRgJh1kP\nEofyKnnzqRiGYRhRw5SKYRiGETVMqRiGYRhRw5SKYRiGETVMqRiGYRhRw5SKYRhGgvD999+XOL55\n82b27NkTJ2kqhikVI+rMyspiQIcODM7IYECHDszKyvJbJMNIeNasWcMXX3xR4pw6derwzDPPxEmi\nimF5KkZUmZWVxcd9+vDk6tWF2/oHnrft0sUvsQwj7uTn53PyySczdepUGjVqVOr8V155hSFDhpQ4\np0qVKnTp0oU333yT2267LVqiRhVbqRhRZcqwYcUUCsCTq1czdfhwnyQyDH+oVKkSzz77LMcfX3rD\n2UWLFpVpHkDLli2ZNm1aqfNGjBjhuT0/P58HHniASy65pEzHKy+2UjGiSpXcXM/tlXNy4iyJYfjP\n1VdfXaZ5mZmZXHXVVWXeb506dVi1ahVNmjQJO+fHH3/03F6pUiWaNWtGzZo1y3y88mArFSOqHKhW\nzXN7XvXqcZbEMOLHokWLGDlyJOPGjaNbt24ATJ8+nTPPPJNPP/2UN998kzp16jB9+nTGjBnDHXfc\nwbp16wrfP2/ePJo1a1bm4zVv3pyvvvqqwvLOmDGDiy++uMLvLwlTKkZUad+1K/0bNy62rd+JJ9Ku\nVy+fJDJSDZHoPCrKihUrGDhwIJMmTeLWW28lMzOTV199lY4dO3LNNddwxRVXAHDZZZfRokUL8vLy\nuO2222jatCn79u2je/funH322YwdO7Zwn3v27ClWY2vChAlkZWXxyCOPMGrUKG699VaWLVtWOF67\ndm02btxY4XOYOXMm69evZ9SoUQwdGq55bsUw85cRPRYsoO3gwfDEEwwcP57Ke/eSt3AhHbt3Nye9\nETX8rDW5e/dubrjhBrKzs6lVqxbPPfccrVq14pBDDuHcc8+lTZs29O3bt3B+pUq/3bdXrlyZU089\nFYCaNWuydu3awrG8vLzC5+vXr6dZs2Y0adKEv/71rzzyyCPUrFmTBg0aFM45+OCD2bdvXzHZli5d\nyptvvln4es6cOeQUMTu3adOGzp07s3LlSho3bswtt9wCQP369fnzn/8c4X/mN0ypGNFh82bo1g1e\nfpm2111H25493fYPP4THH4cnnojs9tAwEoBx48ZxxhlnUKtWLXJycti1axdHH300DRs2ZMmSJUya\nNIkePXowY8YM6tatG/L+ypUre+63SpXfLsUFymPr1q0cdthh1KpVq3D1U8Avv/zCEUccUWxb06ZN\neeqppwpfP/bYYwwaNCjkWHPmzKFL4CZv+fLlHH744WU8+7Jh5i8jcvbuhauugj/8Aa67ju3b4Zln\n4IUXgK5dIS8PJk3yW0rDiJgff/yR5s2bAzBt2jRat27N5MmTeemll6hRowa33norffr0YfPmzYAr\n4V+0jH/B8+DS/scccwy7du0CYNmyZSxatIhJkybRtm1bwDnyi7J58+YSnfQlsX37dk4//XQA3nrr\nLR588MEK7SccSatUROQ1EdkqIovDjGeIyC8isiDwGBBvGdMCVbjrLmjcmBXX9+fee+HEE2HBAhg8\nGHbtqQQDBrjVivXIMJKcm266iY0bN/LRRx+xbds2KlWqxPbt26levTqvvvoqo0aNYteuXZx11ll8\n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\n9h2b+QAAAABJRU5ErkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x11c7536d0>"
       ]
      }
     ],
     "prompt_number": 452
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Random numbers "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "These numbers are actually pseudo random numbers as random numbers cannot be really generated in the computer ."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x=np.linspace(-5,5,31)\n",
      "x+=0.5*random.rand(len(x))\n",
      "y=x**2 + 5*random.rand(len(x))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 167
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Random.rand() generates a random number from 0 to 1"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "random.rand()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 171,
       "text": [
        "0.6595361224564177"
       ]
      }
     ],
     "prompt_number": 171
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "To produce more random numbers , we use random.rand(n)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(x,y,'o')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 175,
       "text": [
        "[<matplotlib.lines.Line2D at 0x114052210>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nb5P0M0nfl3ReRPy4lUoCABrX0gSciDhk+yOS9mpuOOB1hDYALI/cJuAAAPKR+yJTtodt/9j2/bY/\nU/+M9Nj+mO3nbJ/Q7bp0ku2/zf7t7rH9ddsv6nad2mV7s+0Hbf+X7U90uz6dZPsU27fbfiD7eRvp\ndp3yYHuF7Wnbt3a7Lp1me43tm7Ofu31Zf+JRcg1u22+RdI6k10bEGZL+Ls/v6wbbp0jaKOl/ul2X\nHExIenVE/J6khyRd0uX6tKUPJo79RtJHI+LVkt4o6cMFu77Dtknap2KObtsl6ZsRcbqk10qq2QSd\n9x33ByV9Opuko4j4Rc7f1w1XS/qrblciDxExGRHPZS/vknRyN+vTAYWeOBYRj0XE3dnzpzX3Q//S\n7taqs2yfLOkdkr4gacmRF6nJ/qL9o4i4XprrS4yIX9U6Nu/gfqWkDbbvtF2x/fqcv29Z2X6npEcj\n4t5u12UZ/Lmkb3a7Em3qm4ljttdLOktzv3CL5O8lXSTpuXoHJuhUSb+w/UXb/2H787aPq3Vg28u6\n2p6UdFKNt3Zkn//iiHij7d+XdJOkV7T7ncupzvVdImnTwsOXpVIdtMT1bY+IW7Njdkj6dUT807JW\nrvOK+Kf1UWwfL+lmSduyO+9CsP3Hkh6PiGnbpW7XJwcrJb1O0kci4ge2r5F0saTLah3YlohYdEsR\n2x+U9PXsuB9kHXgviYgn2v3e5bLY9dk+Q3O/Ie+xLc01I/zI9hsi4vFlrGJblvr3kyTbf6a5P03f\ntiwVytdPJZ2y4PUpmrvrLgzbL5D0NUk3RsQt3a5Ph/2BpHNsv0PSgKQX2r4hIt7X5Xp1yqOa+wv+\nB9nrmzUX3EfJu6nkFklvlSTbr5J0bEqhvZSIuD8i1kbEqRFxqub+o78updCuJ1u69yJJ74yI2W7X\npwN+KOmVttfbPlbSeyR9o8t16hjP3UFcJ2lfRFzT7fp0WkRsj4hTsp+390r6ToFCWxHxmKSfZFkp\nSW+X9ECtY/PeAed6Sdfbvk/SryUV5j9yDUX8M3xc0rGSJrO/Kv49Ij7U3Sq1rg8mjp0taauke21P\nZ2WXRMSeLtYpT0X8mRuW9OXsxmJG0vtrHcQEHABIDLu8A0BiCG4ASAzBDQCJIbgBIDEENwAkhuAG\ngMQQ3ACQGIIbABLz/4a5RjE8Fd9TAAAAAElFTkSuQmCC\n",
       "text": [
        "<matplotlib.figure.Figure at 0x11442ca50>"
       ]
      }
     ],
     "prompt_number": 175
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Now we see how to make this data into a matrix "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.concatenate?"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 179
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Sequence of array_like\n",
      "    The arrays must have the same shape, except in the dimension\n",
      "    corresponding to `axis` (the first, by default)."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.concatenate((x,y),axis=0)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 182,
       "text": [
        "array([ -4.72318957,  -4.38909372,  -3.94883445,  -3.63571393,\n",
        "        -3.44264261,  -3.23771738,  -2.77838597,  -2.18741852,\n",
        "        -1.99807706,  -1.56263089,  -1.59801191,  -1.01977782,\n",
        "        -0.62910236,  -0.35280719,  -0.18692876,   0.3623589 ,\n",
        "         0.38482774,   1.09849271,   1.19269294,   1.5871401 ,\n",
        "         2.03939759,   2.00281945,   2.42976024,   3.14166396,\n",
        "         3.07174957,   3.80745137,   3.73204196,   4.37219082,\n",
        "         4.53246287,   5.14240908,   5.32944028,  26.0281356 ,\n",
        "        20.12821679,  19.64065817,  14.53719363,  14.49677676,\n",
        "        14.73463353,   8.68169126,   8.42498374,   6.97167298,\n",
        "         5.10008764,   5.52668507,   5.58343665,   1.32206929,\n",
        "         1.57936728,   1.77007549,   3.38456932,   3.8965736 ,\n",
        "         3.30283955,   4.28483811,   3.32687608,   7.24638451,\n",
        "         4.56774388,   7.41633936,  11.68906375,  12.56679949,\n",
        "        16.37927841,  15.81579533,  20.91236975,  24.0432533 ,\n",
        "        26.94626152,  32.79247556])"
       ]
      }
     ],
     "prompt_number": 182
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So we dont need this . We need to follow another function in numpy "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "z=np.c_[x,y]\n",
      "z"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 187,
       "text": [
        "array([[ -4.72318957,  26.0281356 ],\n",
        "       [ -4.38909372,  20.12821679],\n",
        "       [ -3.94883445,  19.64065817],\n",
        "       [ -3.63571393,  14.53719363],\n",
        "       [ -3.44264261,  14.49677676],\n",
        "       [ -3.23771738,  14.73463353],\n",
        "       [ -2.77838597,   8.68169126],\n",
        "       [ -2.18741852,   8.42498374],\n",
        "       [ -1.99807706,   6.97167298],\n",
        "       [ -1.56263089,   5.10008764],\n",
        "       [ -1.59801191,   5.52668507],\n",
        "       [ -1.01977782,   5.58343665],\n",
        "       [ -0.62910236,   1.32206929],\n",
        "       [ -0.35280719,   1.57936728],\n",
        "       [ -0.18692876,   1.77007549],\n",
        "       [  0.3623589 ,   3.38456932],\n",
        "       [  0.38482774,   3.8965736 ],\n",
        "       [  1.09849271,   3.30283955],\n",
        "       [  1.19269294,   4.28483811],\n",
        "       [  1.5871401 ,   3.32687608],\n",
        "       [  2.03939759,   7.24638451],\n",
        "       [  2.00281945,   4.56774388],\n",
        "       [  2.42976024,   7.41633936],\n",
        "       [  3.14166396,  11.68906375],\n",
        "       [  3.07174957,  12.56679949],\n",
        "       [  3.80745137,  16.37927841],\n",
        "       [  3.73204196,  15.81579533],\n",
        "       [  4.37219082,  20.91236975],\n",
        "       [  4.53246287,  24.0432533 ],\n",
        "       [  5.14240908,  26.94626152],\n",
        "       [  5.32944028,  32.79247556]])"
       ]
      }
     ],
     "prompt_number": 187
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Saving using the numpy module :"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.savetxt(\"noisy_quadratic.dat\",z)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 186
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "z.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 188,
       "text": [
        "(31, 2)"
       ]
      }
     ],
     "prompt_number": 188
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "z.mean()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 192,
       "text": [
        "5.8328018201637626"
       ]
      }
     ],
     "prompt_number": 192
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%cat noisy_quadratic.dat"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "-4.723189574158453752e+00 2.602813560295055950e+01\r\n",
        "-4.389093717802374783e+00 2.012821678832920469e+01\r\n",
        "-3.948834448701744826e+00 1.964065816695215716e+01\r\n",
        "-3.635713928100500425e+00 1.453719363073026827e+01\r\n",
        "-3.442642608573402541e+00 1.449677676452187747e+01\r\n",
        "-3.237717378330732920e+00 1.473463353074775739e+01\r\n",
        "-2.778385974245730861e+00 8.681691262717025737e+00\r\n",
        "-2.187418524083229787e+00 8.424983735602058488e+00\r\n",
        "-1.998077055215603082e+00 6.971672975962796670e+00\r\n",
        "-1.562630894858162200e+00 5.100087641765806978e+00\r\n",
        "-1.598011907721731184e+00 5.526685068927165823e+00\r\n",
        "-1.019777822641271925e+00 5.583436647842373368e+00\r\n",
        "-6.291023646243572021e-01 1.322069293878966656e+00\r\n",
        "-3.528071883102351647e-01 1.579367279406162172e+00\r\n",
        "-1.869287636299125643e-01 1.770075490976704469e+00\r\n",
        "3.623589042143862682e-01 3.384569321984320478e+00\r\n",
        "3.848277390564424638e-01 3.896573603379111628e+00\r\n",
        "1.098492711389465137e+00 3.302839551409604724e+00\r\n",
        "1.192692942773432296e+00 4.284838107933640394e+00\r\n",
        "1.587140100856018865e+00 3.326876076503885393e+00\r\n",
        "2.039397593159084643e+00 7.246384509840909871e+00\r\n",
        "2.002819445013721111e+00 4.567743883656305570e+00\r\n",
        "2.429760243485083571e+00 7.416339361632230620e+00\r\n",
        "3.141663957593792578e+00 1.168906375410696441e+01\r\n",
        "3.071749567460217101e+00 1.256679949493018711e+01\r\n",
        "3.807451374035245806e+00 1.637927840781818745e+01\r\n",
        "3.732041962508787947e+00 1.581579532881836059e+01\r\n",
        "4.372190819652692184e+00 2.091236975264109788e+01\r\n",
        "4.532462870554116563e+00 2.404325329732128225e+01\r\n",
        "5.142409076755208197e+00 2.694626151847664630e+01\r\n",
        "5.329440283144118773e+00 3.279247555773534373e+01\r\n"
       ]
      }
     ],
     "prompt_number": 193
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We can also change the format in which our data is stored :"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.savetxt(\"noisy_quadratic.dat\",z,fmt='%20.5f %20.5f')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 194
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%cat noisy_quadratic.dat"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "            -4.72319             26.02814\r\n",
        "            -4.38909             20.12822\r\n",
        "            -3.94883             19.64066\r\n",
        "            -3.63571             14.53719\r\n",
        "            -3.44264             14.49678\r\n",
        "            -3.23772             14.73463\r\n",
        "            -2.77839              8.68169\r\n",
        "            -2.18742              8.42498\r\n",
        "            -1.99808              6.97167\r\n",
        "            -1.56263              5.10009\r\n",
        "            -1.59801              5.52669\r\n",
        "            -1.01978              5.58344\r\n",
        "            -0.62910              1.32207\r\n",
        "            -0.35281              1.57937\r\n",
        "            -0.18693              1.77008\r\n",
        "             0.36236              3.38457\r\n",
        "             0.38483              3.89657\r\n",
        "             1.09849              3.30284\r\n",
        "             1.19269              4.28484\r\n",
        "             1.58714              3.32688\r\n",
        "             2.03940              7.24638\r\n",
        "             2.00282              4.56774\r\n",
        "             2.42976              7.41634\r\n",
        "             3.14166             11.68906\r\n",
        "             3.07175             12.56680\r\n",
        "             3.80745             16.37928\r\n",
        "             3.73204             15.81580\r\n",
        "             4.37219             20.91237\r\n",
        "             4.53246             24.04325\r\n",
        "             5.14241             26.94626\r\n",
        "             5.32944             32.79248\r\n"
       ]
      }
     ],
     "prompt_number": 195
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now suppose we have some data in our HDD and we want to load it using the numpy module : "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "zz=np.loadtxt(\"noisy_quadratic.dat\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 196
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is only gonna work if the data is in a nice format : Pandas is the solution for something which is more complicated :"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 198,
       "text": [
        "array([-4.72318957, -4.38909372, -3.94883445, -3.63571393, -3.44264261,\n",
        "       -3.23771738, -2.77838597, -2.18741852, -1.99807706, -1.56263089,\n",
        "       -1.59801191, -1.01977782, -0.62910236, -0.35280719, -0.18692876,\n",
        "        0.3623589 ,  0.38482774,  1.09849271,  1.19269294,  1.5871401 ,\n",
        "        2.03939759,  2.00281945,  2.42976024,  3.14166396,  3.07174957,\n",
        "        3.80745137,  3.73204196,  4.37219082,  4.53246287,  5.14240908,\n",
        "        5.32944028])"
       ]
      }
     ],
     "prompt_number": 198
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x[3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 199,
       "text": [
        "-3.6357139281005004"
       ]
      }
     ],
     "prompt_number": 199
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "z[3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 200,
       "text": [
        "array([ -3.63571393,  14.53719363])"
       ]
      }
     ],
     "prompt_number": 200
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "z[3,1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 202,
       "text": [
        "14.537193630730268"
       ]
      }
     ],
     "prompt_number": 202
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "z[3:5]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 203,
       "text": [
        "array([[ -3.63571393,  14.53719363],\n",
        "       [ -3.44264261,  14.49677676]])"
       ]
      }
     ],
     "prompt_number": 203
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "z[3:5,1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 204,
       "text": [
        "array([ 14.53719363,  14.49677676])"
       ]
      }
     ],
     "prompt_number": 204
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Tuple unpacking : "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "z.T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 206,
       "text": [
        "array([[ -4.72318957,  -4.38909372,  -3.94883445,  -3.63571393,\n",
        "         -3.44264261,  -3.23771738,  -2.77838597,  -2.18741852,\n",
        "         -1.99807706,  -1.56263089,  -1.59801191,  -1.01977782,\n",
        "         -0.62910236,  -0.35280719,  -0.18692876,   0.3623589 ,\n",
        "          0.38482774,   1.09849271,   1.19269294,   1.5871401 ,\n",
        "          2.03939759,   2.00281945,   2.42976024,   3.14166396,\n",
        "          3.07174957,   3.80745137,   3.73204196,   4.37219082,\n",
        "          4.53246287,   5.14240908,   5.32944028],\n",
        "       [ 26.0281356 ,  20.12821679,  19.64065817,  14.53719363,\n",
        "         14.49677676,  14.73463353,   8.68169126,   8.42498374,\n",
        "          6.97167298,   5.10008764,   5.52668507,   5.58343665,\n",
        "          1.32206929,   1.57936728,   1.77007549,   3.38456932,\n",
        "          3.8965736 ,   3.30283955,   4.28483811,   3.32687608,\n",
        "          7.24638451,   4.56774388,   7.41633936,  11.68906375,\n",
        "         12.56679949,  16.37927841,  15.81579533,  20.91236975,\n",
        "         24.0432533 ,  26.94626152,  32.79247556]])"
       ]
      }
     ],
     "prompt_number": 206
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "xx,yy=z.T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 207
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Another way to do so while inputting the file could be : "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "xxx,yyy=np.loadtxt(\"noisy_quadratic.dat\",unpack=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 208
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "xxx-xx"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 209,
       "text": [
        "array([ -4.25841546e-07,   3.71780237e-06,   4.44870174e-06,\n",
        "         3.92810050e-06,   2.60857340e-06,  -2.62166927e-06,\n",
        "        -4.02575427e-06,  -1.47591677e-06,  -2.94478440e-06,\n",
        "         8.94858162e-07,   1.90772173e-06,  -2.17735873e-06,\n",
        "         2.36462436e-06,  -2.81168976e-06,  -1.23637009e-06,\n",
        "         1.09578561e-06,   2.26094356e-06,  -2.71138947e-06,\n",
        "        -2.94277343e-06,  -1.00856019e-07,   2.40684092e-06,\n",
        "         5.54986279e-07,  -2.43485084e-07,  -3.95759379e-06,\n",
        "         4.32539783e-07,  -1.37403525e-06,  -1.96250879e-06,\n",
        "        -8.19652692e-07,  -2.87055412e-06,   9.23244792e-07,\n",
        "        -2.83144119e-07])"
       ]
      }
     ],
     "prompt_number": 209
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "zz.strides"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 211,
       "text": [
        "(16, 8)"
       ]
      }
     ],
     "prompt_number": 211
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Strides gives us that how much bytes we need to move in either direction to goto the next element "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "zz.T.strides"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 212,
       "text": [
        "(8, 16)"
       ]
      }
     ],
     "prompt_number": 212
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Literate Programming : "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We should know how to convert this ipython notebook into a pdf file ."
     ]
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Calculating eigenvalues of a random matrix "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "samples=random.randn(100000)\n",
      "#generating random numbers from a normal distribution "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 218
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Lets check whether they actually follow a normal distribution "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We are gonna calculate the histogram of this sample. How many of these numebrs fall in each little bin ."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "hist=np.histogram(samples,1000)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 285
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "hist"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 286,
       "text": [
        "(array([  1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
        "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
        "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
        "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
        "          0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,\n",
        "          0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,\n",
        "          0,   0,   0,   0,   0,   0,   2,   1,   0,   0,   0,   0,   0,\n",
        "          0,   0,   0,   0,   0,   0,   1,   1,   0,   0,   0,   0,   0,\n",
        "          0,   0,   1,   1,   0,   1,   0,   0,   0,   0,   2,   0,   1,\n",
        "          0,   1,   1,   2,   0,   1,   1,   1,   1,   1,   1,   0,   0,\n",
        "          2,   1,   1,   3,   3,   0,   1,   1,   1,   0,   0,   1,   0,\n",
        "          1,   0,   1,   1,   0,   1,   1,   0,   0,   2,   0,   0,   1,\n",
        "          2,   3,   1,   2,   0,   3,   2,   2,   1,   1,   2,   3,   1,\n",
        "          0,   2,   5,   3,   4,   2,   2,   4,   1,   4,   5,   0,   5,\n",
        "          0,   5,   2,   3,   0,   3,   1,   5,   1,   2,   4,   5,   5,\n",
        "          3,   4,   6,   3,   7,   5,   1,   4,  10,   5,   5,   5,   4,\n",
        "          5,   8,  10,   8,   8,   6,   5,   4,   6,   8,   6,   8,   8,\n",
        "          8,  11,   6,   5,   8,   6,   9,   9,  13,   8,   9,   8,  18,\n",
        "         13,  11,  13,   9,   8,  12,  16,  11,  18,   6,  19,  10,  12,\n",
        "          8,  11,  13,  18,  17,  21,  17,  17,  17,  19,  22,  17,  18,\n",
        "         19,  22,  17,  18,  28,  18,  20,  18,  24,  22,  19,  21,  19,\n",
        "         25,  25,  25,  24,  27,  19,  26,  25,  36,  26,  37,  34,  33,\n",
        "         33,  39,  29,  32,  36,  24,  25,  40,  41,  33,  31,  36,  40,\n",
        "         35,  40,  44,  42,  41,  46,  32,  51,  43,  53,  55,  44,  53,\n",
        "         58,  43,  53,  44,  47,  71,  51,  48,  58,  69,  62,  50,  53,\n",
        "         58,  78,  67,  60,  48,  66,  68,  71,  75,  74,  68,  76,  69,\n",
        "         81,  78,  87,  74,  75,  89,  93,  88,  87,  75,  81,  94,  71,\n",
        "         86,  93,  87,  96, 122,  92,  80, 111, 116, 102, 108, 115, 112,\n",
        "        126, 116, 138, 124, 117, 134, 130, 115, 129, 112, 125, 130, 131,\n",
        "        146, 134, 150, 131, 137, 128, 130, 143, 168, 151, 145, 142, 163,\n",
        "        142, 161, 142, 174, 175, 159, 173, 164, 165, 173, 172, 174, 162,\n",
        "        208, 176, 192, 190, 190, 177, 176, 179, 200, 203, 157, 178, 196,\n",
        "        199, 207, 180, 210, 227, 228, 207, 234, 208, 181, 205, 249, 242,\n",
        "        200, 234, 243, 219, 239, 230, 256, 275, 290, 262, 251, 271, 270,\n",
        "        229, 244, 273, 251, 241, 239, 258, 262, 259, 258, 278, 274, 246,\n",
        "        261, 280, 314, 247, 294, 279, 292, 297, 263, 280, 275, 299, 312,\n",
        "        299, 297, 263, 321, 311, 333, 255, 292, 320, 299, 308, 275, 297,\n",
        "        309, 321, 305, 327, 283, 325, 321, 335, 332, 348, 302, 336, 315,\n",
        "        328, 332, 339, 342, 338, 358, 347, 330, 313, 321, 348, 314, 323,\n",
        "        332, 345, 298, 315, 348, 349, 373, 321, 333, 393, 335, 335, 338,\n",
        "        358, 334, 359, 355, 343, 367, 353, 321, 349, 375, 382, 366, 364,\n",
        "        359, 340, 338, 348, 345, 367, 350, 365, 331, 323, 342, 348, 293,\n",
        "        357, 375, 379, 349, 324, 343, 349, 396, 353, 363, 323, 324, 366,\n",
        "        332, 343, 317, 349, 361, 316, 340, 341, 343, 338, 329, 342, 323,\n",
        "        353, 296, 312, 312, 297, 303, 354, 327, 343, 297, 316, 342, 326,\n",
        "        316, 343, 337, 320, 323, 321, 302, 311, 311, 304, 317, 295, 288,\n",
        "        305, 355, 288, 290, 295, 313, 269, 277, 275, 255, 332, 280, 284,\n",
        "        272, 263, 260, 285, 296, 306, 265, 286, 264, 260, 256, 274, 281,\n",
        "        249, 253, 254, 242, 241, 241, 253, 243, 243, 268, 255, 289, 218,\n",
        "        211, 242, 264, 220, 221, 218, 209, 235, 195, 196, 222, 232, 229,\n",
        "        225, 215, 207, 172, 198, 184, 213, 220, 187, 222, 206, 201, 195,\n",
        "        184, 162, 154, 215, 178, 154, 182, 176, 192, 188, 173, 184, 158,\n",
        "        182, 171, 155, 146, 181, 147, 164, 164, 153, 140, 128, 142, 129,\n",
        "        130, 135, 134, 146, 145, 139, 132, 116, 122, 129, 131, 141, 133,\n",
        "         97, 125, 116, 117, 121, 106, 124, 111, 113, 106, 107, 109, 109,\n",
        "        110, 111, 103, 116,  89,  97, 102, 102,  72,  93, 106,  80,  85,\n",
        "         81,  77,  82,  63,  74,  78,  64,  72,  74,  74,  72,  57,  66,\n",
        "         74,  71,  59,  69,  66,  49,  60,  66,  66,  51,  58,  60,  53,\n",
        "         44,  50,  64,  49,  50,  45,  41,  50,  43,  50,  44,  42,  57,\n",
        "         39,  41,  44,  43,  42,  40,  35,  31,  46,  47,  30,  32,  45,\n",
        "         29,  29,  39,  37,  23,  41,  32,  26,  26,  29,  17,  27,  31,\n",
        "         34,  20,  30,  25,  24,  28,  32,  20,  17,  17,  20,  23,  23,\n",
        "         32,  14,  12,  18,  16,  18,  17,  20,  15,  18,  13,  25,  12,\n",
        "         16,  16,  20,  15,   9,  15,  14,  11,  17,  17,  12,  12,  18,\n",
        "         11,  10,   8,  11,  14,  15,  11,   9,   5,   5,   9,   6,  11,\n",
        "          5,   9,  13,   4,  11,   5,  12,   8,  13,   6,  10,  11,   7,\n",
        "          6,   8,   7,   6,   6,   9,   3,   2,   3,   6,   4,   5,   3,\n",
        "          4,   4,   5,   5,   3,   3,   0,   4,   4,   3,   5,   2,   4,\n",
        "          4,   3,   5,   4,   3,   0,   3,   3,   1,   2,   5,   4,   5,\n",
        "          2,   6,   5,   4,   2,   3,   1,   1,   4,   6,   3,   0,   0,\n",
        "          4,   2,   1,   2,   1,   0,   1,   2,   0,   4,   0,   1,   2,\n",
        "          2,   1,   2,   1,   1,   1,   2,   1,   1,   1,   0,   3,   0,\n",
        "          1,   1,   0,   0,   0,   0,   1,   0,   0,   1,   1,   1,   0,\n",
        "          0,   0,   0,   0,   0,   0,   2,   0,   1,   0,   0,   0,   0,\n",
        "          0,   1,   2,   0,   0,   1,   0,   1,   0,   0,   1,   0,   0,\n",
        "          0,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
        "          0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1]),\n",
        " array([-4.71911368, -4.71032336, -4.70153305, ...,  4.05361691,\n",
        "         4.06240722,  4.07119754]))"
       ]
      }
     ],
     "prompt_number": 286
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "It is a tuple of 2 things , first is the bins in which each value falls and the second is the place on the x axis where the bin ends occur "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(hist[0])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 287,
       "text": [
        "1000"
       ]
      }
     ],
     "prompt_number": 287
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(hist[1])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 288,
       "text": [
        "1001"
       ]
      }
     ],
     "prompt_number": 288
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Clearly there will be 1001 values as for 1000 bins there will be 1001 boundary values "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now we just want to plot hist[0] values across the hist[1][:-1] values "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(hist[1][:-1],hist[0])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 289,
       "text": [
        "[<matplotlib.lines.Line2D at 0x11360efd0>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nAAAAAElFTkSuQmCC\n",
       "text": [
        "<matplotlib.figure.Figure at 0x1142ca050>"
       ]
      }
     ],
     "prompt_number": 289
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Question : "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Normalize the histogram curve so that the area under the curve is 1"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "For this we just need to use z=(x-mean(x))/std(x) and plot it against np.arange(-1,1,1000)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x=hist[0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 290
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(x)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 291,
       "text": [
        "numpy.ndarray"
       ]
      }
     ],
     "prompt_number": 291
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "z=(x-x.mean())/x.std()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 292
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "z.mean()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 293,
       "text": [
        "-5.6843418860808016e-17"
       ]
      }
     ],
     "prompt_number": 293
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is almost equal to 0 which is the mean of a standard normal distribution "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "z.std()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 294,
       "text": [
        "0.99999999999999989"
       ]
      }
     ],
     "prompt_number": 294
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Which is almost equal to 1 - again what is required for the standard normal distribution ."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print z.shape,type(z)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(1000,) <type 'numpy.ndarray'>\n"
       ]
      }
     ],
     "prompt_number": 295
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(hist[1][:-1],z)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 296,
       "text": [
        "[<matplotlib.lines.Line2D at 0x1149bb410>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nrkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x1142caf50>"
       ]
      }
     ],
     "prompt_number": 296
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "random.standard_normal(1000)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 297,
       "text": [
        "array([  9.14554118e-01,  -1.98477795e+00,  -5.07363736e-02,\n",
        "        -1.56708260e+00,  -8.10803468e-01,   1.06044605e+00,\n",
        "         2.36033013e-01,   6.49496178e-01,  -3.86701108e-01,\n",
        "        -8.85627975e-03,  -1.13720666e+00,   3.22133750e-01,\n",
        "         2.09815012e-01,   2.20814473e-01,  -1.80219400e-01,\n",
        "         4.12759639e-02,  -4.68935332e-01,   1.26320954e+00,\n",
        "         1.25189775e+00,  -1.82588152e+00,   1.13307862e+00,\n",
        "         9.50624158e-01,  -6.57644290e-01,  -1.04294836e+00,\n",
        "        -2.44003888e-01,  -1.58520868e-01,   1.10986265e+00,\n",
        "         4.13586877e-01,   1.05245660e+00,   1.42474017e+00,\n",
        "         4.70907667e-01,   6.51165186e-01,   1.39345067e-01,\n",
        "        -2.10309237e+00,  -1.90354681e-01,  -7.86058207e-01,\n",
        "         4.52932905e-02,   7.63668151e-01,  -6.65210923e-01,\n",
        "        -4.96792378e-01,  -1.73921980e-01,   3.08767796e-01,\n",
        "         8.08536609e-01,  -4.88918769e-01,  -1.82655183e-01,\n",
        "         7.94357639e-01,  -8.84486401e-01,  -5.54742435e-01,\n",
        "        -1.22267053e+00,   6.68989076e-01,   1.19445698e-01,\n",
        "         7.38404363e-01,  -3.86433543e-01,   8.18123593e-02,\n",
        "         2.94526708e-01,  -1.44956674e+00,   1.20756587e+00,\n",
        "        -2.29865892e+00,  -2.05028156e+00,  -2.77566730e+00,\n",
        "        -8.87394746e-01,   5.58783946e-01,   5.71954772e-01,\n",
        "        -1.35178911e+00,  -1.01345309e+00,   9.07448317e-01,\n",
        "        -2.29156017e-02,  -4.23474415e-01,  -9.10070115e-01,\n",
        "         1.89194616e+00,  -1.93017498e-02,   6.46244822e-01,\n",
        "        -1.91243535e+00,  -3.07613792e-01,  -9.26840878e-02,\n",
        "         1.58830303e+00,   5.98052738e-01,   7.32889841e-02,\n",
        "        -7.81077532e-02,   1.41869653e+00,  -5.54344426e-01,\n",
        "         1.82796148e-02,   3.60121231e-01,  -1.43597458e+00,\n",
        "         1.12499717e+00,   9.23384872e-01,  -4.35450707e-01,\n",
        "        -2.31796857e+00,  -2.39169088e-01,  -1.41750800e+00,\n",
        "         1.12401031e-01,  -1.01048434e-01,   2.29606382e+00,\n",
        "         4.63659119e-01,   1.28800182e+00,   4.39812555e-02,\n",
        "         5.16586759e-01,   3.46004175e-01,   1.47154534e+00,\n",
        "        -3.45454232e-01,  -8.59978019e-01,  -1.03913911e+00,\n",
        "         1.44395623e-01,  -8.92800250e-01,   1.68273369e+00,\n",
        "         8.72028584e-01,   3.47089115e-01,   1.67569724e-01,\n",
        "        -5.48640575e-01,  -9.98875928e-01,  -3.17311133e-02,\n",
        "         1.54874574e+00,   8.28036511e-01,  -5.03382742e-01,\n",
        "        -4.39987735e-01,   5.72398120e-01,  -1.76107243e+00,\n",
        "         3.47895956e-01,   2.45510484e-01,  -7.62301800e-01,\n",
        "        -1.00950400e+00,   4.41291936e-01,   1.26161012e+00,\n",
        "        -1.24118509e+00,  -1.18723137e+00,   1.05719441e+00,\n",
        "         1.17447531e-01,  -7.09252994e-01,   5.85003713e-01,\n",
        "         2.49090909e-01,   4.56516769e-01,   2.73610063e-01,\n",
        "        -8.64538456e-01,  -6.57813343e-01,   7.49632845e-01,\n",
        "         7.74840257e-01,   7.63562546e-01,  -2.42247611e-02,\n",
        "        -4.92381332e-01,   4.03540048e-01,   1.57641328e+00,\n",
        "         7.21991428e-01,  -2.65105901e-01,   3.64500873e-02,\n",
        "         8.29499454e-02,  -8.00053845e-01,   8.73515397e-01,\n",
        "         4.58228342e-01,   4.59656725e-02,   7.49343513e-01,\n",
        "         3.15689513e-01,   1.14823136e-01,   8.66472316e-01,\n",
        "        -4.14762446e-01,  -3.88720265e-01,  -1.95658977e+00,\n",
        "         1.37266155e+00,   2.29745519e+00,  -1.30486190e-01,\n",
        "        -3.65799610e-01,   9.47932768e-01,   1.40401823e-01,\n",
        "        -1.52450519e+00,   1.45288501e-01,   3.12370163e-02,\n",
        "        -1.78087147e-01,  -6.70530952e-01,  -2.28126951e-01,\n",
        "        -3.34072700e-02,   9.91055753e-01,  -5.46043162e-01,\n",
        "        -1.37568548e+00,   1.50081469e-02,   1.53027980e+00,\n",
        "         6.93040439e-01,  -1.35365723e-01,  -1.10231306e+00,\n",
        "         1.25265335e+00,   1.42114487e+00,  -1.37062031e+00,\n",
        "         1.49306464e+00,  -1.23945966e+00,  -1.96973133e-01,\n",
        "        -3.33204017e-01,  -2.32307789e+00,  -1.87510572e+00,\n",
        "         4.63234322e-02,  -3.94620182e-01,   9.46340567e-01,\n",
        "         1.36521317e+00,  -5.20230357e-01,  -2.06660722e-01,\n",
        "        -1.55592133e+00,   5.69310828e-01,   8.32589120e-01,\n",
        "         4.87842408e-02,   2.11934747e+00,  -7.83101711e-01,\n",
        "         1.00585072e+00,  -3.94598938e-01,  -1.53766108e+00,\n",
        "        -2.03315075e-01,  -8.05989012e-01,   2.01843820e+00,\n",
        "        -7.33741747e-01,   7.41192308e-01,  -4.70564871e-02,\n",
        "        -3.68232735e-01,  -6.99861396e-01,   3.64382222e-01,\n",
        "         4.41368699e-01,   3.57741765e-01,   2.29313461e+00,\n",
        "         8.80464814e-01,  -3.09326899e+00,  -8.25123829e-01,\n",
        "         5.39865410e-01,  -4.27588016e-01,  -6.63052238e-03,\n",
        "        -7.93413888e-01,  -6.41698602e-01,  -4.89351295e-01,\n",
        "        -7.11063188e-01,   3.65252408e-01,   6.05377920e-01,\n",
        "        -1.13227365e+00,   1.83951970e+00,  -2.50408968e-01,\n",
        "        -2.69079093e+00,   1.80058526e+00,  -3.43172352e-02,\n",
        "         1.42966522e+00,   1.25119358e+00,   8.35075300e-01,\n",
        "         1.54509654e-01,  -4.21491961e-01,  -5.69533295e-01,\n",
        "         4.04805780e-01,  -1.63206922e+00,   8.83313415e-01,\n",
        "         7.67540424e-01,   1.28421883e-01,  -1.66982077e+00,\n",
        "        -4.10037486e-01,  -6.99095058e-01,   8.59300115e-01,\n",
        "        -1.18705327e-01,   5.78042774e-01,  -2.74442578e-01,\n",
        "         1.43804102e+00,  -1.13786827e+00,   9.91218663e-01,\n",
        "        -1.68888674e+00,   1.07566789e+00,  -4.30608582e-01,\n",
        "         2.18081925e+00,  -4.26365681e-01,   6.52739889e-01,\n",
        "        -2.14269447e+00,  -3.86838413e-01,   1.06383505e+00,\n",
        "         1.12841566e-01,  -1.05694480e+00,  -1.39040865e+00,\n",
        "         9.05062490e-01,  -4.98833697e-02,  -1.41153927e+00,\n",
        "         5.70744172e-01,  -5.42133853e-01,  -8.22541324e-02,\n",
        "        -1.71791812e-01,  -5.00155591e-01,   4.87087548e-01,\n",
        "        -4.40522203e-01,   1.79389406e+00,  -2.23122105e+00,\n",
        "        -2.33701230e-01,   1.42532752e+00,   1.11402939e-01,\n",
        "        -1.09778014e+00,   5.09069560e-02,   1.14582161e+00,\n",
        "        -6.24056296e-01,   1.03363914e+00,   1.45474427e+00,\n",
        "         9.66372962e-01,  -3.06621110e-01,  -9.22842227e-01,\n",
        "        -1.58681926e-02,  -2.64532345e+00,  -7.57338323e-01,\n",
        "        -7.02937583e-01,  -1.19620307e+00,  -1.83470398e+00,\n",
        "        -1.78545684e-01,  -1.04303790e+00,   3.09908329e-01,\n",
        "         1.39598771e+00,  -8.13957475e-01,   4.26391534e-01,\n",
        "         1.68100352e-01,  -7.71682171e-01,   8.53326523e-02,\n",
        "        -8.25326719e-01,  -6.51387874e-01,   5.60633906e-01,\n",
        "         6.36096318e-01,   2.03054500e+00,   6.47655105e-01,\n",
        "         1.78527414e+00,  -1.12076003e+00,   3.63150994e-01,\n",
        "        -9.47390825e-01,   4.58911000e-01,   9.43605860e-02,\n",
        "        -1.52101616e+00,   1.08839708e+00,  -4.15671078e-01,\n",
        "        -1.40305100e+00,   6.11432644e-01,   3.03601740e-01,\n",
        "         1.38710380e+00,  -6.26220693e-01,   7.96017828e-02,\n",
        "         1.68953009e+00,   3.89355769e-01,  -8.65846024e-01,\n",
        "         1.37467080e+00,   9.20901676e-01,  -1.73904930e+00,\n",
        "         1.27655136e+00,   1.80723333e+00,   1.54253645e-01,\n",
        "        -1.95382100e+00,  -1.52954225e+00,   2.16907110e+00,\n",
        "        -6.11301450e-01,  -7.48235860e-02,   1.54696187e-01,\n",
        "        -5.18630672e-01,   1.15517615e+00,   2.07010584e+00,\n",
        "        -9.20264968e-01,   2.59289900e+00,   4.27296746e-01,\n",
        "        -7.70801521e-01,   1.35614514e+00,   5.12747146e-01,\n",
        "         9.54033539e-01,  -1.26982992e+00,  -1.36788386e-01,\n",
        "         1.10037918e+00,   1.39832168e+00,  -8.68604125e-01,\n",
        "         3.96368397e-02,  -3.96333808e-01,   2.85817516e-01,\n",
        "         3.55824969e-01,  -7.19479814e-02,   1.12583553e-01,\n",
        "        -1.11522664e+00,  -5.90169513e-01,  -3.68784879e-01,\n",
        "        -9.97925061e-02,  -2.93486540e-01,   2.87626356e-01,\n",
        "         3.48970843e-01,   6.82026419e-01,  -1.54150688e+00,\n",
        "        -9.29784625e-01,  -1.43851719e-01,  -2.53821141e+00,\n",
        "        -1.46481577e+00,   4.78235735e-01,   1.30966565e-01,\n",
        "         5.51845176e-01,   4.89224356e-02,   6.68884316e-02,\n",
        "        -9.17777383e-01,  -2.52901692e-03,  -1.29612537e-01,\n",
        "        -8.93046795e-01,  -6.50017120e-01,   5.26011961e-01,\n",
        "        -8.61164975e-01,   1.93037999e-01,   1.45249804e+00,\n",
        "         1.01066006e+00,   8.62498199e-01,   2.46403276e-01,\n",
        "        -4.08116075e-01,  -4.50073922e-02,   1.11840363e+00,\n",
        "        -5.69411116e-01,  -7.29834448e-01,   9.08966323e-01,\n",
        "        -3.21579664e-01,   2.59004222e-01,  -1.90145930e-01,\n",
        "         4.02739158e-01,  -1.04401008e+00,  -1.08156100e+00,\n",
        "        -3.63774998e-01,   1.50975296e-01,   5.74657669e-01,\n",
        "         1.16750382e+00,  -1.24068108e+00,   3.37903876e-01,\n",
        "        -1.72612913e+00,   1.80689222e-01,  -2.93350113e-01,\n",
        "         9.81211363e-01,   7.02962474e-02,   1.24605240e+00,\n",
        "        -5.20957105e-01,  -2.44397064e-01,  -1.36007088e+00,\n",
        "         1.02022960e+00,   1.08003046e+00,  -1.26340875e+00,\n",
        "         3.06728210e-01,   4.83454815e-01,  -2.71273453e-01,\n",
        "         8.25648248e-01,   2.93590255e-01,   1.15872462e+00,\n",
        "         7.17937229e-01,  -1.69081796e+00,   2.04974442e-01,\n",
        "        -4.41509110e-01,   1.32419232e+00,  -2.58466199e-01,\n",
        "        -6.62199652e-01,  -6.52037058e-02,  -9.55392814e-01,\n",
        "         8.98073524e-01,  -5.21665480e-01,  -1.37111451e+00,\n",
        "        -8.49406566e-01,  -7.80656370e-01,   7.40840135e-01,\n",
        "        -1.74598710e+00,  -1.66253430e+00,  -4.96439697e-01,\n",
        "         9.73205805e-01,  -1.79666044e+00,  -9.89844799e-01,\n",
        "        -6.75438934e-01,  -5.19858200e-01,   5.66221701e-01,\n",
        "         2.67563887e+00,   1.24945909e-01,   2.32389238e-01,\n",
        "        -1.16013170e+00,   9.29388377e-01,   1.64687026e+00,\n",
        "        -1.32526206e-02,  -1.09982578e+00,   3.82325503e-01,\n",
        "        -6.02511176e-01,  -8.17236300e-01,  -2.03592060e-01,\n",
        "        -6.49834460e-01,  -1.00678475e+00,   1.68891651e-01,\n",
        "         9.77363766e-01,  -3.21186358e+00,  -1.18813629e+00,\n",
        "        -8.30676765e-01,  -2.29380581e+00,   1.82894441e-01,\n",
        "        -1.68612771e+00,  -2.09259613e-01,   5.63402418e-02,\n",
        "         1.04399185e+00,   3.11703863e-01,   2.49053373e+00,\n",
        "        -9.64722240e-01,  -1.55733486e-01,   1.11362915e-01,\n",
        "        -1.13061058e-01,   1.95376055e-01,  -7.98473153e-01,\n",
        "         1.29099982e+00,   2.49183488e+00,  -1.33850051e+00,\n",
        "         1.47589361e+00,  -3.67060903e-01,   2.05322096e+00,\n",
        "         1.02204755e+00,   2.43866474e+00,  -9.96103597e-01,\n",
        "         7.38524980e-01,   7.05823482e-01,  -4.70964333e-01,\n",
        "        -2.29517164e-01,  -1.29803762e+00,   4.10938088e-01,\n",
        "         5.21840329e-01,   4.99514764e-01,  -3.63702687e-01,\n",
        "        -3.30928569e-01,   8.11349265e-01,   8.87051102e-01,\n",
        "        -3.46758092e-01,  -1.34097936e+00,   4.37108983e-01,\n",
        "         1.78063592e+00,  -8.80122579e-01,  -8.26972416e-01,\n",
        "         6.81304448e-01,  -6.52494507e-01,  -9.13609797e-01,\n",
        "        -3.84824022e-02,  -1.03004752e-01,   1.47343658e+00,\n",
        "         9.67853592e-01,   1.49958111e+00,   6.27134867e-01,\n",
        "         2.23114029e-01,   1.35454633e+00,  -1.22170342e+00,\n",
        "         2.01390253e+00,   5.25063208e-01,   9.85459596e-01,\n",
        "         7.10250356e-01,  -5.12555277e-01,   7.78601790e-01,\n",
        "         1.35634254e-01,   1.05923885e+00,  -1.22335555e+00,\n",
        "         1.30750512e-01,  -7.57201024e-02,   4.19283408e-01,\n",
        "        -2.05889215e-01,  -3.72123977e-01,   2.70144590e-01,\n",
        "         9.67498493e-01,   6.65346983e-01,  -1.27666680e-01,\n",
        "        -7.79354749e-01,   6.50235650e-01,  -1.75467293e+00,\n",
        "         1.20913824e-01,   4.03553219e-01,   1.55244671e-01,\n",
        "        -9.12909484e-01,  -5.48287760e-01,  -9.29790306e-01,\n",
        "         3.98724936e-01,  -1.05862877e+00,  -6.92317481e-01,\n",
        "        -9.50588588e-01,  -3.68756590e-01,   1.89567898e-01,\n",
        "        -7.64411717e-01,  -6.24814936e-01,  -6.45054931e-01,\n",
        "        -7.86570202e-02,   5.85964206e-01,   2.06449416e-01,\n",
        "         1.44468335e+00,  -4.55178919e-01,   7.76314194e-01,\n",
        "        -1.05663361e-01,  -5.91983775e-03,   1.11010663e+00,\n",
        "        -1.62063837e+00,  -3.52507325e-02,   3.33116803e-01,\n",
        "         8.68449730e-01,  -3.61151226e-01,  -1.39640790e+00,\n",
        "         6.28005802e-01,   9.29204096e-01,   1.37479260e+00,\n",
        "         6.42879718e-01,  -9.00087439e-02,  -1.91291100e+00,\n",
        "        -1.26799888e+00,  -5.43956488e-01,  -3.99155864e-01,\n",
        "        -1.13744877e+00,  -2.31468641e+00,  -5.63938408e-01,\n",
        "         5.12118966e-02,   3.66434396e+00,   2.63244795e-01,\n",
        "         3.28607742e-01,   2.62701128e-01,  -1.55391624e-01,\n",
        "         9.77078329e-02,  -7.87698326e-01,   5.56194465e-01,\n",
        "         1.18585160e+00,  -6.07638072e-01,  -6.21996735e-01,\n",
        "        -3.29785513e-01,  -9.93474782e-01,  -9.92870486e-01,\n",
        "        -1.34963070e+00,   3.90676834e-02,   4.37383336e-01,\n",
        "         9.27459382e-01,   6.18186907e-01,   8.98390922e-01,\n",
        "         6.79027199e-02,   1.39983845e-01,  -9.96597715e-01,\n",
        "        -1.53523074e+00,  -3.78672453e-01,   8.00757518e-01,\n",
        "        -7.43183118e-01,   9.37549920e-01,   1.75328808e+00,\n",
        "        -1.26031602e+00,   6.05786554e-01,  -1.40265555e+00,\n",
        "         1.98024802e+00,   1.33250659e-01,   1.03520649e+00,\n",
        "        -2.43648600e-03,   3.17007815e-01,  -1.59959973e-01,\n",
        "         6.15850309e-01,   2.30454557e-01,   4.42347059e-01,\n",
        "         3.46792417e-01,   2.56861006e-01,   6.78913139e-01,\n",
        "        -7.98098831e-01,   5.52888855e-01,  -1.04646466e+00,\n",
        "        -1.29843032e+00,  -7.21929170e-01,  -8.90536213e-01,\n",
        "         2.68455493e-02,   9.64718390e-02,  -1.06423770e+00,\n",
        "        -1.86256223e+00,   6.15362689e-01,  -4.00089013e-01,\n",
        "        -1.70722400e-01,   2.03704624e+00,   5.21370699e-01,\n",
        "        -8.84668117e-01,  -7.79905099e-01,  -1.24075043e+00,\n",
        "        -5.82285137e-01,  -1.21036259e+00,  -5.04673333e-01,\n",
        "        -1.73098498e+00,   3.85240772e-01,  -1.36768462e+00,\n",
        "        -8.15755831e-01,  -1.09742096e-01,  -2.34027624e+00,\n",
        "        -1.57432049e+00,   1.64858673e+00,   1.44697440e+00,\n",
        "        -4.74007942e-02,   6.99460110e-02,   3.56982263e-01,\n",
        "         1.07521335e+00,  -7.08033383e-01,   1.67243696e-01,\n",
        "         2.06934783e-01,   9.28135280e-01,   3.10435630e-01,\n",
        "        -1.11298551e+00,  -6.00148813e-01,   2.01563826e+00,\n",
        "        -1.95308448e+00,   1.13768192e-01,   9.76224772e-01,\n",
        "         1.24488426e+00,   2.38216890e+00,  -3.44350916e-02,\n",
        "        -7.40802536e-01,   2.03907542e-01,  -1.67103486e+00,\n",
        "        -6.49578330e-01,  -2.74449995e-01,   1.11377069e+00,\n",
        "        -9.03882012e-01,  -2.49228045e-01,  -9.60365879e-01,\n",
        "        -1.67689659e+00,   4.73366175e-01,   1.77919343e+00,\n",
        "         3.19972943e-01,  -2.95002500e-01,   7.75070906e-01,\n",
        "        -9.29344361e-01,  -8.51280302e-01,  -1.75222564e+00,\n",
        "         2.45731312e-02,  -8.32957838e-01,   6.89121170e-01,\n",
        "         3.14285476e-01,   1.03295488e+00,  -6.41041961e-01,\n",
        "        -8.34458018e-02,  -1.11889219e+00,   1.20166807e-01,\n",
        "        -9.38981219e-01,   2.29452370e-01,   3.92053572e-02,\n",
        "        -7.37306176e-01,  -5.33240842e-01,   1.05387317e+00,\n",
        "         1.07854551e+00,  -1.45715445e+00,  -6.89642505e-01,\n",
        "         1.87119238e-01,   4.22138760e-01,   6.67648460e-01,\n",
        "        -1.66178433e+00,   1.22983052e+00,   3.67353918e-01,\n",
        "        -8.79782396e-01,  -3.09237679e-01,   1.84085754e-01,\n",
        "         1.01825527e+00,   8.54977485e-01,  -3.87004433e-01,\n",
        "         1.13330432e+00,   2.73241804e-01,   5.33032314e-01,\n",
        "        -2.20502945e-01,   2.26211136e-02,  -3.97658160e-03,\n",
        "        -8.55040683e-01,   3.22224397e-01,   1.15916558e+00,\n",
        "        -1.37393561e+00,  -7.65022401e-01,  -3.28784563e-01,\n",
        "        -6.96007426e-01,  -8.21244786e-01,  -7.95777093e-01,\n",
        "        -4.67591981e-01,   3.98637733e-01,   1.41891164e-01,\n",
        "        -8.48796181e-01,   1.85408404e+00,   7.37779224e-01,\n",
        "        -1.75569702e+00,  -1.63785132e-01,  -1.58489145e+00,\n",
        "         1.59549553e-01,   2.73065191e-01,   1.93281740e-01,\n",
        "         5.47326846e-01,   6.41779237e-01,  -1.60499602e+00,\n",
        "        -9.35728130e-01,  -1.35821981e+00,  -9.65854219e-01,\n",
        "        -1.95348044e-01,   1.95945779e-01,  -5.82002305e-01,\n",
        "         2.09461068e-01,  -3.05310070e-01,  -8.51008537e-02,\n",
        "         8.88566049e-01,  -2.16646706e+00,   1.44273273e+00,\n",
        "        -4.95544520e-01,  -6.63396674e-01,   1.47646151e+00,\n",
        "         4.17365264e-01,   9.51537946e-02,  -6.83587944e-01,\n",
        "        -1.23579287e-01,  -6.69821164e-01,   3.87412274e-01,\n",
        "         5.14534839e-01,   9.02825538e-02,  -2.32767439e-01,\n",
        "         7.52735527e-01,   4.05112132e-01,   4.10039855e-01,\n",
        "         6.80152536e-01,   4.87922635e-01,   2.24027157e-01,\n",
        "         7.44550492e-01,  -1.62047054e+00,  -1.29604278e+00,\n",
        "        -9.00569150e-01,   8.52372967e-01,   1.95758558e+00,\n",
        "         6.21067891e-01,  -3.58761194e-01,   3.17865607e-01,\n",
        "        -7.06484497e-02,   6.21650445e-02,  -5.29950885e-01,\n",
        "        -2.27649189e-01,   6.07986269e-01,   1.31992044e+00,\n",
        "         1.89819883e+00,  -1.41263278e+00,  -1.52352218e+00,\n",
        "         8.34469394e-01,   1.22909626e+00,  -1.35666020e+00,\n",
        "        -1.27856971e+00,  -1.29588779e+00,  -2.02036748e+00,\n",
        "        -2.20924050e-01,  -1.75107391e+00,  -2.53534096e-01,\n",
        "        -9.00926365e-02,   9.29741859e-02,   5.57505016e-01,\n",
        "        -1.55765092e-01,   8.98860695e-01,   3.22458745e-01,\n",
        "        -8.32972757e-01,   6.63196220e-01,   2.55153262e-01,\n",
        "         2.51684453e-01,   6.24966996e-01,  -7.35233375e-01,\n",
        "        -1.20122520e+00,  -4.57721372e-01,  -2.41433032e-01,\n",
        "        -3.93972354e-01,  -4.14639096e-01,   2.20366838e-01,\n",
        "        -1.88042345e+00,  -4.94318093e-01,  -3.48761407e-01,\n",
        "         1.20488839e+00,   1.43142878e-01,  -9.63088500e-01,\n",
        "         2.20002697e+00,  -5.32093634e-01,  -6.50741346e-01,\n",
        "        -7.29933375e-01,   1.41587423e+00,   2.00595876e-01,\n",
        "         4.09575402e-02,  -2.02105718e+00,   1.42075726e+00,\n",
        "        -1.50511343e-03,   1.76418485e+00,   1.96390999e-02,\n",
        "         6.11925830e-01,   5.22603443e-01,  -1.38614746e+00,\n",
        "         5.07778402e-01,   5.97682963e-02,   7.23457642e-01,\n",
        "        -3.80593211e-01,   1.06909961e+00,   6.02791154e-01,\n",
        "         1.73603587e+00,  -1.36306529e+00,   2.60085987e-02,\n",
        "        -1.11742146e+00,  -1.64640818e+00,   1.34343603e+00,\n",
        "        -9.03647347e-01,   8.58766993e-01,  -8.11294704e-02,\n",
        "         1.46714148e+00,   9.84318751e-01,   7.22822877e-01,\n",
        "        -3.67755179e-01,  -9.21527350e-01,   4.14425540e-01,\n",
        "        -4.15278972e-01,   3.98495225e-01,  -2.62441953e-02,\n",
        "         1.44258080e+00,   3.09962790e-01,  -2.08747987e+00,\n",
        "        -1.00341900e+00,  -1.99141559e+00,  -4.71342729e-01,\n",
        "        -1.25945931e+00,   4.76320601e-01,  -9.44285788e-01,\n",
        "         9.35870189e-01,   2.85043038e-01,   7.92595128e-01,\n",
        "        -4.62753900e-01,   1.88936950e-01,   6.72718016e-01,\n",
        "         1.03093546e+00,  -1.75519615e+00,  -1.03249606e-01,\n",
        "        -1.00693940e+00,  -1.23382553e+00,   1.05244743e+00,\n",
        "        -6.27158241e-01,   5.07422308e-01,   1.71935610e-01,\n",
        "         6.02971266e-01,   7.02131539e-02,   6.07175175e-01,\n",
        "        -1.55146565e-01,   1.12706662e+00,  -8.45514972e-01,\n",
        "        -9.95007431e-01,   1.48970960e+00,   2.05043595e+00,\n",
        "        -2.01157476e+00,  -2.13927558e+00,   8.34270075e-01,\n",
        "         4.28325032e-01,   8.00146502e-01,  -6.86381224e-01,\n",
        "         3.48913595e-01,  -1.64573426e+00,  -1.13146226e-01,\n",
        "        -1.72695837e+00,  -1.62421650e+00,   4.99585997e-01,\n",
        "         4.23532665e-01,  -8.90992593e-01,  -8.19470454e-01,\n",
        "         1.68032469e+00,   4.85412933e-01,  -8.37736257e-02,\n",
        "         9.41394145e-01,   7.28864083e-01,   4.79106170e-01,\n",
        "        -1.33746527e-01,   1.52030663e+00,   1.09732264e+00,\n",
        "         8.17282774e-01,  -2.80023411e-01,   4.32366258e-02,\n",
        "        -3.42415066e-01,  -3.93065689e-01,   1.80237006e-01,\n",
        "         1.63801236e+00,   1.27333644e+00,  -6.79933950e-01,\n",
        "        -1.31240744e-01,  -1.54161493e-01,   8.48854095e-01,\n",
        "         6.31135409e-01,   5.64100459e-01,  -3.21274343e-01,\n",
        "        -1.17342681e+00,  -7.52854877e-01,  -1.56474053e-01,\n",
        "        -4.11087917e-01,   2.22092129e+00,   6.32751130e-01,\n",
        "        -2.66945428e-03,   2.94115984e-01,   7.48762714e-01,\n",
        "         4.49323492e-01,   7.29762623e-01,  -1.06110753e+00,\n",
        "         8.92893914e-01,   8.59753542e-01,  -2.01848941e+00,\n",
        "         6.97604353e-01,  -1.78124816e+00,  -5.82507341e-02,\n",
        "        -1.11859493e+00,   9.89890291e-01,  -3.05730576e-01,\n",
        "         8.54221137e-01,  -2.16525302e-01,   1.00746845e-02,\n",
        "        -1.49340902e+00,  -5.61643494e-01,   4.00998615e-02,\n",
        "        -4.43952728e-01,   3.76009214e-01,  -1.30203989e-01,\n",
        "         9.45125851e-02,   1.23324801e+00,  -1.69800441e+00,\n",
        "         9.00174893e-01,  -4.14030410e-02,   8.59890192e-01,\n",
        "        -9.18894117e-01,  -2.65642152e-01,  -1.37743183e+00,\n",
        "         6.38521057e-01,  -1.06691093e-01,  -1.72039457e+00,\n",
        "        -1.06109410e+00,   4.71685823e-01,  -1.04478758e+00,\n",
        "        -3.94499734e-01,  -4.81651205e-01,   1.17596690e-03,\n",
        "        -4.02072506e-01,  -6.64242330e-01,  -7.40818961e-01,\n",
        "        -1.84045600e-01])"
       ]
      }
     ],
     "prompt_number": 297
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now normalizing the random sample: "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "counts=hist[0].copy()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 300
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "counts=counts/counts.sum()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 302
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "counts"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 303,
       "text": [
        "array([  1.00000000e-05,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   1.00000000e-05,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   1.00000000e-05,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         2.00000000e-05,   1.00000000e-05,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   1.00000000e-05,   1.00000000e-05,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   1.00000000e-05,   1.00000000e-05,\n",
        "         0.00000000e+00,   1.00000000e-05,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         2.00000000e-05,   0.00000000e+00,   1.00000000e-05,\n",
        "         0.00000000e+00,   1.00000000e-05,   1.00000000e-05,\n",
        "         2.00000000e-05,   0.00000000e+00,   1.00000000e-05,\n",
        "         1.00000000e-05,   1.00000000e-05,   1.00000000e-05,\n",
        "         1.00000000e-05,   1.00000000e-05,   0.00000000e+00,\n",
        "         0.00000000e+00,   2.00000000e-05,   1.00000000e-05,\n",
        "         1.00000000e-05,   3.00000000e-05,   3.00000000e-05,\n",
        "         0.00000000e+00,   1.00000000e-05,   1.00000000e-05,\n",
        "         1.00000000e-05,   0.00000000e+00,   0.00000000e+00,\n",
        "         1.00000000e-05,   0.00000000e+00,   1.00000000e-05,\n",
        "         0.00000000e+00,   1.00000000e-05,   1.00000000e-05,\n",
        "         0.00000000e+00,   1.00000000e-05,   1.00000000e-05,\n",
        "         0.00000000e+00,   0.00000000e+00,   2.00000000e-05,\n",
        "         0.00000000e+00,   0.00000000e+00,   1.00000000e-05,\n",
        "         2.00000000e-05,   3.00000000e-05,   1.00000000e-05,\n",
        "         2.00000000e-05,   0.00000000e+00,   3.00000000e-05,\n",
        "         2.00000000e-05,   2.00000000e-05,   1.00000000e-05,\n",
        "         1.00000000e-05,   2.00000000e-05,   3.00000000e-05,\n",
        "         1.00000000e-05,   0.00000000e+00,   2.00000000e-05,\n",
        "         5.00000000e-05,   3.00000000e-05,   4.00000000e-05,\n",
        "         2.00000000e-05,   2.00000000e-05,   4.00000000e-05,\n",
        "         1.00000000e-05,   4.00000000e-05,   5.00000000e-05,\n",
        "         0.00000000e+00,   5.00000000e-05,   0.00000000e+00,\n",
        "         5.00000000e-05,   2.00000000e-05,   3.00000000e-05,\n",
        "         0.00000000e+00,   3.00000000e-05,   1.00000000e-05,\n",
        "         5.00000000e-05,   1.00000000e-05,   2.00000000e-05,\n",
        "         4.00000000e-05,   5.00000000e-05,   5.00000000e-05,\n",
        "         3.00000000e-05,   4.00000000e-05,   6.00000000e-05,\n",
        "         3.00000000e-05,   7.00000000e-05,   5.00000000e-05,\n",
        "         1.00000000e-05,   4.00000000e-05,   1.00000000e-04,\n",
        "         5.00000000e-05,   5.00000000e-05,   5.00000000e-05,\n",
        "         4.00000000e-05,   5.00000000e-05,   8.00000000e-05,\n",
        "         1.00000000e-04,   8.00000000e-05,   8.00000000e-05,\n",
        "         6.00000000e-05,   5.00000000e-05,   4.00000000e-05,\n",
        "         6.00000000e-05,   8.00000000e-05,   6.00000000e-05,\n",
        "         8.00000000e-05,   8.00000000e-05,   8.00000000e-05,\n",
        "         1.10000000e-04,   6.00000000e-05,   5.00000000e-05,\n",
        "         8.00000000e-05,   6.00000000e-05,   9.00000000e-05,\n",
        "         9.00000000e-05,   1.30000000e-04,   8.00000000e-05,\n",
        "         9.00000000e-05,   8.00000000e-05,   1.80000000e-04,\n",
        "         1.30000000e-04,   1.10000000e-04,   1.30000000e-04,\n",
        "         9.00000000e-05,   8.00000000e-05,   1.20000000e-04,\n",
        "         1.60000000e-04,   1.10000000e-04,   1.80000000e-04,\n",
        "         6.00000000e-05,   1.90000000e-04,   1.00000000e-04,\n",
        "         1.20000000e-04,   8.00000000e-05,   1.10000000e-04,\n",
        "         1.30000000e-04,   1.80000000e-04,   1.70000000e-04,\n",
        "         2.10000000e-04,   1.70000000e-04,   1.70000000e-04,\n",
        "         1.70000000e-04,   1.90000000e-04,   2.20000000e-04,\n",
        "         1.70000000e-04,   1.80000000e-04,   1.90000000e-04,\n",
        "         2.20000000e-04,   1.70000000e-04,   1.80000000e-04,\n",
        "         2.80000000e-04,   1.80000000e-04,   2.00000000e-04,\n",
        "         1.80000000e-04,   2.40000000e-04,   2.20000000e-04,\n",
        "         1.90000000e-04,   2.10000000e-04,   1.90000000e-04,\n",
        "         2.50000000e-04,   2.50000000e-04,   2.50000000e-04,\n",
        "         2.40000000e-04,   2.70000000e-04,   1.90000000e-04,\n",
        "         2.60000000e-04,   2.50000000e-04,   3.60000000e-04,\n",
        "         2.60000000e-04,   3.70000000e-04,   3.40000000e-04,\n",
        "         3.30000000e-04,   3.30000000e-04,   3.90000000e-04,\n",
        "         2.90000000e-04,   3.20000000e-04,   3.60000000e-04,\n",
        "         2.40000000e-04,   2.50000000e-04,   4.00000000e-04,\n",
        "         4.10000000e-04,   3.30000000e-04,   3.10000000e-04,\n",
        "         3.60000000e-04,   4.00000000e-04,   3.50000000e-04,\n",
        "         4.00000000e-04,   4.40000000e-04,   4.20000000e-04,\n",
        "         4.10000000e-04,   4.60000000e-04,   3.20000000e-04,\n",
        "         5.10000000e-04,   4.30000000e-04,   5.30000000e-04,\n",
        "         5.50000000e-04,   4.40000000e-04,   5.30000000e-04,\n",
        "         5.80000000e-04,   4.30000000e-04,   5.30000000e-04,\n",
        "         4.40000000e-04,   4.70000000e-04,   7.10000000e-04,\n",
        "         5.10000000e-04,   4.80000000e-04,   5.80000000e-04,\n",
        "         6.90000000e-04,   6.20000000e-04,   5.00000000e-04,\n",
        "         5.30000000e-04,   5.80000000e-04,   7.80000000e-04,\n",
        "         6.70000000e-04,   6.00000000e-04,   4.80000000e-04,\n",
        "         6.60000000e-04,   6.80000000e-04,   7.10000000e-04,\n",
        "         7.50000000e-04,   7.40000000e-04,   6.80000000e-04,\n",
        "         7.60000000e-04,   6.90000000e-04,   8.10000000e-04,\n",
        "         7.80000000e-04,   8.70000000e-04,   7.40000000e-04,\n",
        "         7.50000000e-04,   8.90000000e-04,   9.30000000e-04,\n",
        "         8.80000000e-04,   8.70000000e-04,   7.50000000e-04,\n",
        "         8.10000000e-04,   9.40000000e-04,   7.10000000e-04,\n",
        "         8.60000000e-04,   9.30000000e-04,   8.70000000e-04,\n",
        "         9.60000000e-04,   1.22000000e-03,   9.20000000e-04,\n",
        "         8.00000000e-04,   1.11000000e-03,   1.16000000e-03,\n",
        "         1.02000000e-03,   1.08000000e-03,   1.15000000e-03,\n",
        "         1.12000000e-03,   1.26000000e-03,   1.16000000e-03,\n",
        "         1.38000000e-03,   1.24000000e-03,   1.17000000e-03,\n",
        "         1.34000000e-03,   1.30000000e-03,   1.15000000e-03,\n",
        "         1.29000000e-03,   1.12000000e-03,   1.25000000e-03,\n",
        "         1.30000000e-03,   1.31000000e-03,   1.46000000e-03,\n",
        "         1.34000000e-03,   1.50000000e-03,   1.31000000e-03,\n",
        "         1.37000000e-03,   1.28000000e-03,   1.30000000e-03,\n",
        "         1.43000000e-03,   1.68000000e-03,   1.51000000e-03,\n",
        "         1.45000000e-03,   1.42000000e-03,   1.63000000e-03,\n",
        "         1.42000000e-03,   1.61000000e-03,   1.42000000e-03,\n",
        "         1.74000000e-03,   1.75000000e-03,   1.59000000e-03,\n",
        "         1.73000000e-03,   1.64000000e-03,   1.65000000e-03,\n",
        "         1.73000000e-03,   1.72000000e-03,   1.74000000e-03,\n",
        "         1.62000000e-03,   2.08000000e-03,   1.76000000e-03,\n",
        "         1.92000000e-03,   1.90000000e-03,   1.90000000e-03,\n",
        "         1.77000000e-03,   1.76000000e-03,   1.79000000e-03,\n",
        "         2.00000000e-03,   2.03000000e-03,   1.57000000e-03,\n",
        "         1.78000000e-03,   1.96000000e-03,   1.99000000e-03,\n",
        "         2.07000000e-03,   1.80000000e-03,   2.10000000e-03,\n",
        "         2.27000000e-03,   2.28000000e-03,   2.07000000e-03,\n",
        "         2.34000000e-03,   2.08000000e-03,   1.81000000e-03,\n",
        "         2.05000000e-03,   2.49000000e-03,   2.42000000e-03,\n",
        "         2.00000000e-03,   2.34000000e-03,   2.43000000e-03,\n",
        "         2.19000000e-03,   2.39000000e-03,   2.30000000e-03,\n",
        "         2.56000000e-03,   2.75000000e-03,   2.90000000e-03,\n",
        "         2.62000000e-03,   2.51000000e-03,   2.71000000e-03,\n",
        "         2.70000000e-03,   2.29000000e-03,   2.44000000e-03,\n",
        "         2.73000000e-03,   2.51000000e-03,   2.41000000e-03,\n",
        "         2.39000000e-03,   2.58000000e-03,   2.62000000e-03,\n",
        "         2.59000000e-03,   2.58000000e-03,   2.78000000e-03,\n",
        "         2.74000000e-03,   2.46000000e-03,   2.61000000e-03,\n",
        "         2.80000000e-03,   3.14000000e-03,   2.47000000e-03,\n",
        "         2.94000000e-03,   2.79000000e-03,   2.92000000e-03,\n",
        "         2.97000000e-03,   2.63000000e-03,   2.80000000e-03,\n",
        "         2.75000000e-03,   2.99000000e-03,   3.12000000e-03,\n",
        "         2.99000000e-03,   2.97000000e-03,   2.63000000e-03,\n",
        "         3.21000000e-03,   3.11000000e-03,   3.33000000e-03,\n",
        "         2.55000000e-03,   2.92000000e-03,   3.20000000e-03,\n",
        "         2.99000000e-03,   3.08000000e-03,   2.75000000e-03,\n",
        "         2.97000000e-03,   3.09000000e-03,   3.21000000e-03,\n",
        "         3.05000000e-03,   3.27000000e-03,   2.83000000e-03,\n",
        "         3.25000000e-03,   3.21000000e-03,   3.35000000e-03,\n",
        "         3.32000000e-03,   3.48000000e-03,   3.02000000e-03,\n",
        "         3.36000000e-03,   3.15000000e-03,   3.28000000e-03,\n",
        "         3.32000000e-03,   3.39000000e-03,   3.42000000e-03,\n",
        "         3.38000000e-03,   3.58000000e-03,   3.47000000e-03,\n",
        "         3.30000000e-03,   3.13000000e-03,   3.21000000e-03,\n",
        "         3.48000000e-03,   3.14000000e-03,   3.23000000e-03,\n",
        "         3.32000000e-03,   3.45000000e-03,   2.98000000e-03,\n",
        "         3.15000000e-03,   3.48000000e-03,   3.49000000e-03,\n",
        "         3.73000000e-03,   3.21000000e-03,   3.33000000e-03,\n",
        "         3.93000000e-03,   3.35000000e-03,   3.35000000e-03,\n",
        "         3.38000000e-03,   3.58000000e-03,   3.34000000e-03,\n",
        "         3.59000000e-03,   3.55000000e-03,   3.43000000e-03,\n",
        "         3.67000000e-03,   3.53000000e-03,   3.21000000e-03,\n",
        "         3.49000000e-03,   3.75000000e-03,   3.82000000e-03,\n",
        "         3.66000000e-03,   3.64000000e-03,   3.59000000e-03,\n",
        "         3.40000000e-03,   3.38000000e-03,   3.48000000e-03,\n",
        "         3.45000000e-03,   3.67000000e-03,   3.50000000e-03,\n",
        "         3.65000000e-03,   3.31000000e-03,   3.23000000e-03,\n",
        "         3.42000000e-03,   3.48000000e-03,   2.93000000e-03,\n",
        "         3.57000000e-03,   3.75000000e-03,   3.79000000e-03,\n",
        "         3.49000000e-03,   3.24000000e-03,   3.43000000e-03,\n",
        "         3.49000000e-03,   3.96000000e-03,   3.53000000e-03,\n",
        "         3.63000000e-03,   3.23000000e-03,   3.24000000e-03,\n",
        "         3.66000000e-03,   3.32000000e-03,   3.43000000e-03,\n",
        "         3.17000000e-03,   3.49000000e-03,   3.61000000e-03,\n",
        "         3.16000000e-03,   3.40000000e-03,   3.41000000e-03,\n",
        "         3.43000000e-03,   3.38000000e-03,   3.29000000e-03,\n",
        "         3.42000000e-03,   3.23000000e-03,   3.53000000e-03,\n",
        "         2.96000000e-03,   3.12000000e-03,   3.12000000e-03,\n",
        "         2.97000000e-03,   3.03000000e-03,   3.54000000e-03,\n",
        "         3.27000000e-03,   3.43000000e-03,   2.97000000e-03,\n",
        "         3.16000000e-03,   3.42000000e-03,   3.26000000e-03,\n",
        "         3.16000000e-03,   3.43000000e-03,   3.37000000e-03,\n",
        "         3.20000000e-03,   3.23000000e-03,   3.21000000e-03,\n",
        "         3.02000000e-03,   3.11000000e-03,   3.11000000e-03,\n",
        "         3.04000000e-03,   3.17000000e-03,   2.95000000e-03,\n",
        "         2.88000000e-03,   3.05000000e-03,   3.55000000e-03,\n",
        "         2.88000000e-03,   2.90000000e-03,   2.95000000e-03,\n",
        "         3.13000000e-03,   2.69000000e-03,   2.77000000e-03,\n",
        "         2.75000000e-03,   2.55000000e-03,   3.32000000e-03,\n",
        "         2.80000000e-03,   2.84000000e-03,   2.72000000e-03,\n",
        "         2.63000000e-03,   2.60000000e-03,   2.85000000e-03,\n",
        "         2.96000000e-03,   3.06000000e-03,   2.65000000e-03,\n",
        "         2.86000000e-03,   2.64000000e-03,   2.60000000e-03,\n",
        "         2.56000000e-03,   2.74000000e-03,   2.81000000e-03,\n",
        "         2.49000000e-03,   2.53000000e-03,   2.54000000e-03,\n",
        "         2.42000000e-03,   2.41000000e-03,   2.41000000e-03,\n",
        "         2.53000000e-03,   2.43000000e-03,   2.43000000e-03,\n",
        "         2.68000000e-03,   2.55000000e-03,   2.89000000e-03,\n",
        "         2.18000000e-03,   2.11000000e-03,   2.42000000e-03,\n",
        "         2.64000000e-03,   2.20000000e-03,   2.21000000e-03,\n",
        "         2.18000000e-03,   2.09000000e-03,   2.35000000e-03,\n",
        "         1.95000000e-03,   1.96000000e-03,   2.22000000e-03,\n",
        "         2.32000000e-03,   2.29000000e-03,   2.25000000e-03,\n",
        "         2.15000000e-03,   2.07000000e-03,   1.72000000e-03,\n",
        "         1.98000000e-03,   1.84000000e-03,   2.13000000e-03,\n",
        "         2.20000000e-03,   1.87000000e-03,   2.22000000e-03,\n",
        "         2.06000000e-03,   2.01000000e-03,   1.95000000e-03,\n",
        "         1.84000000e-03,   1.62000000e-03,   1.54000000e-03,\n",
        "         2.15000000e-03,   1.78000000e-03,   1.54000000e-03,\n",
        "         1.82000000e-03,   1.76000000e-03,   1.92000000e-03,\n",
        "         1.88000000e-03,   1.73000000e-03,   1.84000000e-03,\n",
        "         1.58000000e-03,   1.82000000e-03,   1.71000000e-03,\n",
        "         1.55000000e-03,   1.46000000e-03,   1.81000000e-03,\n",
        "         1.47000000e-03,   1.64000000e-03,   1.64000000e-03,\n",
        "         1.53000000e-03,   1.40000000e-03,   1.28000000e-03,\n",
        "         1.42000000e-03,   1.29000000e-03,   1.30000000e-03,\n",
        "         1.35000000e-03,   1.34000000e-03,   1.46000000e-03,\n",
        "         1.45000000e-03,   1.39000000e-03,   1.32000000e-03,\n",
        "         1.16000000e-03,   1.22000000e-03,   1.29000000e-03,\n",
        "         1.31000000e-03,   1.41000000e-03,   1.33000000e-03,\n",
        "         9.70000000e-04,   1.25000000e-03,   1.16000000e-03,\n",
        "         1.17000000e-03,   1.21000000e-03,   1.06000000e-03,\n",
        "         1.24000000e-03,   1.11000000e-03,   1.13000000e-03,\n",
        "         1.06000000e-03,   1.07000000e-03,   1.09000000e-03,\n",
        "         1.09000000e-03,   1.10000000e-03,   1.11000000e-03,\n",
        "         1.03000000e-03,   1.16000000e-03,   8.90000000e-04,\n",
        "         9.70000000e-04,   1.02000000e-03,   1.02000000e-03,\n",
        "         7.20000000e-04,   9.30000000e-04,   1.06000000e-03,\n",
        "         8.00000000e-04,   8.50000000e-04,   8.10000000e-04,\n",
        "         7.70000000e-04,   8.20000000e-04,   6.30000000e-04,\n",
        "         7.40000000e-04,   7.80000000e-04,   6.40000000e-04,\n",
        "         7.20000000e-04,   7.40000000e-04,   7.40000000e-04,\n",
        "         7.20000000e-04,   5.70000000e-04,   6.60000000e-04,\n",
        "         7.40000000e-04,   7.10000000e-04,   5.90000000e-04,\n",
        "         6.90000000e-04,   6.60000000e-04,   4.90000000e-04,\n",
        "         6.00000000e-04,   6.60000000e-04,   6.60000000e-04,\n",
        "         5.10000000e-04,   5.80000000e-04,   6.00000000e-04,\n",
        "         5.30000000e-04,   4.40000000e-04,   5.00000000e-04,\n",
        "         6.40000000e-04,   4.90000000e-04,   5.00000000e-04,\n",
        "         4.50000000e-04,   4.10000000e-04,   5.00000000e-04,\n",
        "         4.30000000e-04,   5.00000000e-04,   4.40000000e-04,\n",
        "         4.20000000e-04,   5.70000000e-04,   3.90000000e-04,\n",
        "         4.10000000e-04,   4.40000000e-04,   4.30000000e-04,\n",
        "         4.20000000e-04,   4.00000000e-04,   3.50000000e-04,\n",
        "         3.10000000e-04,   4.60000000e-04,   4.70000000e-04,\n",
        "         3.00000000e-04,   3.20000000e-04,   4.50000000e-04,\n",
        "         2.90000000e-04,   2.90000000e-04,   3.90000000e-04,\n",
        "         3.70000000e-04,   2.30000000e-04,   4.10000000e-04,\n",
        "         3.20000000e-04,   2.60000000e-04,   2.60000000e-04,\n",
        "         2.90000000e-04,   1.70000000e-04,   2.70000000e-04,\n",
        "         3.10000000e-04,   3.40000000e-04,   2.00000000e-04,\n",
        "         3.00000000e-04,   2.50000000e-04,   2.40000000e-04,\n",
        "         2.80000000e-04,   3.20000000e-04,   2.00000000e-04,\n",
        "         1.70000000e-04,   1.70000000e-04,   2.00000000e-04,\n",
        "         2.30000000e-04,   2.30000000e-04,   3.20000000e-04,\n",
        "         1.40000000e-04,   1.20000000e-04,   1.80000000e-04,\n",
        "         1.60000000e-04,   1.80000000e-04,   1.70000000e-04,\n",
        "         2.00000000e-04,   1.50000000e-04,   1.80000000e-04,\n",
        "         1.30000000e-04,   2.50000000e-04,   1.20000000e-04,\n",
        "         1.60000000e-04,   1.60000000e-04,   2.00000000e-04,\n",
        "         1.50000000e-04,   9.00000000e-05,   1.50000000e-04,\n",
        "         1.40000000e-04,   1.10000000e-04,   1.70000000e-04,\n",
        "         1.70000000e-04,   1.20000000e-04,   1.20000000e-04,\n",
        "         1.80000000e-04,   1.10000000e-04,   1.00000000e-04,\n",
        "         8.00000000e-05,   1.10000000e-04,   1.40000000e-04,\n",
        "         1.50000000e-04,   1.10000000e-04,   9.00000000e-05,\n",
        "         5.00000000e-05,   5.00000000e-05,   9.00000000e-05,\n",
        "         6.00000000e-05,   1.10000000e-04,   5.00000000e-05,\n",
        "         9.00000000e-05,   1.30000000e-04,   4.00000000e-05,\n",
        "         1.10000000e-04,   5.00000000e-05,   1.20000000e-04,\n",
        "         8.00000000e-05,   1.30000000e-04,   6.00000000e-05,\n",
        "         1.00000000e-04,   1.10000000e-04,   7.00000000e-05,\n",
        "         6.00000000e-05,   8.00000000e-05,   7.00000000e-05,\n",
        "         6.00000000e-05,   6.00000000e-05,   9.00000000e-05,\n",
        "         3.00000000e-05,   2.00000000e-05,   3.00000000e-05,\n",
        "         6.00000000e-05,   4.00000000e-05,   5.00000000e-05,\n",
        "         3.00000000e-05,   4.00000000e-05,   4.00000000e-05,\n",
        "         5.00000000e-05,   5.00000000e-05,   3.00000000e-05,\n",
        "         3.00000000e-05,   0.00000000e+00,   4.00000000e-05,\n",
        "         4.00000000e-05,   3.00000000e-05,   5.00000000e-05,\n",
        "         2.00000000e-05,   4.00000000e-05,   4.00000000e-05,\n",
        "         3.00000000e-05,   5.00000000e-05,   4.00000000e-05,\n",
        "         3.00000000e-05,   0.00000000e+00,   3.00000000e-05,\n",
        "         3.00000000e-05,   1.00000000e-05,   2.00000000e-05,\n",
        "         5.00000000e-05,   4.00000000e-05,   5.00000000e-05,\n",
        "         2.00000000e-05,   6.00000000e-05,   5.00000000e-05,\n",
        "         4.00000000e-05,   2.00000000e-05,   3.00000000e-05,\n",
        "         1.00000000e-05,   1.00000000e-05,   4.00000000e-05,\n",
        "         6.00000000e-05,   3.00000000e-05,   0.00000000e+00,\n",
        "         0.00000000e+00,   4.00000000e-05,   2.00000000e-05,\n",
        "         1.00000000e-05,   2.00000000e-05,   1.00000000e-05,\n",
        "         0.00000000e+00,   1.00000000e-05,   2.00000000e-05,\n",
        "         0.00000000e+00,   4.00000000e-05,   0.00000000e+00,\n",
        "         1.00000000e-05,   2.00000000e-05,   2.00000000e-05,\n",
        "         1.00000000e-05,   2.00000000e-05,   1.00000000e-05,\n",
        "         1.00000000e-05,   1.00000000e-05,   2.00000000e-05,\n",
        "         1.00000000e-05,   1.00000000e-05,   1.00000000e-05,\n",
        "         0.00000000e+00,   3.00000000e-05,   0.00000000e+00,\n",
        "         1.00000000e-05,   1.00000000e-05,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         1.00000000e-05,   0.00000000e+00,   0.00000000e+00,\n",
        "         1.00000000e-05,   1.00000000e-05,   1.00000000e-05,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   2.00000000e-05,   0.00000000e+00,\n",
        "         1.00000000e-05,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         1.00000000e-05,   2.00000000e-05,   0.00000000e+00,\n",
        "         0.00000000e+00,   1.00000000e-05,   0.00000000e+00,\n",
        "         1.00000000e-05,   0.00000000e+00,   0.00000000e+00,\n",
        "         1.00000000e-05,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   2.00000000e-05,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   1.00000000e-05,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n",
        "         1.00000000e-05])"
       ]
      }
     ],
     "prompt_number": 303
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Instead of doing all this we could also have done it using the keyword normed in histogram funtion "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "hist=np.histogram(samples,1000,normed=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 304
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x=hist[1][:-1]\n",
      "plt.plot(x,hist[0],alpha=0.3)#alpha gives us transparency in the plot \n",
      "plt.plot(x,1./np.sqrt(2.*np.pi)*np.exp(-x**2/2),linewidth=3)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 305,
       "text": [
        "[<matplotlib.lines.Line2D at 0x114c5f490>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x114c5f410>"
       ]
      }
     ],
     "prompt_number": 305
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Creating the Matrix "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "size=1000\n",
      "M=random.randn(size,size)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 306
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "M"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 307,
       "text": [
        "array([[ 0.94608403,  0.30515048,  0.22679279, ..., -1.43112714,\n",
        "         0.34291717,  0.07170589],\n",
        "       [ 1.62509334, -2.10901328, -1.84547696, ...,  0.5107796 ,\n",
        "        -0.36615369,  0.86517243],\n",
        "       [ 0.19365186,  0.82389045,  0.05490031, ...,  1.53313383,\n",
        "         2.83607059, -0.65182059],\n",
        "       ..., \n",
        "       [ 0.62075375, -0.65377234,  0.55163075, ..., -0.98851022,\n",
        "        -0.88424529, -0.23290621],\n",
        "       [-0.94586722,  2.40188337, -0.65096513, ...,  1.29074657,\n",
        "         1.44489628,  0.8895114 ],\n",
        "       [-0.6646923 , -0.29414866,  0.18421825, ..., -1.54327838,\n",
        "        -0.67813824,  1.60964412]])"
       ]
      }
     ],
     "prompt_number": 307
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "How to create a symmetric matrix using this matrix"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "M=0.5*(M+M.T)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 308
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "M"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 309,
       "text": [
        "array([[ 0.94608403,  0.96512191,  0.21022233, ..., -0.40518669,\n",
        "        -0.30147503, -0.2964932 ],\n",
        "       [ 0.96512191, -2.10901328, -0.51079325, ..., -0.07149637,\n",
        "         1.01786484,  0.28551189],\n",
        "       [ 0.21022233, -0.51079325,  0.05490031, ...,  1.04238229,\n",
        "         1.09255273, -0.23380117],\n",
        "       ..., \n",
        "       [-0.40518669, -0.07149637,  1.04238229, ..., -0.98851022,\n",
        "         0.20325064, -0.8880923 ],\n",
        "       [-0.30147503,  1.01786484,  1.09255273, ...,  0.20325064,\n",
        "         1.44489628,  0.10568658],\n",
        "       [-0.2964932 ,  0.28551189, -0.23380117, ..., -0.8880923 ,\n",
        "         0.10568658,  1.60964412]])"
       ]
      }
     ],
     "prompt_number": 309
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Thus a symmetric matrix is obtained"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We now want to calculate the eigen values for this matrix "
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "The Scipy package "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stats.norm"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 311,
       "text": [
        "<scipy.stats._continuous_distns.norm_gen at 0x10aed7950>"
       ]
      }
     ],
     "prompt_number": 311
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stats.norm?"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 312
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Linear Algebra "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x=np.array([[2,1],[1,1]])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 315
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 316,
       "text": [
        "array([[2, 1],\n",
        "       [1, 1]])"
       ]
      }
     ],
     "prompt_number": 316
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Another way to do this was "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "M=np.r_[2,1,1,1].reshape(2,2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 317
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "M"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 318,
       "text": [
        "array([[2, 1],\n",
        "       [1, 1]])"
       ]
      }
     ],
     "prompt_number": 318
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "linalg.eig(M) #getting the eigen values and the eigen vectors of a matrix"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 327,
       "text": [
        "(array([ 2.61803399+0.j,  0.38196601+0.j]), array([[ 0.85065081, -0.52573111],\n",
        "        [ 0.52573111,  0.85065081]]))"
       ]
      }
     ],
     "prompt_number": 327
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "linalg.eigvals(M) #Getting the eigen values of a matrix"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 328,
       "text": [
        "array([ 2.61803399+0.j,  0.38196601+0.j])"
       ]
      }
     ],
     "prompt_number": 328
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "linalg.det(M)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 329,
       "text": [
        "1.0"
       ]
      }
     ],
     "prompt_number": 329
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "v=np.array([0.5,4])\n",
      "v"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 330,
       "text": [
        "array([ 0.5,  4. ])"
       ]
      }
     ],
     "prompt_number": 330
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "linalg.solve(M,v) #solving the linear equaltions M.x=v"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 331,
       "text": [
        "array([-3.5,  7.5])"
       ]
      }
     ],
     "prompt_number": 331
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Matrix vector multiplication "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "v"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 332,
       "text": [
        "array([ 0.5,  4. ])"
       ]
      }
     ],
     "prompt_number": 332
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "M"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 333,
       "text": [
        "array([[2, 1],\n",
        "       [1, 1]])"
       ]
      }
     ],
     "prompt_number": 333
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "M*v #this is not a correct way "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 336,
       "text": [
        "array([[ 1. ,  4. ],\n",
        "       [ 0.5,  4. ]])"
       ]
      }
     ],
     "prompt_number": 336
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.dot(M,v) #M.v"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 338,
       "text": [
        "array([ 5. ,  4.5])"
       ]
      }
     ],
     "prompt_number": 338
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "v_new=np.dot(M,v)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 339
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.dot(v_new,v) #To check whether the directio is satisfied "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 341,
       "text": [
        "20.5"
       ]
      }
     ],
     "prompt_number": 341
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "lamb=linalg.eigvalsh(M)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 342
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "lamb"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 343,
       "text": [
        "array([ 0.38196601,  2.61803399])"
       ]
      }
     ],
     "prompt_number": 343
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "To know the time of execution fo the command we use the magic function %time"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%time lamb=linalg.eigvalsh(M)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "CPU times: user 91 \u00b5s, sys: 14 \u00b5s, total: 105 \u00b5s\n",
        "Wall time: 99.9 \u00b5s\n"
       ]
      }
     ],
     "prompt_number": 344
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(lamb)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 345,
       "text": [
        "[<matplotlib.lines.Line2D at 0x114dedc10>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nYII=\n",
       "text": [
        "<matplotlib.figure.Figure at 0x114cc6210>"
       ]
      }
     ],
     "prompt_number": 345
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "size=1000\n",
      "\n",
      "for i in range(5):\n",
      "    M=np.random.randn(size,size)\n",
      "    M=0.5*(M+M.T) # to get a symmetric matrix \n",
      "    \n",
      "    lamb=linalg.eigvalsh(M)\n",
      "    \n",
      "    plt.plot(lamb)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nIHkLMwgAAAAASUVORK5CYII=\n",
       "text": [
        "<matplotlib.figure.Figure at 0x114d4ef10>"
       ]
      }
     ],
     "prompt_number": 346
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Drawing multiple plots side by side "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.subplots(ncols=2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 347,
       "text": [
        "(<matplotlib.figure.Figure at 0x114d8a710>,\n",
        " array([<matplotlib.axes._subplots.AxesSubplot object at 0x114fd7410>,\n",
        "        <matplotlib.axes._subplots.AxesSubplot object at 0x118b46050>], dtype=object))"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAEACAYAAABI5zaHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAADn5JREFUeJzt3V+opHd9x/H3p7tREJqmspCLzUpAF/8UDCrGtVI6EsFj\nLgxYaLq2Fv+Ae7O2N6VrvGjOjS3eFJFAGtIYvHIv1ItYQoKtDkqI0YCJse6GXdvA7kaCsSoige7i\ntxdnNh0ne87MOeeZc/Z89/2CgXnm+e3z/c3Z73z2N89zniRVhSSpl9/b7QlIkoZnuEtSQ4a7JDVk\nuEtSQ4a7JDVkuEtSQ3PDPckXk7yQ5JkNxnwhyZkkTyd527BTlIZnX6u7RVbuDwIr6+1Mcjvwhqo6\nDHwSuHeguUnLZF+rtbnhXlXfAX6xwZAPAl+ajH0CuCHJjcNMT1oO+1rdDXHO/SBwbmr7PHDTAMeV\ndpN9rT1tqAuqmdn2v2mgDuxr7Vn7BzjGBeDQ1PZNk9d+RxI/GFqqqpoN4+1YqK/B3tbybaW3h1i5\nPwT8NUCSI8Avq+qFKw2sqh1/3H333btSdzdrX4vveQkW7utrrbevxf7azfe8VXNX7km+DPwpcCDJ\nOeBu4LpJQ99XVQ8nuT3JWeA3wMe2PBtph9jX6m5uuFfV0QXGHB9mOtLOsK/VXfs7VEej0TVX+1p8\nz9ci+6t/3e3Ids7pbKpQUjtVS9eeJNSwF1Q3U9ve1tJstbfbr9wl6VpkuEtSQ4a7JDVkuEtSQ4a7\nJDVkuEtSQ4a7JDVkuEtSQ4a7JDVkuEtSQ4a7JDVkuEtSQ4a7JDVkuEtSQ4a7JDVkuEtSQ4a7JDVk\nuEtSQ4a7JDVkuEtSQ4a7JDVkuEtSQ4a7JDVkuEtSQ4a7JDVkuEtSQ4a7JDVkuEtSQ4a7JDVkuEtS\nQ4a7JDVkuEtSQ4a7JDVkuEtSQ3PDPclKktNJziQ5cYX9B5I8kuSpJD9K8tGlzFQamL2tzlJV6+9M\n9gHPAu8DLgDfB45W1ampMavAq6vqriQHJuNvrKpLM8eqjWpJ25GEqsomxtvb2hM229uXzVu53wqc\nrarnquoicBK4Y2bMT4HrJ8+vB34+2/zSVcjeVmv75+w/CJyb2j4PvGtmzP3AN5M8D/w+8OfDTU9a\nGntbrc0L90W+a34GeKqqRkleD3wjyS1V9evZgaurqy8/H41GjEajTUxV+n/j8ZjxeLydQ9jbuioN\n0NvA/HPuR4DVqlqZbN8F/LaqPjc15mHgs1X12GT7P4ATVfXkzLE8L6ml2cI5d3tbe8Kyzrk/CRxO\ncnOSVwF3Ag/NjDnN2kUpktwIvBH4r81ORNph9rZa2/C0TFVdSnIceBTYBzxQVaeSHJvsvw/4R+DB\nJE+z9o/F31fV/yx53tK22NvqbsPTMoMW8qurlmirX10Hqm1va2mWdVpGkrQHGe6S1JDhLkkNGe6S\n1JDhLkkNGe6S1JDhLkkNGe6S1JDhLkkNGe6S1JDhLkkNGe6S1JDhLkkNGe6S1JDhLkkNGe6S1JDh\nLkkNGe6S1JDhLkkNGe6S1JDhLkkNGe6S1JDhLkkNGe6S1JDhLkkNGe6S1JDhLkkNGe6S1JDhLkkN\nGe6S1JDhLkkNGe6S1JDhLkkNGe6S1JDhLkkNzQ33JCtJTic5k+TEOmNGSX6Q5EdJxoPPUloCe1ud\nparW35nsA54F3gdcAL4PHK2qU1NjbgAeA95fVeeTHKiqF69wrNqolrQdSaiqbGK8va09YbO9fdm8\nlfutwNmqeq6qLgIngTtmxnwY+GpVnQe4UvNLVyF7W63NC/eDwLmp7fOT16YdBl6b5FtJnkzykSEn\nKC2Jva3W9s/Zv8h3zeuAtwO3Aa8BHk/y3ao6s93JSUtkb6u1eeF+ATg0tX2ItRXOtHPAi1X1EvBS\nkm8DtwCv+ACsrq6+/Hw0GjEajTY/YwkYj8eMx+PtHMLe1lVpgN4G5l9Q3c/aRafbgOeB7/HKi05v\nAu4B3g+8GngCuLOqfjxzLC86aWm2cEHV3taesNULqhuu3KvqUpLjwKPAPuCBqjqV5Nhk/31VdTrJ\nI8APgd8C9882v3S1sbfV3YYr90ELubrREm11dTNQbXtbS7OsX4WUJO1BhrskNWS4S1JDhrskNWS4\nS1JDhrskNWS4S1JDhrskNWS4S1JDhrskNWS4S1JDhrskNWS4S1JDhrskNWS4S1JDhrskNWS4S1JD\nhrskNWS4S1JDhrskNWS4S1JDhrskNWS4S1JDhrskNWS4S1JDhrskNWS4S1JDhrskNWS4S1JDhrsk\nNWS4S1JDhrskNWS4S1JDhrskNWS4S1JDhrskNTQ33JOsJDmd5EySExuMe2eSS0k+NOwUpeWwt9XZ\nhuGeZB9wD7ACvAU4muTN64z7HPAIkCXMUxqUva3u5q3cbwXOVtVzVXUROAnccYVxnwK+Avxs4PlJ\ny2Jvq7V54X4QODe1fX7y2suSHGTtQ3Hv5KUabHbS8tjbam1euC/SzJ8HPl1VxdrXVr+6ai+wt9Xa\n/jn7LwCHprYPsbbCmfYO4GQSgAPAB5JcrKqHZg+2urr68vPRaMRoNNr8jCVgPB4zHo+3cwh7W1el\nAXobgKwtStbZmewHngVuA54HvgccrapT64x/EPh6VX3tCvtqo1rSdiShqhZeWdvb2is229uXbbhy\nr6pLSY4DjwL7gAeq6lSSY5P9921pttIus7fV3YYr90ELubrREm11dTNQbXtbS7PV3vYOVUlqyHCX\npIYMd0lqyHCXpIYMd0lqyHCXpIYMd0lqyHCXpIYMd0lqyHCXpIYMd0lqyHCXpIYMd0lqyHCXpIYM\nd0lqyHCXpIYMd0lqyHCXpIYMd0lqyHCXpIYMd0lqyHCXpIYMd0lqyHCXpIYMd0lqyHCXpIYMd0lq\nyHCXpIYMd0lqyHCXpIYMd0lqyHCXpIYMd0lqyHCXpIYMd0lqyHCXpIYWCvckK0lOJzmT5MQV9v9l\nkqeT/DDJY0neOvxUpWHZ1+osVbXxgGQf8CzwPuAC8H3gaFWdmhrzbuDHVfWrJCvAalUdmTlOzasl\nbVUSqiqbGD9IX0/G2dtams329mWLrNxvBc5W1XNVdRE4CdwxPaCqHq+qX002nwBu2uxEpB1mX6u1\nRcL9IHBuavv85LX1fAJ4eDuTknaAfa3W9i8wZuHvm0neC3wceM+V9q+urr78fDQaMRqNFj209DvG\n4zHj8Xg7hxisr8He1nAG6G1gsXPuR1g717gy2b4L+G1VfW5m3FuBrwErVXX2CsfxvKSWZgvn3Afp\n68kYe1tLs8xz7k8Ch5PcnORVwJ3AQzPFX8faB+Cv1vsASFcZ+1qtzT0tU1WXkhwHHgX2AQ9U1akk\nxyb77wP+AfhD4N4kABer6tblTVvaHvta3c09LTNYIb+6aom2+tV1oNr2tpZmmadlJEl7jOEuSQ0Z\n7pLUkOEuSQ0Z7pLUkOEuSQ0Z7pLUkOEuSQ0Z7pLUkOEuSQ0Z7pLUkOEuSQ0Z7pLUkOEuSQ0Z7pLU\nkOEuSQ0Z7pLUkOEuSQ0Z7pLUkOEuSQ0Z7pLUkOEuSQ0Z7pLUkOEuSQ0Z7pLUkOEuSQ0Z7pLUkOEu\nSQ0Z7pLUkOEuSQ0Z7pLUkOEuSQ0Z7pLUkOEuSQ0Z7pLU0NxwT7KS5HSSM0lOrDPmC5P9Tyd52/DT\nlIZnb6uzDcM9yT7gHmAFeAtwNMmbZ8bcDryhqg4DnwTuXdJct2Q8Hl9zta/F97xZ9vbeq7ubtfdK\nX0+bt3K/FThbVc9V1UXgJHDHzJgPAl8CqKongBuS3Dj4TLfIRrx2am+Svb3H6u5m7T3U1y+bF+4H\ngXNT2+cnr80bc9P2pyYtlb2t1uaFey14nGzxz0m7xd5Wb1W17gM4AjwytX0XcGJmzL8AfzG1fRq4\n8QrHKh8+lvnYqJftbR97+bGZ3r782M/GngQOJ7kZeB64Ezg6M+Yh4DhwMskR4JdV9cLsgapqdgUk\n7SZ7W61tGO5VdSnJceBRYB/wQFWdSnJssv++qno4ye1JzgK/AT629FlL22Rvq7tMvlZKkhoZ/A7V\n3boxZF7dJH85qffDJI8leetO1J0a984kl5J8aIi6i9ZOMkrygyQ/SjLeibpJDiR5JMlTk7ofHaju\nF5O8kOSZDcYs5aaj3bzhyd62tydjNtdfWzlRv8FFqn3AWeBm4DrgKeDNM2NuBx6ePH8X8N0dqvtu\n4A8mz1d2qu7UuG8C/wb82Q7+rG8A/hO4abJ9YIfqrgL/dLkm8HNg/wC1/wR4G/DMOvsH763d7Gt7\n297eTn8NvXLfrRtD5tatqser6leTzScY5veVF3m/AJ8CvgL8bICam6n9YeCrVXUeoKpe3KG6PwWu\nnzy/Hvh5VV3abuGq+g7wiw2GLOumo9284cnetrdhC/01dLjv1o0hi9Sd9gng4W3WXKhukoOsNcjl\nW9eHusixyHs+DLw2ybeSPJnkIztU937gj5I8DzwN/O0Adbc6tyGCbjdveLK37e315rZhf837VcjN\nWvQvd+gbQxb+80neC3wceM82ay5a9/PAp6uqkoRXvvdl1r4OeDtwG/Aa4PEk362qM0uu+xngqaoa\nJXk98I0kt1TVr7dRd1HLuOlot/p6U8ewt+3taUOH+wXg0NT2Idb+hdlozE2T15Zdl8mFpvuBlara\n6CvQkHXfwdrvScPaOboPJLlYVQ/tQO1zwItV9RLwUpJvA7cA2/kALFL3j4HPAlTVT5L8N/BG1n63\nfJmW0VtXOu5O9fWite1te/uVhrgAMnXSfz/wE9YuSLyK+ReejjDMxZ9F6r6OtYslR3by/c6MfxD4\n0A7+rN8E/DtrF4peAzwDvGUH6v4zcPfk+Y2sfUBeO9D7vpnFLjoN0lu72df2tr29nf4apBFmJvEB\n4NlJs901ee0YcGxqzD2T/U8Db9+JusC/snZl+weTx/d26v1OjR3sA7CJn/XfsfZbBc8Af7NDP+sD\nwNcnf7/PAB8eqO6XWbub9H9ZW7l9fCd6azf72t62t7faX97EJEkN+b/Zk6SGDHdJashwl6SGDHdJ\nashwl6SGDHdJashwl6SGDHdJauj/ALEycyRIaRZWAAAAAElFTkSuQmCC\n",
       "text": [
        "<matplotlib.figure.Figure at 0x114d8a710>"
       ]
      }
     ],
     "prompt_number": 347
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "And for 2 plots in rows "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.subplots(nrows=2,ncols=2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 349,
       "text": [
        "(<matplotlib.figure.Figure at 0x1147eac50>,\n",
        " array([[<matplotlib.axes._subplots.AxesSubplot object at 0x11366bd10>,\n",
        "         <matplotlib.axes._subplots.AxesSubplot object at 0x118672710>],\n",
        "        [<matplotlib.axes._subplots.AxesSubplot object at 0x1186f8190>,\n",
        "         <matplotlib.axes._subplots.AxesSubplot object at 0x11875c5d0>]], dtype=object))"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nDbK5S1KDbO6S1CCbuyQ1yOYuSQ2yuUtSg2zuktQgm7skNcjmLkkNmtjcJw0R7tZ8ufv5mSQ39L+b\ns+vjusg7rfZufMyzMNs7q+4ya++kXL9u0+beDRG+B1gDrgMOJbl2bM0twNuq6gDwaeDegfZ1JgZx\n99TeCrO98+ous/ZOyfV6k165TxwiDHwI+DpAVT0CXJFkX+97KvXLbKtpk5r7NEOEN1rjlHhtd2Zb\nbauqi96ADwNH193/GPDXY2u+Ddy87v6/ADdusK3y5m3I22ZZNtvedvJtK9l+/TZpzN40Q4TH11zd\nfe8NljUlR7oIs62mTXpb5hRwIMk1SS4FPgIcG1tzDPhDgCQHgZ9U1Yu976nUL7Otpm36yn2aIcJV\ndTzJLUmeAX4KfHLwvZbmZLbVuoUNyJYkLU7vZ6gu68SQSXWTfLSr93iSB5Ncv4i669a9K8n5JLf2\nUXfa2klWkzyW5PtJTi6ibpKVJCeSnO7qfqKnul9L8mKSs5usGeSko2We8GS2zXa3Zmv5muUo7Caf\nQNgDPANcA1wCnAauHVtzC3C8+/om4OEF1X0P8Mvd12uLqrtu3QPAPwIfXuDv+grg34Gru/srC6p7\nBPir12sCLwN7e6j928ANwNmL/Lz3bC0z12bbbM+Tr75fuS/rxJCJdavqoap6tbv7CP18Xnmaxwvw\nGeB+4Mc91NxK7duAb1XV8wBV9dKC6v4IuLz7+nLg5ao6P2/hqvou8MomS4Y66WiZJzyZbbMNM+Sr\n7+a+rBNDpqm73qeA43PWnKpukqsYBeT1U9f7OsgxzWM+AFyZ5DtJTiX5+ILqHgXekeQccAb4kx7q\nzrpvfTS6ZZ7wZLbN9sX2bdN8Tfqc+1ZN+487/rngeUMx9X+f5H3A7cDNc9actu6XgM9WVSUJb37s\nQ9a+BLgReD9wGfBQkoer6umB634OOF1Vq0l+DfjnJO+sqv+eo+60+s7WVraxzNpm22y/Qd/NvbcT\nQwaoS3eg6SiwVlWb/QnUZ93fBL45yj4rwAeTvFZV45+pHqL2c8BLVfUz4GdJ/hV4JzDPE2Cauu8F\nPg9QVc8m+SHwdkafLR/SENnaaLuLyvW0tc222X6zPg6ArHvTfy/wLKMDEpcy+cDTQfo5+DNN3bcy\nOlhycJGPd2z9fcCtC/xd/zqjU+b3MHp1cxa4bgF1vwgc7r7ex+gJcmVPj/sapjvo1Eu2lplrs222\n58lXL0EY24kPAk91Ybu7+94dwB3r1tzT/fwMG1yrY4i6wFcZHdl+rLs9uqjHu25tb0+ALfyu/5TR\npwrOAn+8oN/1CqPrspzp6t7WU91vAOeA/2X0yu32RWRrmbk222Z71nx5EpMkNcgxe5LUIJu7JDVo\nmhmqSzvlWxqKuVbrpnnlfh+jU5o3lG0+Z1K6CHOtpk1s7rW8U76lwZhrta6P99ydM6kWmWvtaH2d\noTrxtNgkfuZSg6r+x91Ndbq32dbQZsl2H6/cpz4ttq8THLZyO3z48FLqLrP2bnzMA9jS6d676Xe9\nG/O1zMc8qz6au3Mm1SJzrR1t4tsySb4B/A6wkuQ54DCjK7JRzpnUDmWu1bqJzb2qDk2x5s5+dqd/\nq6uru672bnzMW7XTcw3mazfUncfCri2TpBZVS7tPEqr/A6rT1jbbGsys2fbyA5LUIJu7JDXI5i5J\nDbK5S1KDbO6S1CCbuyQ1yOYuSQ2yuUtSg2zuktQgm7skNWiaGaprSZ7sZknetcHPV5KcSHI6yfeT\nfGKQPZV6ZrbVsk2vLZNkD/AU8AFG17L+HnCoqp5Yt+YI8ItVdXeSlW79vqo6P7Ytr7+hwWz1+htm\nWzvFUNeWeTfwTFX9Z1W9BnwT+L2xNT8CLu++vhx4eTz80jZkttW0SZf83WiO5E1ja44CDyQ5B7wF\n+P3+dk8ajNlW0ya9cp/mb83PAaer6leB3wD+Jslb5t4zaVhmW02b9Mp9fI7kfkavcNZ7L/B5gKp6\nNskPgbcDp8Y3duTIkQtfr66u7sgL4Gt7OHnyJCdPnpxnE2Zb21IP2QYmH1Ddy+gg0vuBc8CjvPmg\n0xeBV6vqL5LsA/4NuL6q/mtsWx500mBmOKBqtrUjzHpAddNX7lV1PsmdwD8Be4C/q6onktzR/fwr\nwF8C9yU5w+htnj8bD7+03Zhttc4xe2qCY/bUKsfsSZIusLlLUoNs7pLUIJu7JDXI5i5JDbK5S1KD\nbO6S1CCbuyQ1yOYuSQ2yuUtSg2zuktQgm7skNWjuAdndmtUkj3VDhE/2vpfSAMy2WtbHgOwrgAeB\n362q55OsVNVLG2zLK+dpMAMNyDbbWrplDsi+DfhWVT0PsFH4pW3IbKtpk5r7RkOErxpbcwC4Msl3\nkpxK8vE+d1AaiNlW0ybNUJ3mb81LgBsZjSu7DHgoycNV9fT4QudMqi89zJk029qWFjVD9SBwpKrW\nuvt3Az+vqi+sW3MX8EtVdaS7/1XgRFXdP7Yt35fUYGZ4z91sa0cY6j33U8CBJNckuRT4CHBsbM0/\nAL+VZE+Sy4CbgB9sdUekBTPbatrcA7Kr6skkJ4DHgZ8DR6vKJ4C2NbOt1jkgW01wQLZa5YBsSdIF\nNndJapDNXZIaZHOXpAbZ3CWpQTZ3SWqQzV2SGmRzl6QG2dwlqUE2d0lqkM1dkhrUywzVbt27kpxP\ncmu/uygNw2yrZZs2927O5D3AGnAdcCjJtRdZ9wXgBLCUizdJW2G21bo+ZqgCfAa4H/hxz/snDcVs\nq2lzz1BNchWjJ8W93be89ql2ArOtpvUxQ/VLwGerqpKETf50dc6k+rKgGapmWwu3nWao/gf/H/oV\n4H+AP6qqY2PbcqCBBjPQDFWzraWbdVjHpOa+F3iK0fT3c8CjwKGqeuIi6+8Dvl1Vf7/Bz3wCaDAz\nNHezrR1h1uY+9wzVmfZWWjKzrdY5Q1VNcIaqWuUMVUnSBTZ3SWqQzV2SGmRzl6QG2dwlqUE2d0lq\nkM1dkhpkc5ekBtncJalBNndJapDNXZIaNFVznzRrMslHk5xJ8niSB5Nc3/+uSv0y12rZxAuHdTMk\nnwI+ALwAfI+xS6MmeQ/wg6p6Nckao+tkHxzbjhdX0mBmuORvL7nu1pltDWbIC4dNnDVZVQ9V1avd\n3UeAq7e6I9KCmWs1bZrmPnHW5JhPAcfn2SlpAcy1mjZphipsYShwkvcBtwM3z7xH0mKYazVtmub+\nArB/3f39jF7lvEF3sOkosFZVr2y0IYcIqy89DBHuLddgttWfhQzIhulmTSZ5K/AA8LGqevgi2/Gg\nkwYzxAzVaXLdrTPbGswgM1Rh6lmTfw78CnBvEoDXqurdW90ZaVHMtVrnDFU1wRmqapUzVCVJF9jc\nJalBNndJapDNXZIaZHOXpAbZ3CWpQTZ3SWqQzV2SGmRzl6QG2dwlqUE2d0lq0MTmPmnOZLfmy93P\nzyS5of/dlPpnttWyTZt7N2fyHmANuA44lOTasTW3AG+rqgPAp4F7B9rXmfRxXeSdVns3PuatMts7\nr+4ya++UXK836ZX7xDmTwIeArwNU1SPAFUn29b6nMzKIu6f2FpntHVZ3mbV3UK4vmNTcp5kzudEa\nBwlruzPbatqk5j7tRarHrzXsxa213Zltta2qLnoDDgIn1t2/G7hrbM3fAn+w7v6TwL4NtlXevA15\n2yzLZtvbTr5tJduv3yaN2TsFHEhyDaM5kx8BDo2tOQbcCXwzyUHgJ1X14viGljUlR7oIs62mbdrc\np5kzWVXHk9yS5Bngp8AnB99raU5mW61b2AxVSdLi9H6G6rJODJlUN8lHu3qPJ3kwyfWLqLtu3buS\nnE9yax91p62dZDXJY0m+n+TkIuomWUlyIsnpru4neqr7tSQvJjm7yZpBTjpa5glPZttsd2u2lq9Z\n3qjf5CDVHuAZ4BrgEuA0cO3YmluA493XNwEPL6jue4Bf7r5eW1TddeseAP4R+PACf9dXAP8OXN3d\nX1lQ3SPAX71eE3gZ2NtD7d8GbgDOXuTnvWdrmbk222Z7nnz1/cp9WSeGTKxbVQ9V1avd3Ufo5/PK\n0zxegM8A9wM/7qHmVmrfBnyrqp4HqKqXFlT3R8Dl3deXAy9X1fl5C1fVd4FXNlky1ElHyzzhyWyb\nbZghX30392WdGDJN3fU+BRyfs+ZUdZNcxSggr5+63tdBjmke8wHgyiTfSXIqyccXVPco8I4k54Az\nwJ/0UHfWfeuj0S3zhCezbbYvtm+b5mvSRyG3atp/3L5PDJn6v0/yPuB24OY5a05b90vAZ6uqkoQ3\nP/Yha18C3Ai8H7gMeCjJw1X19MB1PwecrqrVJL8G/HOSd1bVf89Rd1pDnHS0rFxvaRtm22yv13dz\nfwHYv+7+fkb/h9lszdXd94auS3eg6SiwVlWb/QnUZ93fZPQ5aRi9R/fBJK9V1bEF1H4OeKmqfgb8\nLMm/Au8E5nkCTFP3vcDnAarq2SQ/BN7O6LPlQxoiWxttd1G5nra22Tbbb9bHAZB1b/rvBZ5ldEDi\nUiYfeDpIPwd/pqn7VkYHSw4u8vGOrb8PuHWBv+tfB/6F0YGiy4CzwHULqPtF4HD39T5GT5Are3rc\n1zDdQadesrXMXJttsz1PvnoJwthOfBB4qgvb3d337gDuWLfmnu7nZ4AbF1EX+CqjI9uPdbdHF/V4\n163t7Qmwhd/1nzL6VMFZ4I8X9LteAb7d/fueBW7rqe43GJ1N+r+MXrndvohsLTPXZttsz5ovT2KS\npAY5Zk+SGmRzl6QG2dwlqUE2d0lqkM1dkhpkc5ekBtncJalBNndJatD/Ad5aCjCUH7HHAAAAAElF\nTkSuQmCC\n",
       "text": [
        "<matplotlib.figure.Figure at 0x1147eac50>"
       ]
      }
     ],
     "prompt_number": 349
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "fig refer to the plots while ax refers to the axis objects "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "fig,ax=plt.subplots(figsize=(12,5),ncols=2)\n",
      "\n",
      "size=1000\n",
      "\n",
      "for i in range(5):\n",
      "    M=random.randn(size,size)\n",
      "    M=0.5*(M+M.T)\n",
      "    \n",
      "    lamb=linalg.eigvalsh(M)\n",
      "    \n",
      "    ax[0].plot(lamb) #draw on the first axis\n",
      "    ax[1].plot(lamb,\".-\",alpha=0.5)\n",
      "    \n",
      "    ax[1].set_xlim(500,550)\n",
      "    ax[1].set_ylim(0,3)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x118ac89d0>"
       ]
      }
     ],
     "prompt_number": 353
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So we can see the random fluctuations now after zooming it in "
     ]
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Question :"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Draw a box on the left plot where we have zoomed the graph "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "fig,ax=plt.subplots(figsize=(12,5),ncols=2)\n",
      "\n",
      "size=1000\n",
      "\n",
      "for i in range(5):\n",
      "    M=random.randn(size,size)\n",
      "    M=0.5*(M+M.T)\n",
      "    \n",
      "    lamb=linalg.eigvalsh(M)\n",
      "    \n",
      "    ax[0].plot(lamb) #draw on the first axis\n",
      "    ax[1].plot(lamb,\".-\",alpha=0.5)\n",
      "    rect=patches.Rectangle((500,0),50,3,fill=False)\n",
      "    #tuple of the lower left corner\n",
      "    #Then the width and then the height of the rectangle \n",
      "    \n",
      "    ax[1].set_xlim(500,550)\n",
      "    ax[1].set_ylim(0,3)\n",
      "    ax[0].add_patch(rect)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n8KFJ/xa0LQAAAABJRU5ErkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x118f6a950>"
       ]
      }
     ],
     "prompt_number": 384
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Manipulating this eigen value data : "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Difference between the consecutive eigen values using numpy although it can be done using a for loop "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x=np.array([3,4,6,10])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 385
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 386,
       "text": [
        "array([ 3,  4,  6, 10])"
       ]
      }
     ],
     "prompt_number": 386
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x[:-1]-x[1:]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 387,
       "text": [
        "array([-1, -2, -4])"
       ]
      }
     ],
     "prompt_number": 387
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "There is a function in numpy for that "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.diff(x)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 388,
       "text": [
        "array([1, 2, 4])"
       ]
      }
     ],
     "prompt_number": 388
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.diff??"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 390
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "2 question marks gives us the source code of that function "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "differences = np.diff(lamb)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 391
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "differences"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 392,
       "text": [
        "array([ 0.36979634,  0.58503977,  0.42785507,  0.37969187,  0.06052957,\n",
        "        0.18276909,  0.28657511,  0.06045939,  0.3404918 ,  0.18949686,\n",
        "        0.10217634,  0.16341365,  0.02618095,  0.33288939,  0.05865189,\n",
        "        0.34120507,  0.14580864,  0.16705795,  0.17905068,  0.18977137,\n",
        "        0.29288717,  0.03128868,  0.12978302,  0.24044611,  0.05787739,\n",
        "        0.27177656,  0.11442407,  0.1601077 ,  0.20939918,  0.07446665,\n",
        "        0.14192125,  0.17665101,  0.18244105,  0.03554478,  0.13221573,\n",
        "        0.07425205,  0.0909073 ,  0.09850195,  0.2476018 ,  0.0533887 ,\n",
        "        0.1178866 ,  0.2024848 ,  0.12453001,  0.0720722 ,  0.19920301,\n",
        "        0.07782756,  0.15098544,  0.09445273,  0.10940817,  0.03232978,\n",
        "        0.15047759,  0.13241219,  0.05534601,  0.0992058 ,  0.19293973,\n",
        "        0.07428761,  0.04225691,  0.11177658,  0.27944274,  0.07696742,\n",
        "        0.0664883 ,  0.07948246,  0.0563075 ,  0.12614043,  0.16323673,\n",
        "        0.10603399,  0.17524067,  0.05324022,  0.13609054,  0.10517955,\n",
        "        0.05970612,  0.17810548,  0.16146916,  0.04491291,  0.06477416,\n",
        "        0.08812205,  0.06671444,  0.13377847,  0.09200752,  0.10236635,\n",
        "        0.02200303,  0.17410133,  0.1396662 ,  0.09381385,  0.07417337,\n",
        "        0.07419924,  0.06342852,  0.06186634,  0.184329  ,  0.09634035,\n",
        "        0.06450139,  0.10342157,  0.05011715,  0.13961519,  0.07389977,\n",
        "        0.17115254,  0.09897739,  0.0883379 ,  0.18155721,  0.03900786,\n",
        "        0.04755894,  0.17204484,  0.14312454,  0.04235042,  0.04117873,\n",
        "        0.14047483,  0.04245804,  0.12603247,  0.04982933,  0.07331167,\n",
        "        0.05340082,  0.05957273,  0.03194648,  0.18596475,  0.07090531,\n",
        "        0.17822795,  0.13042315,  0.04139645,  0.0168469 ,  0.09762131,\n",
        "        0.14660423,  0.10572573,  0.12606875,  0.00676607,  0.07577566,\n",
        "        0.17623337,  0.05040686,  0.14934995,  0.07457248,  0.04059945,\n",
        "        0.0696693 ,  0.19382962,  0.05768493,  0.0319787 ,  0.13480314,\n",
        "        0.12092805,  0.11234088,  0.06439193,  0.06902259,  0.12636469,\n",
        "        0.05884472,  0.12931392,  0.07453884,  0.03398749,  0.14893326,\n",
        "        0.03865629,  0.10876218,  0.09244272,  0.1183824 ,  0.17008864,\n",
        "        0.05999996,  0.05216421,  0.03958302,  0.17212673,  0.04773998,\n",
        "        0.14571425,  0.03404518,  0.16584895,  0.05833217,  0.09323846,\n",
        "        0.08545428,  0.02688236,  0.09844034,  0.0964587 ,  0.1383847 ,\n",
        "        0.09016746,  0.10250731,  0.04619636,  0.05928042,  0.08435224,\n",
        "        0.04192766,  0.07789862,  0.12878462,  0.05938815,  0.07372423,\n",
        "        0.03431414,  0.05213274,  0.07453601,  0.18918973,  0.07394491,\n",
        "        0.14416225,  0.00508103,  0.11381018,  0.03975628,  0.11764496,\n",
        "        0.13106896,  0.06533335,  0.04622549,  0.08449283,  0.05100313,\n",
        "        0.09431554,  0.08655778,  0.08873416,  0.04430943,  0.11174599,\n",
        "        0.04809186,  0.05125697,  0.14742268,  0.04032143,  0.03303026,\n",
        "        0.0565246 ,  0.08677671,  0.12755107,  0.0824867 ,  0.03792331,\n",
        "        0.03622672,  0.17675157,  0.05489647,  0.07056939,  0.04631649,\n",
        "        0.10074585,  0.03383167,  0.13264892,  0.07749699,  0.10708855,\n",
        "        0.04157223,  0.1373214 ,  0.03764863,  0.09728572,  0.08077328,\n",
        "        0.01365564,  0.11931082,  0.0751966 ,  0.0418575 ,  0.11525384,\n",
        "        0.06064697,  0.07296978,  0.07326626,  0.11027375,  0.13861868,\n",
        "        0.08151144,  0.02229355,  0.04357661,  0.07940955,  0.09696869,\n",
        "        0.10460561,  0.06770885,  0.06447186,  0.03970682,  0.10572159,\n",
        "        0.05508818,  0.15413067,  0.07964107,  0.05983492,  0.11006471,\n",
        "        0.12356123,  0.07151128,  0.06136314,  0.06471607,  0.09047116,\n",
        "        0.12122835,  0.0418553 ,  0.05302453,  0.11554411,  0.08518647,\n",
        "        0.0387941 ,  0.06651856,  0.03186887,  0.08045409,  0.10535888,\n",
        "        0.03904273,  0.08020294,  0.04262124,  0.08575309,  0.04437218,\n",
        "        0.10598976,  0.0812571 ,  0.0794803 ,  0.05149852,  0.02080912,\n",
        "        0.09819454,  0.07869219,  0.15722148,  0.05591635,  0.10432055,\n",
        "        0.1100849 ,  0.12695722,  0.02150235,  0.06391167,  0.0037959 ,\n",
        "        0.15260631,  0.02587171,  0.10869581,  0.05682789,  0.07315038,\n",
        "        0.06632654,  0.03907376,  0.09107063,  0.08588404,  0.12014529,\n",
        "        0.05674216,  0.05181643,  0.04262543,  0.05240461,  0.02790075,\n",
        "        0.17647664,  0.04099296,  0.10936444,  0.07366768,  0.05369678,\n",
        "        0.08410719,  0.03424875,  0.03681684,  0.13129496,  0.10167027,\n",
        "        0.10724582,  0.05538838,  0.06724104,  0.05909719,  0.04330078,\n",
        "        0.06265733,  0.08739707,  0.09166304,  0.08295943,  0.09250384,\n",
        "        0.02353802,  0.10121118,  0.08087861,  0.04095964,  0.17941846,\n",
        "        0.03449836,  0.07797923,  0.05166313,  0.04903688,  0.15667689,\n",
        "        0.10460059,  0.02811999,  0.03175488,  0.05069762,  0.10613204,\n",
        "        0.09015389,  0.08010873,  0.05064833,  0.12608524,  0.07688684,\n",
        "        0.04863042,  0.11489274,  0.04194787,  0.05513166,  0.06408369,\n",
        "        0.04940059,  0.05288869,  0.10903631,  0.0399247 ,  0.03385532,\n",
        "        0.08706021,  0.06089218,  0.11881794,  0.03263505,  0.06847698,\n",
        "        0.08025743,  0.07365692,  0.04712737,  0.05334778,  0.14949314,\n",
        "        0.10890008,  0.05358728,  0.00449698,  0.05794307,  0.10542543,\n",
        "        0.0805633 ,  0.05671859,  0.06442587,  0.05407564,  0.06139461,\n",
        "        0.03561816,  0.07304037,  0.09920456,  0.05301308,  0.13995858,\n",
        "        0.05431862,  0.05678367,  0.09911749,  0.02954327,  0.05455982,\n",
        "        0.1096455 ,  0.04364209,  0.11441557,  0.0771668 ,  0.05957169,\n",
        "        0.08099891,  0.05131443,  0.09416293,  0.02765877,  0.06329874,\n",
        "        0.08534266,  0.21532934,  0.01962295,  0.06484763,  0.03417773,\n",
        "        0.08243611,  0.03207226,  0.07672688,  0.03306737,  0.14013275,\n",
        "        0.05213465,  0.10277676,  0.11535741,  0.04752136,  0.0217151 ,\n",
        "        0.14611105,  0.03144845,  0.08435157,  0.08047505,  0.01954908,\n",
        "        0.09164822,  0.05853567,  0.0449285 ,  0.09056305,  0.03102533,\n",
        "        0.04337966,  0.0824046 ,  0.11503179,  0.03885179,  0.08121983,\n",
        "        0.08760113,  0.07762464,  0.06669281,  0.11679983,  0.01174025,\n",
        "        0.10350405,  0.13623997,  0.05513182,  0.02395776,  0.12121588,\n",
        "        0.01895771,  0.06965141,  0.07569508,  0.06047967,  0.05208102,\n",
        "        0.07626493,  0.06479375,  0.10570404,  0.06417235,  0.02812439,\n",
        "        0.08518335,  0.05998156,  0.12019008,  0.03175688,  0.03822543,\n",
        "        0.0922563 ,  0.07745919,  0.13275624,  0.05424172,  0.07661332,\n",
        "        0.03658084,  0.06188868,  0.10489192,  0.03547062,  0.08117779,\n",
        "        0.08724949,  0.0345679 ,  0.08654564,  0.05445049,  0.0249901 ,\n",
        "        0.12176513,  0.02437466,  0.12421666,  0.07548621,  0.05123071,\n",
        "        0.02479835,  0.07295323,  0.12682005,  0.11069155,  0.0689764 ,\n",
        "        0.11363716,  0.00793632,  0.09502411,  0.03795447,  0.0601772 ,\n",
        "        0.06540766,  0.08103868,  0.05686304,  0.0968384 ,  0.04863341,\n",
        "        0.01097517,  0.03038338,  0.17736719,  0.0513265 ,  0.03443929,\n",
        "        0.11888746,  0.06283085,  0.07031135,  0.03243106,  0.05399614,\n",
        "        0.11525441,  0.08155266,  0.04808676,  0.06068818,  0.11375375,\n",
        "        0.0369994 ,  0.05424915,  0.06391164,  0.04253194,  0.12164903,\n",
        "        0.03523656,  0.0889071 ,  0.04169233,  0.04809485,  0.07090116,\n",
        "        0.09232647,  0.03475304,  0.11137065,  0.01168142,  0.07138054,\n",
        "        0.12232399,  0.09421016,  0.07704393,  0.02294417,  0.0640175 ,\n",
        "        0.10525311,  0.08682363,  0.0512606 ,  0.05278116,  0.02897505,\n",
        "        0.11156677,  0.1432193 ,  0.10199222,  0.00506135,  0.13473873,\n",
        "        0.09073108,  0.01146462,  0.10870346,  0.02946438,  0.09114372,\n",
        "        0.05730299,  0.05463603,  0.01427663,  0.132853  ,  0.01111043,\n",
        "        0.06395213,  0.05246553,  0.0673382 ,  0.07348173,  0.06552747,\n",
        "        0.07171801,  0.13556171,  0.03511173,  0.09868177,  0.03702422,\n",
        "        0.09807298,  0.05651676,  0.03521375,  0.0523928 ,  0.04586198,\n",
        "        0.04015119,  0.16879457,  0.07115295,  0.05923768,  0.09001229,\n",
        "        0.04949998,  0.1222299 ,  0.10371245,  0.02811444,  0.0261581 ,\n",
        "        0.1367511 ,  0.1105249 ,  0.01443464,  0.10636228,  0.09003059,\n",
        "        0.03619448,  0.10153576,  0.0395737 ,  0.14532811,  0.0210989 ,\n",
        "        0.11936233,  0.02437691,  0.0537812 ,  0.12274503,  0.05147259,\n",
        "        0.02321064,  0.10480723,  0.08377771,  0.06138956,  0.09389389,\n",
        "        0.06866934,  0.07870351,  0.07351999,  0.08106326,  0.06041942,\n",
        "        0.00901965,  0.13245683,  0.03602294,  0.07738776,  0.03758001,\n",
        "        0.10242606,  0.10484368,  0.08663964,  0.06100937,  0.06689016,\n",
        "        0.14867755,  0.00597041,  0.05256613,  0.04400623,  0.06813079,\n",
        "        0.05016945,  0.06792271,  0.05591348,  0.02418027,  0.10694853,\n",
        "        0.10582217,  0.07920177,  0.01619144,  0.06772238,  0.14788844,\n",
        "        0.05894117,  0.11523246,  0.07178041,  0.07168239,  0.05733305,\n",
        "        0.10719207,  0.06895192,  0.05178288,  0.05747356,  0.13414052,\n",
        "        0.02764447,  0.03877155,  0.11409019,  0.08103217,  0.09750678,\n",
        "        0.0240762 ,  0.06424936,  0.11937105,  0.09052608,  0.0368611 ,\n",
        "        0.02718959,  0.06456774,  0.06104955,  0.06187088,  0.05811463,\n",
        "        0.09299098,  0.14458152,  0.11322553,  0.01171764,  0.04031981,\n",
        "        0.03383858,  0.22148398,  0.0463219 ,  0.02540928,  0.10715926,\n",
        "        0.11509336,  0.03419932,  0.11601388,  0.01408874,  0.08077318,\n",
        "        0.05449102,  0.06020857,  0.11331443,  0.05917168,  0.08607485,\n",
        "        0.0530891 ,  0.07845214,  0.03372192,  0.04573327,  0.04092212,\n",
        "        0.04061026,  0.14833767,  0.06879334,  0.07992288,  0.05735099,\n",
        "        0.10705799,  0.06671248,  0.09702626,  0.06118247,  0.06365558,\n",
        "        0.00798649,  0.16755984,  0.01320485,  0.07865284,  0.09225746,\n",
        "        0.0275628 ,  0.07870502,  0.15530785,  0.08014267,  0.02667039,\n",
        "        0.0444515 ,  0.0609833 ,  0.0325021 ,  0.18021741,  0.02846409,\n",
        "        0.07922693,  0.06637624,  0.13714028,  0.01701826,  0.09357527,\n",
        "        0.04162632,  0.07455639,  0.10059247,  0.07594542,  0.02537371,\n",
        "        0.07419046,  0.11597299,  0.0159615 ,  0.03418019,  0.09772765,\n",
        "        0.06717723,  0.03927402,  0.1050226 ,  0.06802573,  0.02927606,\n",
        "        0.13137393,  0.08786285,  0.06866744,  0.12226775,  0.04468002,\n",
        "        0.07379602,  0.07529006,  0.10714741,  0.02713661,  0.11366789,\n",
        "        0.07127673,  0.12381106,  0.03158568,  0.08567613,  0.0307989 ,\n",
        "        0.04715041,  0.03527576,  0.11078456,  0.04827864,  0.22477478,\n",
        "        0.01944089,  0.051664  ,  0.07391973,  0.10314587,  0.0710447 ,\n",
        "        0.15155998,  0.07475861,  0.08233986,  0.07994255,  0.04295225,\n",
        "        0.01124494,  0.06365892,  0.04178457,  0.02425131,  0.12959007,\n",
        "        0.08725285,  0.17414734,  0.03893178,  0.06402193,  0.05069571,\n",
        "        0.02408926,  0.05263034,  0.11224335,  0.08694951,  0.06946734,\n",
        "        0.0827931 ,  0.05875808,  0.03284221,  0.15137335,  0.05076366,\n",
        "        0.10999389,  0.06158705,  0.12076024,  0.07707225,  0.02248926,\n",
        "        0.07472565,  0.06022138,  0.06329441,  0.02194727,  0.16488746,\n",
        "        0.01499852,  0.12093621,  0.06073141,  0.1729833 ,  0.02406679,\n",
        "        0.03369432,  0.07863865,  0.11794224,  0.07574167,  0.04967693,\n",
        "        0.13828087,  0.04074485,  0.05519498,  0.06903764,  0.03971929,\n",
        "        0.14132233,  0.03519263,  0.10772953,  0.20591146,  0.04012212,\n",
        "        0.01982273,  0.0413294 ,  0.11595941,  0.05927986,  0.12372293,\n",
        "        0.05683806,  0.11895831,  0.04242976,  0.03604355,  0.11107344,\n",
        "        0.07614636,  0.05076119,  0.04680758,  0.17822979,  0.05424921,\n",
        "        0.07297822,  0.12358573,  0.08877742,  0.02070153,  0.08059602,\n",
        "        0.06836008,  0.04243304,  0.06403544,  0.15162729,  0.05197793,\n",
        "        0.07974558,  0.11336115,  0.0478911 ,  0.06375958,  0.08354795,\n",
        "        0.11984769,  0.07803688,  0.05505597,  0.14674246,  0.13936774,\n",
        "        0.05959086,  0.02918031,  0.04797639,  0.07032951,  0.0541734 ,\n",
        "        0.0839357 ,  0.1498219 ,  0.10735725,  0.09873134,  0.07461398,\n",
        "        0.04794259,  0.03069523,  0.08351691,  0.10659762,  0.08070094,\n",
        "        0.05797626,  0.11336472,  0.09608791,  0.16405899,  0.0199134 ,\n",
        "        0.03475085,  0.15240549,  0.04713366,  0.1773508 ,  0.05921315,\n",
        "        0.14485323,  0.01735819,  0.077463  ,  0.05555067,  0.0653798 ,\n",
        "        0.09180058,  0.07962973,  0.08447259,  0.0764167 ,  0.05085931,\n",
        "        0.15062942,  0.05739614,  0.08111859,  0.08320226,  0.04260322,\n",
        "        0.0554873 ,  0.24198581,  0.07268326,  0.10872095,  0.12951359,\n",
        "        0.07015758,  0.06799528,  0.08177766,  0.0925277 ,  0.06983721,\n",
        "        0.12780077,  0.0619758 ,  0.03483671,  0.11044578,  0.07851195,\n",
        "        0.08405508,  0.05309885,  0.21667933,  0.02571731,  0.18646617,\n",
        "        0.08378755,  0.04264832,  0.02673967,  0.08151358,  0.11070217,\n",
        "        0.1263529 ,  0.09709113,  0.10911416,  0.14295316,  0.08972974,\n",
        "        0.1076499 ,  0.11072922,  0.03669454,  0.05292574,  0.0901812 ,\n",
        "        0.13421144,  0.08347749,  0.03395401,  0.09425716,  0.04441339,\n",
        "        0.0810299 ,  0.14155424,  0.08322564,  0.16319743,  0.03077974,\n",
        "        0.13629719,  0.11594506,  0.0726927 ,  0.22796239,  0.01184473,\n",
        "        0.12706519,  0.07175085,  0.08102169,  0.08202941,  0.07950796,\n",
        "        0.13703877,  0.04407878,  0.17350143,  0.06396044,  0.08933686,\n",
        "        0.30700384,  0.04812655,  0.02839102,  0.08343437,  0.11354576,\n",
        "        0.11323871,  0.07770948,  0.09771316,  0.17830819,  0.0795415 ,\n",
        "        0.17098277,  0.06137369,  0.04701954,  0.1131806 ,  0.09081005,\n",
        "        0.00384152,  0.2235064 ,  0.05256254,  0.12695812,  0.11352243,\n",
        "        0.02120352,  0.25916069,  0.07638055,  0.12703396,  0.10180217,\n",
        "        0.16033895,  0.13338178,  0.06420445,  0.1234451 ,  0.03716761,\n",
        "        0.13652285,  0.19550798,  0.11090291,  0.23048796,  0.06809934,\n",
        "        0.10853771,  0.03242074,  0.12772866,  0.14954713,  0.14726985,\n",
        "        0.12196486,  0.15271188,  0.04928138,  0.05902394,  0.25488414,\n",
        "        0.07047489,  0.04165356,  0.09141673,  0.10996464,  0.24283844,\n",
        "        0.07821864,  0.21316906,  0.13420613,  0.30189591,  0.11820022,\n",
        "        0.15936305,  0.13431756,  0.0279213 ,  0.20968884,  0.06081277,\n",
        "        0.26470738,  0.19306936,  0.26275092,  0.03484196,  0.17197234,\n",
        "        0.05402535,  0.1037722 ,  0.23795703,  0.15368597,  0.09248666,\n",
        "        0.18569745,  0.08330506,  0.21817351,  0.28864686,  0.1943335 ,\n",
        "        0.36049722,  0.18144814,  0.15496618,  0.02672847,  0.30331551,\n",
        "        0.69212297,  0.22285265,  0.46309348,  0.38556267])"
       ]
      }
     ],
     "prompt_number": 392
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(differences)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 393,
       "text": [
        "[<matplotlib.lines.Line2D at 0x11aa2b150>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAXsAAAEACAYAAABS29YJAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJztnXu8FVX5/z/P4XC4GngLFRFMkYRMERUzLye1QuurZhqa\nSt8uSplWdhHtJn7NzMzr1zIyS6MSM/0iXrH6ecwyLyQYykVISUAkUVAuAudw1u+PtZ9mzdprzazZ\ne/bl7P28X6/zOnvPzF6zZs3MZ5551rOeRUopCIIgCI1NS60rIAiCIFQeEXtBEIQmQMReEAShCRCx\nFwRBaAJE7AVBEJoAEXtBEIQmIFXsiWgCES0ioiVENMWx/utENLfwN5+IuohocGWqKwiCIJQCJcXZ\nE1EvAIsBHAtgJYCnAZyulFro2f6jAL6ilDq2AnUVBEEQSiTNsj8EwFKl1DKlVCeAGQBOTNj+kwBu\nz6tygiAIQj6kif1QAMuN7ysKy4ogov4APgzgrnyqJgiCIORFmthnyaXwXwD+opRaV0Z9BEEQhArQ\nmrJ+JYBhxvdh0Na9i9OQ4MIhIknCIwiCUAJKKSq3jDTLfg6AkUQ0gojaAEwEMMveiIgGATgSwD1J\nhSml5E8pXHLJJTWvQ738SVtIW0hbFP+tXq2wdKn+nBeJYq+U6gJwHoDZABYAuEMptZCIJhPRZGPT\nkwDMVkq9nVvNBEEQmpQJE4C99863zDQ3DpRSDwJ40Fo2zfp+G4Db8q2aIAhCc7J+ff5lygjaGtDe\n3l7rKtQN0hYR0hYR0hb5kzioKtcdEalq7UsQBKEnM3IksHQpoBRARFBV6KAVBEEQqkwl7GIRe0EQ\nhCZAxF4QBKEJELEXBEFoAkTsBUEQmgARe0EQhCZAxF4QBKEJELEXBEGoMyT0UhAEQSgJEXtBEIQm\nQMReEAShCRCxFwRBaAJE7AVBEJoAEXtBEIQmQMReEAShCRCxFwRBaAJE7AVBEJoAEXtBEIQ6Q0bQ\nCoIgCCUhYi8IgtAEiNgLgiA0AaliT0QTiGgRES0hoimebdqJaC4RPUdEHbnXUhAEQSiL1qSVRNQL\nwI0AjgWwEsDTRDRLKbXQ2GYwgB8D+LBSagUR7VTJCguCIAjZSbPsDwGwVCm1TCnVCWAGgBOtbT4J\n4C6l1AoAUEqtyb+agiAIQjmkif1QAMuN7ysKy0xGAtiBiB4hojlEdFaeFRQEQRDKJ9GNAyAk2rM3\ngAMBHAOgP4C/EdETSqkl9oZTp079z+f29na0t7cHV1QQBKEZ6OjowNq1HQAAQzLLhlRC9D4RHQpg\nqlJqQuH7xQC6lVJXGttMAdBPKTW18P3nAB5SSv3eKksl7UsQBEHQ7LknsGyZHlxFRFBKUbllprlx\n5gAYSUQjiKgNwEQAs6xt7gFwOBH1IqL+AMYDWFBuxQRBEIT8SHTjKKW6iOg8ALMB9AJwi1JqIRFN\nLqyfppRaREQPAfgHgG4ANyulROwFQRDqiEQ3Tq47EjeOIAhCELVw4wiCIAgNgIi9IAhCEyBiLwiC\n0ASI2AuCIDQBIvaCIAhNgIi9IAhCnSEzVQmCIAglIWIvCILQBIjYC4IgNAEi9oIgCE2AiL0gCEIT\nIGIvCILQBIjYC4Ig1BkSeikIgiCUhIi9IAhCnUFlJzQuRsReEAShzhA3jiAIglASIvaCIAhNgIi9\nIAhCEyBiLwiC0ASI2AuCIDQBIvaCIAhNgIi9IAhCnVGT0EsimkBEi4hoCRFNcaxvJ6I3iWhu4e/b\n+VdTEARBKIfWpJVE1AvAjQCOBbASwNNENEsptdDa9FGl1AkVqqMgCIJQJmmW/SEAliqllimlOgHM\nAHCiY7sKDO4VBEEQ8iJN7IcCWG58X1FYZqIAHEZEzxLRA0Q0Os8KCoIgCOWT6MaBFvI0ngEwTCm1\niYiOAzATwD6uDadOnfqfz+3t7Whvbw+rpSAIQpPQ0dGBN9/sAAAYklk2pBK6fYnoUABTlVITCt8v\nBtCtlLoy4TcvARinlHrDWq6S9iUIgiBo9tgDWL5cR+UQEZRSZbvK09w4cwCMJKIRRNQGYCKAWeYG\nRDSESCfkJKJDoB8gbxQXJQiCINSKRDeOUqqLiM4DMBtALwC3KKUWEtHkwvppAE4B8AUi6gKwCcBp\nFa6zIAiCkJFEN06uOxI3jiAIQhDDhgErVlTXjZMrovWCIAi1QcReEAShzujx0xKK2AuCIKTT46cl\n7O6u5t4EQRAERsReEAShCRCxFwRBaALEZy8IglCnbN2aX1li2QuCINQp11+fX1ki9oIgCHXKxo35\nlSVuHEEQhDqDtTJPA1kse0EQhDpl27b8yhKxFwRBqFPEshcEQWgCeqxlLz57QRCEcMSyFwRBaAJ6\nrGUvYi8IghBOj7XsxY0jCIIQTo8Ve7HsBUEQwumxYp+n/0kQBKFR6fGDqjo7q7k3QRCEnk2P7aDN\nM4ObIAhCoyOWvSAIQhMglr0gCEITUFXLnogmENEiIlpCRFMStjuYiLqI6GTfNmLZC4IghFM1y56I\negG4EcAEAKMBnE5E+3q2uxLAQwDIV55Y9oIgCOFU07I/BMBSpdQypVQngBkATnRsdz6A3wN4Lakw\nsewFQRDSqUXo5VAAy43vKwrL/gMRDYV+ANxUWOQdJyuWvSAIQjh5in1ryvqQBAfXAbhIKaWIiJDg\nxpk+fSrmzNGf29vb0d7eHlhNQRCE5qCjowPr13cAAJ57Lr9y08R+JYBhxvdh0Na9yTgAM7TOYycA\nxxFRp1Jqll3YySdPxcSJZdRWEAShwWlvb8d227VjwwZg1Chg4cJLcyk3TeznABhJRCMAvAJgIoDT\nzQ2UUu/iz0T0SwD3uoQeEJ+9IAhCFqrmxlFKdRHReQBmA+gF4Bal1EIimlxYPy3LzsRnLwiCEE6e\noZdplj2UUg8CeNBa5hR5pdSnk8oSy14QBCGcHpsuQSx7QRCEcCZNyq8sEXtBEIQ6Zfz4/MqSyUsE\nQRDqDB5URd5A9uxUVewFQRCEcHqs2MsctIIgCOmwyIvYC4IgNDA93o0jYi8IghCOiL0gCEIDsmkT\n8MUvRt9F7AVBEBqQhQuBn/wk+t6So0JLNI4gCEKdIpa9IAhCA2JrpIi9IAhCEyBiLwiC0MA0ROjl\nsmX68/z5wOLF1dy7IAhCzyJPsU9NcZwnSgF77gk88QRw6KHAdtsBb71VzRoIgiD0HHq0ZQ8AGzZU\nc6+CIAg9kx4r9sz8+fq/+PAFQRD89FixZ3H/61+ruVdBEISeSY8dVMViLxa9IAhCMQ0bZy+iLwiC\n4KfHi72IvCAIQjo9Xux93wVBEIQGGFTFiMgLgiCkU1WxJ6IJRLSIiJYQ0RTH+hOJ6FkimktEfyei\no31liRtHEAQhnapPS0hEvQDcCGACgNEATieifa3N/qiU2l8pNRbAfwP4ma88W+xF9AVB6CmsWQNc\nf3119lULN84hAJYqpZYppToBzABwYrxSaqPxdSCANb7CROQFQeip3HEH8JWvVHYftkZWM85+KIDl\nxvcVhWUxiOgkIloI4EEAX/IVJiIvCEKzc955wCmnuNd1d+v/lbDs0xKhBcmzUmomgJlEdASA6QBG\nubb7y1+mAgAWLQKAdijVHlZLQRCEBuE3vwHWrXOv02LfgQ0bOgAAl12W337TxH4lgGHG92HQ1r0T\npdRjRNRKRDsqpV631x922FQ8/jgwahTwwgt6WVcX0FrV3JuCIAjZqYZnQu+jHX37tmPzZuCSS4DL\nLrs0l7LT3DhzAIwkohFE1AZgIoBZ5gZEtBeRftkgogN1hYuF3sT0S/XuDcybV1rlBUEQGgl24/D/\nqrlxlFJdRHQegNkAegG4RSm1kIgmF9ZPA/BxAJOIqBPABgCn+crjA7BZvbqkuguCIPQ4kt4QzjhD\n/6+62AOAUupB6I5Xc9k04/MPAfwwZGfXXMO/iS/P84AEQRB6KssL4TCVEPuajqCtRHiRIAhCJahm\nNOG2bfmXWRfpErI8vVatAsaMybc+giAI9URXV/5l1oVNncWynz8fWLCgcnURBEGoNQ1n2Zv/586t\nRU0EQRCqS60Gl9aF2M+cCRx4YC1qIgiC0BzUhdhv2VKLWgiCIIRTCYu8szP/Mn3UROzteHuJxhEE\nodlYuBBoa9P9kNWgLqJxsoi9JFMTBKHe6O4Gnnsu229eL+QZeO9786+Pi5ra1BJnLwhCI3DPPcB+\n+2X7TbV1r8dZ9oIgCLUgyauwaVPyb88+Gzj11PiyauteTfNNimUvCEIz8NvfFj8QevWqbh3qIhrH\nNYL261/X04D5fisIglAvlJLDpincOCFcfTXwpz/VuhaCIAj58fbb0edqW/Y1cePY1vmcOe7tJBum\nIAjlQKQFtm/f8stK8iqEalX//tHnprDs7UZ77LHSfysIgpDEhg21roEbU+xvvhl47bXK7q8uLHtB\nEIRm5pxzgDfeqOw+6sKy9yFuHEEQeiqvJ07OWqyDlU6dUNdiLwiCUCu2bgX+/vfoexbdevRRYKed\nkrcRsTcQy14Q6oO//70yOdbrmZ/+FDjooLBtba0K8b/bOcK2bg3bV6nURSK0LMhbgSDouUrfeqt6\n+zvoIGDWrOrtrx7YvDlsOyJg0aL4shCdsrcRsRcEoYg99gAmTaruPistRnljD96sJP/8Z/J6l5ci\nzY3T0VFWlYqoa7EXN07jsGEDsHhxrWvRWKR1ADY7PrG/4AJgxozw3/u+m9haFfKAsXXQFvvdd08v\nIwt1LfZC43DhhcC7313rWgjNBOuMrTfXXQdce23162NjPxDsScbzNnaDxJ6IJhDRIiJaQkRTHOvP\nIKJniegfRPRXIkrM0Ox76s2ebZcb/luhvqmmf1kQgPLdOOVoTchvb7kl/t3uAK+62BNRLwA3ApgA\nYDSA04loX2uzFwEcqZR6L4DLAPwsqUyfZT9hQnqFhZ6JPKTzp9ptmqf4PPNMfmX54PbJy5OQdPxZ\nXD7MtGnx7/Vg2R8CYKlSaplSqhPADAAnmhsopf6mlHqz8PVJAIneptDG/9e/RCQaBTmPAvPPfwLj\nxlV+Pz43TiilCHg52D77Woj9UADLje8rCst8fBbAA0kFhjbaV78KPPJIfHsRjZ6JnDeBqVZUTzWj\ncfKg0pZ9SG6c4KYiog8A+AyA97u3mAoAePVVAGgv/CVzzDHAAw8Axx1nVUpJtI4gVJO87rdqiW+S\nZV9p7SjlGCOffQeADlx7LTBoUH51ChH7lQCGGd+HQVv3MQqdsjcDmKCUWusuaioAYOeds2V44wRB\nGzdGHX2VFPuODmDMGF1PIR96inUlVJ5qXQu17KD95Cfj30O0KrLs2wG042tf0+GXl156aekVMQhx\n48wBMJKIRhBRG4CJAGJj6YhoDwB3AzhTKbU0rcCsPjRu9PZ24Iwz4ssqwQc+AFx0UeXKb0ZE7AWm\nHiz7EPKsZ1JZnJKhqwvYZRdgaMFJXnWfvVKqC8B5AGYDWADgDqXUQiKaTESTC5t9F8D2AG4iorlE\n9FRSmaXm2Fi40KxXaWWEUk5DE9VvDm1BqDXVGmeTFI1Tyv1ZKc3Zay/9f9s2nTxtWMGPUpM4e6XU\ng0qpUUqpvZVSVxSWTVNKTSt8/pxSakel1NjC3yFJ5eVxstPK6O4G7rsveZu+fYHbby+/Li7M6ccE\nsewrQU8OvawGrBGudnr+eWD16urVJantuJ4PPww891zl2rkmI2iTLPuddgKWLXOvyxKVs2AB8F//\nFX3/2c+AFVZPw5YtwJNPJpcj5IOIfX3w9tu1z3FTbZ+9zzDcuDHs95XG3g/PYFUTyz5vksT+9df9\nOT98Yj97dvGJsxtw8mTgppuKy7z11sSqNh3DhjXeRO8vvywPG2bkSOBjH6ttHVzi290N/PKXpZe5\nfHnxsiTLPml5yPq//CWe674c7P20ten/DS/2QHSwNmajdHdrq/yPf9Qjb2+8US9/+20dseNqKNcE\nv2++GX0eNw6YOTO5bnmxzz7A5z9fnX2ZEAF//rN//YoV+kLOm1qK7fDh2eY5bmRWrgT+8Y/8ylu1\nKvtvXNfCypXAZz5Tej322KN4UFKaZZ/1mjS3P+II4Nhjs/0+pFwgmpS8KcQ+xKevlHbTfPCD+juH\nZN56K3DJJXFhf/ll/f+OOzjG380zzwAPPaQ/+xp66VLgt79Nrpf538eSJcmiW0mefbY2+60l69fX\nugaNxxNPALvtlrzNa68BAwbEl+X94Pfdc3mK/Z/+BHzjG/Fl69aF/z6Ju++Of28qsQ+J1lEqfhJZ\n7Ddv1j3tZkMNH67/L1kCXH11cVmhHcYHHKBfgzn80wXXvdlm9Umj1m6USu3/3nuBtZ5RJfXA1q3F\nIzPzIuS4//UvYNOm+LJKib19H+fpxlmwwL3NE0/o/3kKc8OK/eDBxet9F6ftxnGJfXe3duX4GmrL\nluJloXM/mhbx977nvljKje1tVBpV7E84AbjhhsqUnQcjRgBnnZVPWVlztr/1lnvwZJoIZ8V3z5Vr\n2YfUzxzkmRcNJfamRbDddsXrbavY1ZBr1sTLMRs9aTox1zozOiG0gb/zHfdDKYvY11oAhXyo5/O4\nalXlMkymHffxx+s/G76/82i3IUOAa67Rn/O07I8+Ot6fl0V4y32rbyixN7H9eUCYZW/7nTkap7s7\nLuj2CXVZ9qWGorkEvSe4cWohTvUsiOXS046tWjluXBEyQL5vv//+d9T57jMSS7HsH3kkfapBV1n7\n7qvdxTZZ2rxhxb5fv+JlPqE0T47P9cJiz9vaZaW5cbI0sC+EzLeuGnz/+8B3v1teGVu2AJ/7XD71\nYRrZrVUrsc+y3zffjHznedW3VDdIkmVfTt3y9tln0QIua9Ei4PHHw3/nomHF3tXgIZa974HAYs8n\n2t7OZcW73DghDe2qQ6XEftdd/ZaSydSpwGWX6c/z5pX2hvHyy8Wz6Ag9F6X0+ImTTsq/3FLga9K8\nR8pJWsb3Rd4+exOfHvBysyy7Q3rFimzRYGwAN6XYT5oEnH9+fHnSA2HzZr87Jc2yf/55d31c0+pV\n043z6qvx3EA+zPYcOzZsYmWbXr3Ct3366bDtau3qqOT+Sy27miNZ1693uxeyQhRFoNjH/dJL2Ywk\n8/6xjSQi4Oabi3/7+OO6v86EXbpmeYcfHrWvT+zT7tFS3/LNVCnLl0e5bkLh+68pxR6IBk0lbQOk\nW/auDtrly7UVDACPPlq8/qKL3Hmls1r2V1+tc/Mz5QzqCN3Gdbxp5YSK/VtvAYckZkFK5pVX0oes\n9wRKEfstW4A+feLL7roL+MhHyq8PkfZlm9+BqJ6ligj/jn3Z9jXO41nScLlXXPcN35OvvBK5Rt7/\nfuCCC9zlmvfjX/8aJTvznZ+0t29zrE4Wy968pktxhzZUugSTJOs4iVLF3mXZn3aatoJ9+Dpqknz2\nU6cWr/v614Fvfcu/nzRKEZVSfsMXW+hvS408GjoUOPvs8HqVQ9Z2mDs3PD7dLvuNN9JvVJdVP2NG\n3Bhw8eijwMc/nl4nngPCVb9SyRp66WuDJMvede9PmaJFnvGdl/e9z12/NMs+S0esD58bx36gh9CQ\nYv+HP2Tz2YdsY4u9bTn+85/AnDnxZaWmI3ZdmLzsd79L/301LPtSbnRuu7TzwGXbwvXcc8n1Wrw4\nCptNGtFcSw48EPj1r0v7bYh/tlQBvvPO4hGXoeXn3TFrlxfyMNiwIQrHTLPsubyh1iSovuPgBIp2\ncEZaR/Hee8eTL55/fnz/9mezPF5u1tsU+1LcuQ0p9kDplr0vhbAt9qeeGl//6qvAwQfHl5U6wrC7\nGzjzTOD3v48vS8J1Ajds0A8+k1NOKR6OXYrYlwIfQ9pgMz5Ppth3dQH77Zf8u3e/O92i37y5ciM/\nQ3G9BSbx4ou6zULOgcuVEfK71pC55Txl8bLNm/PJf5T1Wjv+eOCee6LvST57k913j38PTbfC14/v\nnjSXm9cau4zNh7YZYSNiXwJKlW7Z275opYD587XwmB20ixenl+UStZtvjrLaJb2O/uY38Wx9WaJw\n+NhvvBH40Ifi6x57LP4qbm4fUmY5ZBV7UxRdr+iuevHblK9t3/lO4Jxz0usaSintctFFxWmxX33V\nb8HutRdw1VVhZYcMLLr33uJlof0pSWL/2ms6kVcopYYu2jz4YHyOiVCxt4857R7jtk0T+23bomNo\nadGDz156KVr/8MPRZ/MtL2nkPBA3RENH55s0pNgD7hORlHuGcVn2730v8JOfxC37LFaWzQ9+kFyG\nGTnAmE/yp55KD5c84gjg4ouLl2/e7M/iVy5K6Yfi//6ve73LYk/aziX2oRaN75jWr/fnIzn4YODc\nc8PKL4d16yKXCRFw//3F4g/Ej2H1av8xbd4cXStpQgToVAz220U5Yp/G2rXAddf5y0pzEWYVpzQ3\njm//WS37pPuXr/Ft2/ScF7Nmubf11du1zDRES3ERN6zYlypgtmXPDbNhgz5xaWFXIaxdqy18X9pj\nvuh432PGxG/O8eOBT3+6uJ5muKLvdfrtt4vfcLK0VVqSqn/8A/jSl9zrynHj+MS+lL6E3r3dy+fM\n0amtXeQd3WOegxdeSBYjIDlVh2mgJMWam8vtdsrDsvcxc6Y70sXX0TlxYvx7kji5IoHSLHve1r6m\nslr2Rx+tr4uHHioeq8P3a2en/uy65pMSuXFdzLdwswwz5UIoDSv2pYqxy41jwifIV775iuZjzZpk\nV4Jt2S9YUNw558r9kxauuG2bvmDsC2/btvD22mGH5PW+OQN4P4Dev29uACCqS4hlX8pD3Sf2QPHc\nBKtX6wfcwIFRyF4e2A/ctPZPEnuTNOHyrS/HZ5+G/SB5++3sb8m+OrjEXqnI8uV9uNov1C1jb2/e\nP52dwHHHxQMCtm2LQqo7O7XR4hL7j340/t01uNM02sz7oZTpSRs2zr5UsU9zMZi5clzYHaIu0uao\nNAXN9xpqZ/UMOYGmtWHysY/pv7lzw28833YcEpbkf+zsTH5DSLLsQyN5ko7jlVeK+y0Ysx3fegvY\nZRdtwQHueG97P1u3xv3HM2ZEo4bN8xrydrV5sx74B+hzx9vceivwqU8V11mpdLHn/doPTVOQk6z3\nUix7fpDwpDoHHwwceWRxmWnlvPZa2JvcK69ExhC3g9kZ67Pss7px7M+uZWzZu3Rl0aL4d/NYXOWa\nb53iszeo1OjDNLEP2W9aWKBp2fNJtevlSuHsq8NVV+mJUdi6cV1IzzyjwwIfeSS5bjZE8QFjfCG5\nLkbTMnLN7vXcc9qX7fLZ+0SqFDfO4sU6Kom55x53OgvuIGd/usuV873vxUdB33dffI7ic86JBsCY\n1mWIZf/KK8D06dFveZtPfxr41a+i7Ux3iMtKdVmM3d3aauS6pVn2SfHqoWI/bZr+//zz2t0XmgKE\nz8k736kfnuY5euGF4u35LXj6dHfZRMBPf6rHpwDZLXtbzG1MQybJjZN0LacZNZ2d2TrDgQYW+1It\n+7QnZpobJ4/OTtNn7xP7gQPdv3Fx4YW6c5ojiFzH+I536P+33pr9FZHLNS1LVxncZlu3RhecOZXd\nuefqgT1pHbRmmgn7PLgmfViyRM8/zBY6EL8hTfeM60bgfbs6xZ55Rr/N8fy69vk3XUZJYu+6buzf\nJuVt4nomWfZr1kT77ezUDwx+6zAfvhs36lz1piXpEroki3zFiqjvxtUf0NKSbtG7XDT2W/Ho0cW/\n48CESZP8YZBmWHNWn715//A1av7WTLuQ5MYpR+y7uoD29uLlQ4b4f9OwYl+q6JYr9nlgls318cVm\nc1SO+TDwHfthh+n/rmgC9jFOnx5NoZiE+VvTKgwR+87OaLv99y9ebz4U7HK3bdM5/11pJgD3UPZ9\n9tHi5XtrMbd1vXHwvs85Jx5Cx9x9t543lCieInvjRr+fNcSyN7cxLXtf/dLE/otfjNbvvHNcbMzr\nfv58HRL4ne8A22+vLeUky97FzJlRVJZ5fXD7tLQU++xdLrF77gkbM2AuN/3c5gOWz8UNN0QPZ6DY\njZMWOGGeFz6n5rLXX48+J7lx7GXjx0efzTdPF11d7r6n//kf/29qKvZENIGIFhHREiKa4lj/biL6\nGxFtJqKvZakAX0iuvPZJ1IPYh1j2zB57JK93wWWaNy5b9ub6JMyJK/hmvu667GIP6Bv1vvuKQ+B8\nlj2HrvJvQ7AjH1z1ApLFHtDT4dn7NT+bboUjj4y7fszj+fvf4+2cJvZbtqRb9t3d7jh7/mxPJZjm\njiDSYaJr1riFzpW/hTHralr2HPba0hJly/TdS3/5i97Gdkml7c/kqKOiz75ObtuNc9dd7u1cPnu+\nzkeMiJaZYn/ssbr9XO1rG3Dz57v362LDBncwhOv6tddVXeyJqBeAGwFMADAawOlEtK+12esAzgfw\no6wVyMuytxsmzWefB6bPnkXcFnOXFRQKj8ZcutS9vqtLuz6U0gNwXG8VP/tZ9Jlv5pdfjupudiAy\nfEMuWBB3Ebz6qvZz29bjG29EnaKhMfo+fD7pxx4rDsuz3w7Mm5uP1feAMD+b6R1efjlezsMPa5cZ\n47pezWvxiSf0SFoTOwy4szMehaKUftXnPqKZM3XWRsb1BmniCmf8/Oe1v9tXZ8Z86Jh9Gp/8pP7f\n0hJdA76oHD5nvv4Hk5D70fd2bLpnnnzSn87C9cBzGRF25Nzate72LTc7qcuyTwqhrZTYhwRyHQJg\nqVJqma4AzQBwIoD/JNxVSr0G4DUiypyzr9Swrs5OfZH5Bk6kTdSQp8/+iSf8bhz74jbXp9Whq6vY\nAjCtns5O7fqYPVsPwEnL5eJy4/AsPya8zs7YZ7tveLvJk3V7m30BaaGxvuW22PMFf+SR8QRgRDqS\nw7TQzbZ1CVBIFsPhw4FLLokvM99+zDbg8mxXjz2KdtAgXQb/9owzooRn3FlrZ1s1H/A+Nw7j6thd\nsAC4/nr/dvb2993nHsxoihK7VOzjZTGz3wJdhLiXfJY9/3b16vhbo287s61cb7B2387GjZVJO53V\nss8yp0YWQtw4QwGY40BXFJblQjmhlyee6F+f5A5wkdWNBEQX1apV0eAJ+2KxbwxzvW0B2rgSapnH\nZXbiufaPs5EzAAAc40lEQVRt4xL7fY13NA7HTHND2G4cs04svva0kaEP16RoE5drwjcOwGXZm8Ll\nS2wFACtXxr+7OuRMobDbyx4ox+LFdTEzW5ouHR9pYm8+fJOsa/v7FVdEkTeuicGBuChxZJFdX1fH\neCXEntvePj82SW4cE1vsN20qLVQyDZfYh1j2eRNi2edgAzNTjc/tANqdPfkhdHbGG9Fn2YfSp0/2\n0Ze33x595ospi9in4ZpswiX2LNK+iaVdEQN805mdTebQcUBbbPbAFHO960HN4Yynn+6ui4193pPE\n3mWl9+rlFpbWVu3H/sUv0vdr/94WAXM9t8GgQTrXi7ksDVd7hYi9mUHVtS/zoW+WZeeFso/zm9+M\nPn/2s+59u4THd02bo0XLceMkWfb9+ul7LcQ1lWbZ2/e7ayBjVo46Sr+lEUV1dLlxkgR9/vwOAB3O\nNOnlECL2KwEMM74Pg7buS2Bq0ZJy3Dim2Ns3TClinxUz7QHvz75Yurp0XDyTRexdFowryRLX3UzT\nasLuDTtqxCzDvMH4nPTrFz8e+zehER/f/CbQ0eFel+bGMffjsux9N824cTpc8WtGuID5e/N3tngl\nPfTNbfn8hwjEL34R74RkQsTexHX98P47O91iWo6ApXWEA9H1lZfY+3z2ZtsnnSPX9eIaM7NhA3Dy\nyfGU0SGpyZPge7G1NWr3rD77/fdvB9D+H7G/9NJLy6tUgZAXhjkARhLRCCJqAzARgC9dUGYvUzmD\nqkyxtzvv0qz0pDjrUMy0pyz29oXa1aVHvDJZbjx7+jUgLva8TxY+3wXEA35cHVadnTrW2pz4nduy\nb994OaWK/RVXJN/kRJGf3CX2LHDmAynEr5nUOc6/+9vfin9nXztmvhizDc0+mzQ++9moDcxjNAdY\npdHV5RZ7n2XPuCKTQnG1r8+yNzt4K+Wz7+rSAxV9CcYOOEDPCGfX8ytfKd52wwZg1Kj0+mSBdcRs\nN5e2JF23efvqmVSxV0p1ATgPwGwACwDcoZRaSESTiWiyrhztQkTLAVwA4NtE9DIRDfSXGlHOoCpT\n7P/85+hzv37ZLfukXDHMaacVL/vAB/R/3l+aGycLLrE3j4vz3dsJ2WzYQnD5MLduLe6k5XNiDwjj\n3/Dw8SwWaRocd3znnfHlZqSTKQK871//2j0604VL7HlMg0moZe/yDSfheohmsey3bEmeQ3nduuT7\nqRSxd5VXacs+ROx9E8Q8+2w0ECvtvGzcCPTvrzPl5oXLWHFpi+te5blqayb2AKCUelApNUoptbdS\n6orCsmlKqWmFz68qpYYppQYppbZXSu2hlApK7pmX2Jv0718s9r55K5mQBFOu/e22m47g+MY39Hdb\n7F2TJofiEnvTeuLRpccdp//7bhJ+IJlvFZxigC17E59P3vZ75hHWakehuMpkMTGtcD6WH/4QuOmm\nsH2FDGgDkkcmu8Q+FN7efiMNFfvOTvc55jode2xyWaWIvSs/lM+yNzt5yxF7n0jzft7xjkjsXfct\nP3R8bk1mwwZtGH7hC/qNIA9cb9ehYh+yrhzqZgRtKT57n+vFJfa2lWoTkjrW5ddXSv+WR8hmnd0o\nCZfYm+3Elj2Lky+d6m676f/mTWR2LtqvxL4MhLYIhk4wbVLKhRwyqtEFu69cv0my+kLXZRV7fvDb\nIYrlir05WriS40qYiy+OOksHDIiueXMSn3LcOL7+nU2btHAOGBDd30lv5L7OeeattyL3ZV4RMC4d\nCXXj/PCH+q9hxb7Ui/PFF/0C7RL7tPkxQ8TedWEpFReAPON0fRkfGVvcXf5nIHJL2P0FffpEYm9a\nNjxDly0s9vf//u/490oJjesBmhZ+BxS/NdhjFHz43pDMkdJA9uO99lr93zxvWXz2PKQ/CdfsVkwe\nY0uY55/Xde/d299pnJRRNYlrrnEvZ0t84MCoDcu95viezuva5TcN89ht3WhtdQv6aadpD0HDin3I\nBeiayQnwC3TfvjoToYn95E5KHevDJ/amAKxalV5OXiT5ls3j8fUn9O2r675+vTuHjW3Jp+Vqz9pP\nEsIzz+gJoW1KmQHIPJ6kh7KvXe1RpnkIRB5uHJNvf9u/Lk8R2bRJ17u11f0AuvNO95tmOf08ptjz\nPVfuPMWuAWFpDBumI3jsiYkAPb8y4M9J9a1v6TexpnPjEMVvGJ9/e8wY93KfQI8b596XCU8q7Fvv\nwif2pnCYsfflwDk8kh5CLsHji9d8uE2frq14+6bs10/XfcMGdypme/u0LJt5zxLlw4wcyoKZQTPJ\nQvYdx+LFUbpdIJ8O6rzFPmRkZrkMGRIlfPNZ9gsWuK/PctpszRptoJguWZfYp7lsTfh+yfLQGDRI\nzythP+z32isSexPznAwbpnP2N53YA3Gf/ec+F/nFeVKD55/PfvBmXhEgCsVywfsL8dn5YvHti507\nRMuBc5P4skYC4ZY9oF1bLst+3Tpt2Sfl3WfShKZaYl/KmAggPmI5Sex9byj2JBZ5iP2cOTrdRQgs\n9knHX2mxP+UU7fLj9A8+y95HSJiqj/PP11Zxmpibs7Ttthuw337+bVnsXW9p73yn/m97FlyuGrsM\nc515L7pCM20qNYK2pmKvlP9VmJePHu1vGJ/4JJ0EmymFHJ4hDRxi2QPJAg0Ux6+74Ifdu97l38Ye\nIQn448/tAVKAPp4XXtB5UbbfPr1OZpZAF6EhkOWSdD5DH7RJbym+8u3jy2INHnSQe/lZZ2kRC2HB\nAi2s/fv7tylX7PfcM3n9j3+sHzZvvx2Vt2kTcOaZ6WXnRRaxJ9KhmNOnx0eLM0luHL7fbePRlXeJ\nv5vaw/szxZ7LbErL3m4wczYfxj74//s//d++YTkfi0vsfX0DSU9a+wLOS+xDrGi+oD70ofRtTViA\n7LZhl42JKQwhdUrKwQ1EIaDlYg7jd5EksiEPUsDfmZ3EqlXx+UiziP1hh5U2cM/klFN0BFRSHqeW\nFr/bM0REzGkBXfTvr9v44x/X1/7y5cCVVyY/gPImTexNw4WTBZ55pvv4Q3z2vpQeLu0yH+o8kMu8\nz0Is+4YVe1+ypqTc5dzYtqDxRdDdrTv2/vrX4rJsXD5uxs4a6BISV97uNOEMEVauF79KMpMmuf2C\njO9Y+/cvft3OKva1xLTKkkS2XEFlfH0lH/5wWD1sJk2KC6JrMFcoaZY9GyXvfW98nS/ZmUnaMfXr\n574P8mr3ENKSFpr1M99mk8IiXWJviy4/CFl/7Bh/pbTf3ibJsk/z8edJVcXeFsb3vS8SJ/aL2RkV\ngeJGt0eMPvyw/s+uD6WAsWOjGyrEsnddCL16AfffH33nCUjsY7Ip17J/9tmoXuYr6apVwG23Abvu\nmvx7F2ZsMmO6wSol9vvsk/03rjblcwtUR+x9fnE7KVpIZ/ENN+igAVMcZs1yD+Q5+2w9O5WPcePi\nE9jYdHVF1/L3v59eN5u0dB69ernF3jw2n8sqL9io239/99ukT+xd55TrnST2LL587vk39nmwffau\n/E12rnpzrgR7v3lTM8t+113jr2Pf/a7+zw06fHj0JOWD57kyOzv1nKgc+sR+RtOyN0my7PnE+dLk\nHn989N0lXObNzw+DcsW+pSWqF4v9nnsCu+xSvE+bAw+MBkyZ7Ltv8TSGw4dHdS5X7H1DzvPKPWJa\ns7bFamKK/Y8yT6UT4XugmOLx6KPaNZZ2jCy+pkHR2uoeNHfGGcC//+0va84ct2hxfvdt26J5Y4eW\nkIg85G0lzbIPdaUB8bmNfZx7bhR+u9120X1+553xSeMB3f9h7t8UWpcbNosbh+87Po9JYm/+zqyD\nbahymWYncsOJvSlYrnSzTz8d+eB5PbtVOjt144wfr2cZsnOO2I2e9NrHJ8716mQv45GovuPg/Zcr\n9hzSBgA77qj/m5n5zFhvV30mTChe/p73FA9EamuLJrL21SlUMPbcM+ocNWd+8lnIrrb0cdpp8beZ\npL4B84YeNCgs5xFjirEvDt+c2etf/9I3b9oYDX5w21EZdpoKXg5Ehk1aPZkpU3Q02667RutDUoDY\nhCTqc4m52c5ZHvDmm+tOO7k72H/842j5unWR2PfuXXyPTpoEHHxw9N0UZL4WzX1we7s67H3BDtyu\n9n3uE3szsIEfprbYm/M/NJ3Yb799dCHYJ9RssDFjirM/mmUvXgycd17xk5sfHHxj8G9N37B9U6W5\nCHxib4tsmth3dUUXlOmaYlwWIeMTKZdrYNu2yGK23RFsacyYER8Gb8NvVeaNZ3cQujIOXn65v0z7\nzeX22+MP7CSfpnmO+vTJ5tYJGVjHD1+TWbPivnxfuab4mp9dGRKvv95/nL7lhx8OLFwYrS/FpRUi\n9q4HOF9HAwbEZxRjhg93P3zMZWvWxM/9ZZdFxgYLaUtLsti3turrjTXCFHt+IJkPA24jX2I1oFhX\n+LttCPlCLw86KBo97RN78xpoOrE3sQ/eviDtG9Bs9H320SfUzmc9dqz+b4u9KcS+jmETnv8ViG4C\ns4wbbtCDUIBoph9ef8cdxeVx/fki5AeI2bma1NHmE3vfxBm+PouJE/X/HXeM0iLY89XOmxcNbXfd\neIC++V2ugawzg/nmj7Wxxd4+Z9OmRdkFbULE3sVeewGHHupfz8dvu3GY97wn+mzW3+eu89WTxYwn\nCy9F7H1uHDPCxWXZs7GwbZt7v336uNuI2+HnPy8Obf32t6O3H/Oed4k9p/jo3Vvfyy5XS5Ibp7u7\n+LhMy37QoMiw4Xvx9NPj94TPZ9+/f2Tw+MTetd+8qTuxd2GuP+AA3bFrMmxYvDyXsNlJu/ji5IuN\nLxpTqO2byvda/NGPaquKUyCblv355+ty1q6NXBG8jyOOcJe7yy7RRcgWkyn2p59eHH7Gs1r5LDOz\n445v3G3btI//7ruLz4F9s+yzjx41aLL33pFot7UVt9cOO2gL1eUPNTtcbVw3QKjYmzd0377Fbdu7\ntz/VQqliDyRfw/wAdh3D4MHxOoeIve/Nzk4hUKpl79qvaUS4xJ6v082b/aLqesDz73bcERg5Mtq3\nOekMEH8IucSe+57M83355frtgGFjzDw+s4243CefjO+bSA/m4sFv7PJpaYlP6xmS+oX7Hpoq9NJs\nmLRQI/Pg586NN3Ba2cwpp+hY2/Xr409xO+vdtGnAI4+469XSojvCRo4s3tdjj0VplFkgzz032m7w\nYO2TBKL/fFzmdILz5umOadON8/Wvx2e7uuWW+MQp3/lOdBG5LPsxY7R7it0xnCWR/c0f+1hUF66b\nHXGweHHxnL+mm8Rl2Y8dqx98LmvRJ/Zm25qYQpyUAM+8eYcMKRb7tra4f9acpL0Usefc6SFi7yp/\n5Mh4nUP6GOz5fRnOgspz4KaJ/R/+ULzMZ9mbo6NNsWcDprU1qrvrOFtb9Zus/TbL959tjNmd62a9\n+KHBVjx/Nv8DerzGscdG35MseyC6Ju3Q1pYWbSDxw8A1iQ4QGZm9e+t7w5V8kSMEkyz7hgi9NPEN\nmpo0Sf+ZZD14VwOefbYeRTdwoN4fX7B84XAdBg1yD0rhAVZTpsRjpF1vKHxR2Dn0WZCPPlp3MrKF\nr1Q0FJ+Plf/37w9cdVWxOLJPva0tPtjJJfbPPaddBXxj8ZvH6NHF29rhgLY1ZsYFt7bGb7ITTojn\nJUqawNwVK77XXvpVPu0GGD5ci4Yt5AMGxG/e8eOLBa93b/3Kz53I5ohROywuCX4rY/+0+Zv9949v\na4v9dddF68w25PqZ8MM2rdMfiMSeo5XSxN6s84UX6v8h0Timz54TDiqVHIXTu7c+hk98onjdRz4S\nuXh81rHPsudj8MW+m7hi4LmN7rlH90+56mBfD6axYF6XrGkLFujrK8R6d53XhrXsBw2KR1rcdpv+\nM0lKGeAiJBshuzJYzMyTZrtInngi6mABtJ/6qaf0Z/vCmDMnGghlWzgDB+rOoSFDgAce0DfHHXfo\nh4sdwcBum6QH3bhxwCGHxJclZXM0O2Gffjo+aIwvsLvu0vH8HPFj7/+hh4A//Sn6zjdLWxswebI+\nfoYtKZeAmFEYTFLkj1mPsWO1aHR2xvsvTMueH45887Mfe/Ro/TdmTGRp8exYfC7TQge3bNFhl+ZD\nzKyfOQ0lEJ0TrsuXvxytSxN7jlrytY3p7z/33OhNw9yfD1NUWMB9bkDzjcv3EJk6VRtDLrEy76lt\n2+KGxn33FV/HNj6x5+AMPtakB9xXv6rThrsyUp5wgq7DvfdGxp7vTS9N7PfeW/8lRSVxG+23X7Fb\nrlJiX0JwVj5wgy9enP76PHp0tlzcIWK/4476dWzePP3dPGn9+sV95HZOjR12iMTKrte4cZEIuISa\nHxKMbelweWlJx4C4K4dJEnvz7cA38OUd79B/rrBAQFvVw4dH9WRBt2+yY45xT+O4apV+2LEVeuSR\nekrJ559PHkzEFtDatfF+FXY7AVrsfblH9t3Xfw3xfnn9Rz4SF83Bg6P6Au59mOfa3neSGydE7Bct\n0gYRP7C4zq+9Brz//dFbyk47xSNhXMJ39tlRdlnbwDn11HiwQ+/e2k+9667ABz8YLXcdh1LRm6zr\nujQfVi0tfkHznaP2dn2NAPrBdPvtuhw+LyHhpuyOSYLTYcybp++Dd72reKS5mVLCJfYMGxQuTJeS\nHWDSUJb9Jz4RuUWGDInfsHkQmme8Tx//0PMQ3+nFF7unO+QLoBQfsG+WKBdtbcX1tC2zI4+MPh9+\nePF8sz6uvjp9WjfA7SsFgD/+MYro+dGPIj9yW5u+mPmNavhw/X/06GLRNTn/fB1WmBS2artxgLB2\ntKdhvPPOeCbK3/wmvYwTTvCvS3pLM33dQPzz449HfQrf/3584FpILhqzLe6/X7fx5ZdHkWmmqAwc\nCPzud9EUj3ffrd/yPvAB7brzWbNMmjFmj6vIKmgXXAAsXRr9lg0JFvss4absitxvP//1tP/+kYvP\nrOtLL8UHJyaJfRLvf3+UzsXmXe9KHjhYKjWx7H0hh3kR4t9kXD30ofiGo/sGY4RgjjMoBds/bs7W\n1NJSnMGPGTEi/qq+/fZhdTDdOD523jkSct/DIY22Nn9OoJUrtUAfd5wWrYsuito+JP0u36QTJ7oj\nXULqOmaMFiNzopWddtKRVTyIx2fZX3UVcNJJwGc/G98XR51dcIF+EzNdHX36aMv+qqv8dTKt3OOP\nj48GB/T1sHq1NrjsPiE78sp8aPJx8MPniiuAk0+O1tuW6tVX67cGk6yWvQ8We9t3n8RnPqP7BUOv\nQbOu9sMhLWzcR0uLPz/S4MH+TvhyqJkbp1K8+KI7h40P36jbPChF7LkeJ5+cPHjKxd13R77Nz38e\n+OlPw387eHBpKYqzijc/XIl0X8i8ecVzxTLXXKP9rGnstlvcD24SYtlzm5uT55jnrpSRqL/6le6I\nN90XPrEfNUpbkbbYM65p+vr00Q+TpOs2JKSZ+5fSMkkeemhk3fNxfOEL+v9FF8W3HTVK+9LvuUeH\nCbvO4UknuY2yqVOjmPkQDjtMGzR8rCFv00TZjI2Q3PNPPVVe6G41aDixT8vHbcNWSL2IvTmizjVa\nMwnTGjvmmGxiXypZxN62fMaP13+TJ7u3P/98d/RGCNz2IWKfNrClFLE/66ziZT6xB7I/NPlNqtR5\nZdva4oEPaekrTLdWiKj16+eOfmF86bKPOUb/hfKpT0UDm0aNypYeI5QQsTdH5dYrqT57IppARIuI\naAkRTfFsc0Nh/bNENDb/alaOAQPcaYrzoBSxLyWjpYtKxerahLhxsmJmFywlmRcQj2NOE6e09LZm\nxEsSQ4cWj0UwcT00zBHcGzeGXzP8hnTSScXumRC2bIkEfvVq98Qedj1dCd2SGDsW+O1vs9etVBYt\nqox1nXRO6t2aN0mUBCLqBeBGABMAjAZwOhHta21zPIC9lVIjAZwD4KYK1bWiVMKy99HR0eFcXmqm\nQhfVughL9cEzrrb42tfKn8uXb9DLL0/2awPAUUfFY99Nvvxl3Xfxq1+lpwzu2xeYOdO/3jWC1HwA\nPPVUR/IOCtx/f5TA7vDD42m4XdihoDb2nAlpHHposQ/eRWurduOUgu8eqTa//nVyyuZKRc5UgjT7\n7xAAS5VSy5RSnQBmALBtlxMA3AYASqknAQwmoiG517TCuAYYlYvvQqjGhVwtsefomlL352qLXXZx\nh22GcuWVutMQ0KMoXRFTJgMGFPv8+dzxQ+Css4rnIs3KbbcVp/Q1O0ZDr4vjj0+ewMbkfe/LPk4l\njZ131pE7laRexP6MM9LDOXsKad7IoQCWG99XALBf+Fzb7A5gddm1qyLXXZduAWbh1FPdA4eqRdr0\ncnnRt2+y66IW8GjQcjjwQLffvRzMqCRACz+HnlYKV8y7kB9J/RL1RprYh3qybRu2Ah7wymL6JPOg\n0pZPGgccEJautlxaW6M5gRuJwYOjLKWVwpywQuiZtLcnT3xST5BK6JkkokMBTFVKTSh8vxhAt1Lq\nSmObnwLoUErNKHxfBOAopdRqq6we9wAQBEGoB5RSZfcOpFn2cwCMJKIRAF4BMBGA3eUyC8B5AGYU\nHg7rbKHPq7KCIAhCaSSKvVKqi4jOAzAbQC8AtyilFhLR5ML6aUqpB4joeCJaCmAjgE9XvNaCIAhC\nJhLdOIIgCEJjUPHAoZBBWY0EEQ0jokeI6Hkieo6IvlRYvgMR/YGIXiCih4losPGbiwvts4iIPlS7\n2lcGIupFRHOJ6N7C96ZsCyIaTES/J6KFRLSAiMY3cVtcXLhH5hPRb4moT7O0BRH9gohWE9F8Y1nm\nYyeicYX2W0JE19v7KUIpVbE/aNfPUgAjAPQGMA/AvpXcZ63/AOwC4IDC54EAFgPYF8APAVxYWD4F\nwA8Kn0cX2qV3oZ2WAmip9XHk3CZfBfAbALMK35uyLaDHo3ym8LkVwKBmbIvC8bwIoE/h+x0APtUs\nbQHgCABjAcw3lmU5dvbIPAXgkMLnBwBMSNpvpS37kEFZDYVS6lWl1LzC5w0AFkKPRfjP4LPC/5MK\nn08EcLtSqlMptQz6ZKZM5dBzIKLdARwP4OeIQnSbri2IaBCAI5RSvwB0f5hS6k00YVsAeAtAJ4D+\nRNQKoD90AEhTtIVS6jEAa63FWY59PBHtCmA7pRTPkPEr4zdOKi32rgFXOSUEqH8KUUxjATwJYIiK\nopRWA+BRxrtBtwvTaG10LYBvADATUjRjW+wJ4DUi+iURPUNENxPRADRhWyil3gBwNYCXoUV+nVLq\nD2jCtjDIeuz28pVIaZNKi33T9v4S0UAAdwH4slJqvblO6feupLZpiHYjoo8C+LdSai6KB94BaJ62\ngHbbHAjgJ0qpA6Ej12LJgZulLYhoLwBfgXZL7AZgIBGdaW7TLG3hIuDYS6LSYr8SwDDj+zDEn0YN\nCRH1hhb66UopTo21moh2KazfFcC/C8vtNtq9sKwROAzACUT0EoDbARxNRNPRnG2xAsAKpdTThe+/\nhxb/V5uwLQ4C8LhS6nWlVBeAuwG8D83ZFkyWe2JFYfnu1vLENqm02P9nUBYRtUEPyppV4X3WFCIi\nALcAWKCUMnMpzoLuhELh/0xj+WlE1EZEewIYCd3x0uNRSn1TKTVMKbUngNMA/D+l1FlozrZ4FcBy\nItqnsOhYAM8DuBdN1hYAFgE4lIj6Fe6XYwEsQHO2BZPpnihcT28VIroIwFnGb9xUoef5OOiIlKUA\nLq51T3gVjvdwaP/0PABzC38TAOwA4I8AXgDwMIDBxm++WWifRQA+XOtjqFC7HIUoGqcp2wLA/gCe\nBvAstDU7qInb4kLoh9186A7J3s3SFtBvua8A2Ardp/npUo4dwLhC+y0FcEPafmVQlSAIQhPQg7Ix\nC4IgCKUiYi8IgtAEiNgLgiA0ASL2giAITYCIvSAIQhMgYi8IgtAEiNgLgiA0ASL2giAITcD/B6/Z\nZTh7HgQmAAAAAElFTkSuQmCC\n",
       "text": [
        "<matplotlib.figure.Figure at 0x1198d2190>"
       ]
      }
     ],
     "prompt_number": 393
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.hist(differences,100) #100 bins are taken"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 394,
       "text": [
        "(array([ 10.,  19.,  27.,  35.,  59.,  62.,  52.,  72.,  73.,  48.,  73.,\n",
        "         63.,  46.,  31.,  38.,  51.,  31.,  30.,  23.,  21.,  18.,  18.,\n",
        "          7.,   9.,  11.,  16.,   7.,   6.,   2.,   3.,   3.,   4.,   3.,\n",
        "          0.,   4.,   1.,   1.,   3.,   1.,   0.,   1.,   3.,   0.,   2.,\n",
        "          1.,   0.,   0.,   1.,   1.,   1.,   0.,   1.,   0.,   1.,   1.,\n",
        "          1.,   0.,   0.,   0.,   0.,   0.,   1.,   0.,   0.,   0.,   0.,\n",
        "          1.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
        "          0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   0.,   0.,   0.,\n",
        "          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
        "          1.]),\n",
        " array([ 0.0037959 ,  0.01067917,  0.01756244,  0.02444571,  0.03132898,\n",
        "         0.03821225,  0.04509552,  0.05197879,  0.05886206,  0.06574533,\n",
        "         0.0726286 ,  0.07951187,  0.08639515,  0.09327842,  0.10016169,\n",
        "         0.10704496,  0.11392823,  0.1208115 ,  0.12769477,  0.13457804,\n",
        "         0.14146131,  0.14834458,  0.15522785,  0.16211112,  0.16899439,\n",
        "         0.17587767,  0.18276094,  0.18964421,  0.19652748,  0.20341075,\n",
        "         0.21029402,  0.21717729,  0.22406056,  0.23094383,  0.2378271 ,\n",
        "         0.24471037,  0.25159364,  0.25847691,  0.26536018,  0.27224346,\n",
        "         0.27912673,  0.28601   ,  0.29289327,  0.29977654,  0.30665981,\n",
        "         0.31354308,  0.32042635,  0.32730962,  0.33419289,  0.34107616,\n",
        "         0.34795943,  0.3548427 ,  0.36172597,  0.36860925,  0.37549252,\n",
        "         0.38237579,  0.38925906,  0.39614233,  0.4030256 ,  0.40990887,\n",
        "         0.41679214,  0.42367541,  0.43055868,  0.43744195,  0.44432522,\n",
        "         0.45120849,  0.45809176,  0.46497504,  0.47185831,  0.47874158,\n",
        "         0.48562485,  0.49250812,  0.49939139,  0.50627466,  0.51315793,\n",
        "         0.5200412 ,  0.52692447,  0.53380774,  0.54069101,  0.54757428,\n",
        "         0.55445755,  0.56134083,  0.5682241 ,  0.57510737,  0.58199064,\n",
        "         0.58887391,  0.59575718,  0.60264045,  0.60952372,  0.61640699,\n",
        "         0.62329026,  0.63017353,  0.6370568 ,  0.64394007,  0.65082334,\n",
        "         0.65770662,  0.66458989,  0.67147316,  0.67835643,  0.6852397 ,\n",
        "         0.69212297]),\n",
        " <a list of 100 Patch objects>)"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nS1Ij/hnfjPyPUkvVaAAAAABJRU5ErkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x119ea73d0>"
       ]
      }
     ],
     "prompt_number": 394
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.hist(differences,100);"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nS1Ij/hnfjPyPUkvVaAAAAABJRU5ErkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x11a46b350>"
       ]
      }
     ],
     "prompt_number": 395
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.hist(differences,100,histtype='step');"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x119f74410>"
       ]
      }
     ],
     "prompt_number": 396
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "ODE - Ordinary differential Equation "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Solving ODE through python "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "integrate.odeint?"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 455
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Suppose we have 2 ordinary equations : \n",
      "    \n",
      "    dx/dt = a - x - 4xy/(1+x**2) and dy/dt = bx(1-y/(1+x**2))"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Let the differential equations specified above be f1 and f2 . Let f(x) = (f1(x),f2(x))"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def f(x_vec,t): #extra parameter t\n",
      "    a=b=1\n",
      "    x,y=x_vec\n",
      "    \n",
      "    f1=a- x -4*x*y/(1+x**2)\n",
      "    f2=b*x*(1-y/(1+x**2))\n",
      "    \n",
      "    return f1,f2 "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 461
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "If we return multiple arguments in python they are returned as a tuple "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x0=np.array([1,0]) #initial condition \n",
      "t=np.arange(1,10,0.1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 462
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "results= integrate.odeint(f,x0,t)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 465
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now how to get the results : Just plot it first "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(t,results[:,0])\n",
      "plt.plot(t,results[:,1])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 469,
       "text": [
        "[<matplotlib.lines.Line2D at 0x11aae7310>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x11a017750>"
       ]
      }
     ],
     "prompt_number": 469
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now we can plot x vs y not take time into consideration"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(results[:,0],results[:,1])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 470,
       "text": [
        "[<matplotlib.lines.Line2D at 0x1188e8590>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nkoP+H0YGWfUXbyY7AAAAAElFTkSuQmCC\n",
       "text": [
        "<matplotlib.figure.Figure at 0x119abbb10>"
       ]
      }
     ],
     "prompt_number": 470
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Question : "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Draw the plot side by side for different conditions of a and b and different X0"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def func(a,b,x0,y0):\n",
      "    X0=np.array([x0,y0])\n",
      "    t=np.arange(1,10,0.1)\n",
      "    \n",
      "    def f(x_vec,t): #extra parameter t\n",
      "        a1=a\n",
      "        b1=b\n",
      "        x,y=x_vec\n",
      "\n",
      "        f1=a1- x -4*x*y/(1+x**2)\n",
      "        f2=b1*x*(1-y/(1+x**2))\n",
      "\n",
      "        return f1,f2 \n",
      "    \n",
      "    results= integrate.odeint(f,X0,t)\n",
      "    plt.plot(t,results[:,0])\n",
      "    plt.plot(t,results[:,1])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 473
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "widgets.interact(func,a=(-5,5,0.1),b=(-5,5,0.1),x0=(-5,5,0.1),y0=(-5,5,0.1))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nCCel0WeqNWYAAAAASUVORK5CYII=\n",
       "text": [
        "<matplotlib.figure.Figure at 0x11ccf2250>"
       ]
      }
     ],
     "prompt_number": 475
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We have to define python objects that refer to python names "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "init_printing()\n",
      "a,b,x,y,theta,gamma,a1=symbols(\"a b x y theta gamma a_1\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 498
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$a$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAA0AAAANCAYAAABy6+R8AAAABHNCSVQICAgIfAhkiAAAALpJREFU\nKJHN0a9OgmEUgPEfMDZpBmwExpybyUIj6LwLmpuBkbC6eQ8EvQm7xUCFQDNqURsbM5hgukn4Tnh9\nx1dInHJ2nu05O3/YISpb2CUG+MARJrhBt6zJNRZoRd3GCs9lwhl+0M/4Endl0hO+UE/YKf5wvk04\nxC8eMz7EGgcprEY+Rg2zTLrAXLFXJ5e+I38mQiOkadSjXHrDi+JaFHs9xFjvaCoOgv9/OsEYrzHq\nPXq4iqa3qbjHsQGQth8N0O6JNQAAAABJRU5ErkJggg==\n",
       "prompt_number": 485,
       "text": [
        "a"
       ]
      }
     ],
     "prompt_number": 485
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "theta"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\theta$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAAwAAAASCAYAAABvqT8MAAAABHNCSVQICAgIfAhkiAAAAOZJREFU\nKJHN0q1KhFEQxvGfurtsMwiCWBYMsprfKzBpEYNmXbyDRRerUbAYBavFmxDBj6IXISLaRIuIoOGd\nA4eDb9jmlDnzn5lnzhdj2kQD7+EAb1jADj6aRHp4wFzEQ5w0FXdwj0HGNvHY1LCH52hMtosftGEy\nS3Qxwhm+Mt4Pn9eC7VBaLvgd3lPQyhIb+MRxxtqocFOqT6mv8LzgazH1MIG0r3lM47ZoWA1/UU6o\nQmklYy284koB4Tv8S6E+i61SHWZiwmLGLnH6V3Gya6zHeqA+T7csyj/fEo7wpH64ffU1/3f7BQwX\nJouAs0fXAAAAAElFTkSuQmCC\n",
       "prompt_number": 486,
       "text": [
        "\u03b8"
       ]
      }
     ],
     "prompt_number": 486
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "gamma"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\gamma$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAA0AAAARCAYAAAAG/yacAAAABHNCSVQICAgIfAhkiAAAALhJREFU\nKJHN0i+KQlEcxfGPf6oyYRSMRoNbcAtmZw8uwB0YBMGgiNE0wTzMQoRJIoJJBQ3aRMNTuCjy3sMy\n33K5v8Ph/O7h8iYZtLHAASPkAz2P/qNpgDUmmGKLXqB/oREaGvhGIZiV8YfS7T6+C7nb2UIHx8B0\nxA51FLHBPOaJ4ANDdIMA2RjTHhWccE6ScmeFWhoD/D4O4tarihpMZWpK2FjIj6jyxGSxFH2vJ+EV\nn5jhkibpH3AFeQAcBQ3KWc4AAAAASUVORK5CYII=\n",
       "prompt_number": 488,
       "text": [
        "\u03b3"
       ]
      }
     ],
     "prompt_number": 488
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$a_{1}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAABMAAAATCAYAAAByUDbMAAAABHNCSVQICAgIfAhkiAAAAPVJREFU\nOI3l07ErhVEYx/GPe6lrUAaKuiRZTFJ28i/IoLsoSiyUSSmrzWL0DyijxWBSFJvVgu2WDCaiXsM5\n8Xa6g9d9h1v3WX49v6fn2/md06HE6mnhLWIDTxjGJXYwVxS+hibqsZ/AOy6KgmbwiZXEf8F+Udg5\nXtGX86aRYb4IaBBfOE38TXyg9hdIJeoUqrhJ5gu4E+5tMucP4AzjrWBvUZ9zs/4Iu479dtR17GIp\ntw96oz7gXng9wr0dC/EeMSQ8BJxEPUhS/MAyLOMIY0LkQ1xhFbPYS5fLrMxvEiSZ263OhVX/sdPA\nlvDxRzGC2zIP1U31Dd4oJKS4w73rAAAAAElFTkSuQmCC\n",
       "prompt_number": 490,
       "text": [
        "a\u2081"
       ]
      }
     ],
     "prompt_number": 490
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def f1(x,y):\n",
      "    return a- x -4*x*y/(1+x**2)\n",
      "def f2(x,y):  \n",
      "    return b*x*(1-y/(1+x**2))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 499
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "f1(x,y),f2(x,y)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\begin{pmatrix}a - \\frac{4 x y}{x^{2} + 1} - x, & b x \\left(- \\frac{y}{x^{2} + 1} + 1\\right)\\end{pmatrix}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 512,
       "text": [
        "\u239b    4\u22c5x\u22c5y           \u239b    y       \u239e\u239e\n",
        "\u239ca - \u2500\u2500\u2500\u2500\u2500\u2500 - x, b\u22c5x\u22c5\u239c- \u2500\u2500\u2500\u2500\u2500\u2500 + 1\u239f\u239f\n",
        "\u239c     2              \u239c   2        \u239f\u239f\n",
        "\u239d    x  + 1          \u239d  x  + 1    \u23a0\u23a0"
       ]
      }
     ],
     "prompt_number": 512
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "M=Matrix([f1(x,y),f2(x,y)])\n",
      "M"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left[\\begin{matrix}a - \\frac{4 x y}{x^{2} + 1} - x\\\\b x \\left(- \\frac{y}{x^{2} + 1} + 1\\right)\\end{matrix}\\right]$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 511,
       "text": [
        "\u23a1      4\u22c5x\u22c5y       \u23a4\n",
        "\u23a2  a - \u2500\u2500\u2500\u2500\u2500\u2500 - x  \u23a5\n",
        "\u23a2       2          \u23a5\n",
        "\u23a2      x  + 1      \u23a5\n",
        "\u23a2                  \u23a5\n",
        "\u23a2    \u239b    y       \u239e\u23a5\n",
        "\u23a2b\u22c5x\u22c5\u239c- \u2500\u2500\u2500\u2500\u2500\u2500 + 1\u239f\u23a5\n",
        "\u23a2    \u239c   2        \u239f\u23a5\n",
        "\u23a3    \u239d  x  + 1    \u23a0\u23a6"
       ]
      }
     ],
     "prompt_number": 511
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "fixed_point=solve(M,(x,y))[2] #where the above vector is equal to 0\n",
      "fixed_point"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\begin{pmatrix}\\frac{a}{5}, & \\frac{1}{25} \\left(a^{2} + 25\\right)\\end{pmatrix}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 509,
       "text": [
        "\u239b    2     \u239e\n",
        "\u239ca  a  + 25\u239f\n",
        "\u239c\u2500, \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u239f\n",
        "\u239d5     25  \u23a0"
       ]
      }
     ],
     "prompt_number": 509
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Linear stability analysis - whther is is stable near the fixed point "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "M.jacobian([x,y])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left[\\begin{matrix}\\frac{8 x^{2} y}{\\left(x^{2} + 1\\right)^{2}} - \\frac{4 y}{x^{2} + 1} - 1 & - \\frac{4 x}{x^{2} + 1}\\\\\\frac{2 b x^{2} y}{\\left(x^{2} + 1\\right)^{2}} + b \\left(- \\frac{y}{x^{2} + 1} + 1\\right) & - \\frac{b x}{x^{2} + 1}\\end{matrix}\\right]$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 510,
       "text": [
        "\u23a1        2                           \u23a4\n",
        "\u23a2     8\u22c5x \u22c5y     4\u22c5y           -4\u22c5x  \u23a5\n",
        "\u23a2   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 - \u2500\u2500\u2500\u2500\u2500\u2500 - 1     \u2500\u2500\u2500\u2500\u2500\u2500\u23a5\n",
        "\u23a2           2    2              2    \u23a5\n",
        "\u23a2   \u239b 2    \u239e    x  + 1         x  + 1\u23a5\n",
        "\u23a2   \u239dx  + 1\u23a0                         \u23a5\n",
        "\u23a2                                    \u23a5\n",
        "\u23a2      2                             \u23a5\n",
        "\u23a2 2\u22c5b\u22c5x \u22c5y     \u239b    y       \u239e  -b\u22c5x  \u23a5\n",
        "\u23a2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 + b\u22c5\u239c- \u2500\u2500\u2500\u2500\u2500\u2500 + 1\u239f  \u2500\u2500\u2500\u2500\u2500\u2500\u23a5\n",
        "\u23a2        2     \u239c   2        \u239f   2    \u23a5\n",
        "\u23a2\u239b 2    \u239e      \u239d  x  + 1    \u23a0  x  + 1\u23a5\n",
        "\u23a3\u239dx  + 1\u23a0                            \u23a6"
       ]
      }
     ],
     "prompt_number": 510
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "J=M.jacobian([x,y]).subs({x:fixed_point[0],y:fixed_point[1]})\n",
      "J"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left[\\begin{matrix}\\frac{8 a^{2} \\left(a^{2} + 25\\right)}{625 \\left(\\frac{a^{2}}{25} + 1\\right)^{2}} - 1 - \\frac{4 a^{2} + 100}{a^{2} + 25} & - \\frac{4 a}{\\frac{a^{2}}{5} + 5}\\\\\\frac{2 a^{2} b \\left(a^{2} + 25\\right)}{625 \\left(\\frac{a^{2}}{25} + 1\\right)^{2}} + b \\left(1 - \\frac{a^{2} + 25}{a^{2} + 25}\\right) & - \\frac{a b}{\\frac{a^{2}}{5} + 5}\\end{matrix}\\right]$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 514,
       "text": [
        "\u23a1      2 \u239b 2     \u239e         \u239b 2     \u239e               \u23a4\n",
        "\u23a2   8\u22c5a \u22c5\u239da  + 25\u23a0       4\u22c5\u239da  + 25\u23a0       -4\u22c5a    \u23a5\n",
        "\u23a2   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 - 1 - \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500     \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u23a5\n",
        "\u23a2               2           \u239b 2    \u239e       \u239b 2    \u239e\u23a5\n",
        "\u23a2       \u239b 2    \u239e            \u239ca     \u239f       \u239ca     \u239f\u23a5\n",
        "\u23a2       \u239ca     \u239f         25\u22c5\u239c\u2500\u2500 + 1\u239f     5\u22c5\u239c\u2500\u2500 + 1\u239f\u23a5\n",
        "\u23a2   625\u22c5\u239c\u2500\u2500 + 1\u239f            \u239d25    \u23a0       \u239d25    \u23a0\u23a5\n",
        "\u23a2       \u239d25    \u23a0                                   \u23a5\n",
        "\u23a2                                                  \u23a5\n",
        "\u23a2   2   \u239b 2     \u239e     \u239b       2       \u239e            \u23a5\n",
        "\u23a22\u22c5a \u22c5b\u22c5\u239da  + 25\u23a0     \u239c      a  + 25  \u239f    -a\u22c5b    \u23a5\n",
        "\u23a2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 + b\u22c5\u239c1 - \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u239f  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u23a5\n",
        "\u23a2             2       \u239c       \u239b 2    \u239e\u239f    \u239b 2    \u239e\u23a5\n",
        "\u23a2     \u239b 2    \u239e        \u239c       \u239ca     \u239f\u239f    \u239ca     \u239f\u23a5\n",
        "\u23a2     \u239ca     \u239f        \u239c    25\u22c5\u239c\u2500\u2500 + 1\u239f\u239f  5\u22c5\u239c\u2500\u2500 + 1\u239f\u23a5\n",
        "\u23a2 625\u22c5\u239c\u2500\u2500 + 1\u239f        \u239d       \u239d25    \u23a0\u23a0    \u239d25    \u23a0\u23a5\n",
        "\u23a3     \u239d25    \u23a0                                     \u23a6"
       ]
      }
     ],
     "prompt_number": 514
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "J.charpoly()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\operatorname{PurePoly}{\\left( \\lambda^{2} + \\frac{\\lambda}{a^{2} + 25} \\left(- 3 a^{2} + 5 a b + 125\\right) + \\frac{25 a b}{a^{2} + 25}, \\lambda, domain=\\mathbb{Z}\\left(a, b\\right) \\right)}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "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\n",
       "prompt_number": 517,
       "text": [
        "PurePoly(_lambda**2 + (-3*a**2 + 5*a*b + 125)/(a**2 + 25)*_lambda + 25*a*b/(a*\n",
        "*2 + 25), _lambda, domain='ZZ(a,b)')"
       ]
      }
     ],
     "prompt_number": 517
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "J.eigenvals()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\begin{Bmatrix}- \\frac{1}{2 a^{2} + 50} \\sqrt{9 a^{4} - 130 a^{3} b + 25 a^{2} b^{2} - 750 a^{2} - 1250 a b + 15625} + \\frac{3 a^{2} - 5 a b - 125}{2 a^{2} + 50} : 1, & \\frac{1}{2 a^{2} + 50} \\sqrt{9 a^{4} - 130 a^{3} b + 25 a^{2} b^{2} - 750 a^{2} - 1250 a b + 15625} + \\frac{3 a^{2} - 5 a b - 125}{2 a^{2} + 50} : 1\\end{Bmatrix}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 516,
       "text": [
        "\u23a7     ________________________________________________________                \n",
        "\u23aa    \u2571    4        3         2  2        2                          2         \n",
        "\u23aa  \u2572\u2571  9\u22c5a  - 130\u22c5a \u22c5b + 25\u22c5a \u22c5b  - 750\u22c5a  - 1250\u22c5a\u22c5b + 15625    3\u22c5a  - 5\u22c5a\u22c5b \n",
        "\u23a8- \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 + \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n",
        "\u23aa                              2                                      \u239b 2     \n",
        "\u23aa                           2\u22c5a  + 50                               2\u22c5\u239da  + 25\n",
        "\u23a9                                                                             \n",
        "\n",
        "             ________________________________________________________         \n",
        "            \u2571    4        3         2  2        2                          2  \n",
        "- 125     \u2572\u2571  9\u22c5a  - 130\u22c5a \u22c5b + 25\u22c5a \u22c5b  - 750\u22c5a  - 1250\u22c5a\u22c5b + 15625    3\u22c5a  -\n",
        "\u2500\u2500\u2500\u2500\u2500: 1, \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 + \u2500\u2500\u2500\u2500\u2500\u2500\n",
        "\u239e                                     2                                      \u239b\n",
        "\u23a0                                  2\u22c5a  + 50                               2\u22c5\u239d\n",
        "                                                                              \n",
        "\n",
        "               \u23ab\n",
        "               \u23aa\n",
        " 5\u22c5a\u22c5b - 125   \u23aa\n",
        "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500: 1\u23ac\n",
        " 2     \u239e       \u23aa\n",
        "a  + 25\u23a0       \u23aa\n",
        "               \u23ad"
       ]
      }
     ],
     "prompt_number": 516
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "lets do it numerically - sympy function that takes a sympy object and converts it into a numpy object ."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "JJ=lambdify([a,b],J)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 523
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "JJ(3,2) # jacobian matrix with a=3 and b=2"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 527,
       "text": [
        "matrix([[-2.88235294, -1.76470588],\n",
        "        [ 1.05882353, -0.88235294]])"
       ]
      }
     ],
     "prompt_number": 527
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We can use this with the numerical eigen value function to get the linear stability values ."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(_)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 528,
       "text": [
        "numpy.matrixlib.defmatrix.matrix"
       ]
      }
     ],
     "prompt_number": 528
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Example: "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "init_printing()\n",
      "f2_x,f2_y,f1_x,f1_y,a,b,x,y,theta,gamma,a1,y_dot,x_dot=symbols(\"f2_x,f2_y,f1_x,f1_y,a b x y theta gamma a_1 y_dot x_dot\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 542
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "y_dot"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$y_{dot}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAB8AAAATCAYAAABobNZCAAAABHNCSVQICAgIfAhkiAAAAb9JREFU\nSInt1U+IjlEUBvCfN5kZUwolkT8rJbKQSElNjbAcC9NgaaEs/KkZZUFJk2SHyWI2o2SKhQUlTBNm\nY2HBDjUyCpk0KRQyLM5963prPt/UNyV5Nu/73HPvfe4595xz+UuwEudxC3sqtoO4N5PifZiDQ3ha\nsT3CYKMFi/TdghF8ww48z+a0Yj3uN1q8xGI0YSl+oCOzbcNPrJkp8RJH8DEdpMQpjGNWo8WKCt+O\nYXzNxrbiofC+iuOYxPI6tFZhcy3xFXiW8SZswoMpNryOFxirQ/wY1tYSf4UFGT+DZlMn207crUMY\n2nEnH5hdmXAY/biAL9ggcuBJNv8kXouy3I2z2foi7TGJCeHpcDpkgS5RVSN/OmmBd7icjfWnzYkI\nfce8ir0n4wPoxH5cqiV21e/NpUPU/erE1+ETWhJvq3iwUVRFXik30J0c6KwlPi7aKyzBKPZm9qO4\nnfHTOIH5iXfjWmZvwQfRoEaxSERzYTkhT7gD+Ixz4h67cCWzT+Bt+m/FLnGf5TvwJq0v0SM8HhMR\nfI99IoExvcbRLBJxSIR2WVr/WDxGBXrxEnOT4EWRpIO4KRJ1aBqa//GP4Rdc9FkQVVMCrwAAAABJ\nRU5ErkJggg==\n",
       "prompt_number": 532,
       "text": [
        "y_dot"
       ]
      }
     ],
     "prompt_number": 532
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def f1(x,y):\n",
      "    return x*(3-x-2*y)\n",
      "def f2(x,y):\n",
      "    return y*(2-x-y)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 533
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "f1(x,y),f2(x,y)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\begin{pmatrix}x \\left(- x - 2 y + 3\\right), & y \\left(- x - y + 2\\right)\\end{pmatrix}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 536,
       "text": [
        "(x\u22c5(-x - 2\u22c5y + 3), y\u22c5(-x - y + 2))"
       ]
      }
     ],
     "prompt_number": 536
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Step 1: Finding fixed points that is the points where the 2 differential equations values are 0 "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "M=Matrix([f1(x,y),f2(x,y)])\n",
      "fixed_point=solve(M,(x,y))\n",
      "fixed_point"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\begin{bmatrix}\\begin{pmatrix}0, & 0\\end{pmatrix}, & \\begin{pmatrix}0, & 2\\end{pmatrix}, & \\begin{pmatrix}1, & 1\\end{pmatrix}, & \\begin{pmatrix}3, & 0\\end{pmatrix}\\end{bmatrix}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 540,
       "text": [
        "[(0, 0), (0, 2), (1, 1), (3, 0)]"
       ]
      }
     ],
     "prompt_number": 540
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Step2: Linear Stability analysis -- Find the Jacobian Matrix first "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "Matrix([[f1_x,f1_y],[f2_x,f2_y]])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left[\\begin{matrix}f_{1 x} & f_{1 y}\\\\f_{2 x} & f_{2 y}\\end{matrix}\\right]$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 546,
       "text": [
        "\u23a1f\u2081 \u2093  f_1_y\u23a4\n",
        "\u23a2           \u23a5\n",
        "\u23a3f\u2082 \u2093  f_2_y\u23a6"
       ]
      }
     ],
     "prompt_number": 546
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "J=M.jacobian([x,y])\n",
      "J"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left[\\begin{matrix}- 2 x - 2 y + 3 & - 2 x\\\\- y & - x - 2 y + 2\\end{matrix}\\right]$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 549,
       "text": [
        "\u23a1-2\u22c5x - 2\u22c5y + 3      -2\u22c5x    \u23a4\n",
        "\u23a2                            \u23a5\n",
        "\u23a3      -y        -x - 2\u22c5y + 2\u23a6"
       ]
      }
     ],
     "prompt_number": 549
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "For point (0,0), we check the stability : "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "J1=M.jacobian([x,y]).subs({x:0,y:0})\n",
      "J1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left[\\begin{matrix}3 & 0\\\\0 & 2\\end{matrix}\\right]$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 561,
       "text": [
        "\u23a13  0\u23a4\n",
        "\u23a2    \u23a5\n",
        "\u23a30  2\u23a6"
       ]
      }
     ],
     "prompt_number": 561
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "J1.eigenvals()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\begin{Bmatrix}2 : 1, & 3 : 1\\end{Bmatrix}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 563,
       "text": [
        "{2: 1, 3: 1}"
       ]
      }
     ],
     "prompt_number": 563
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      " Eigen values are 3 and 2 . Now because both eigen values are positive , the system of ODE is not stable about (0,0)"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "For point (0,2), we check the stability :"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "J2=M.jacobian([x,y]).subs({x:0,y:2})\n",
      "J2"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left[\\begin{matrix}-1 & 0\\\\-2 & -2\\end{matrix}\\right]$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 564,
       "text": [
        "\u23a1-1  0 \u23a4\n",
        "\u23a2      \u23a5\n",
        "\u23a3-2  -2\u23a6"
       ]
      }
     ],
     "prompt_number": 564
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Both eigen values are negative so this fixed point is stable ."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "J1.eigenvals()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\begin{Bmatrix}2 : 1, & 3 : 1\\end{Bmatrix}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 565,
       "text": [
        "{2: 1, 3: 1}"
       ]
      }
     ],
     "prompt_number": 565
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Question :"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Use the above results to add a plot showing how the eigen values of the linearised jacobian at the fixed point changes "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def f1(x,y):\n",
      "    return a- x -4*x*y/(1+x**2)\n",
      "def f2(x,y):  \n",
      "    return b*x*(1-y/(1+x**2))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 568
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "f1(x,y),f2(x,y)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\begin{pmatrix}a - \\frac{4 x y}{x^{2} + 1} - x, & b x \\left(- \\frac{y}{x^{2} + 1} + 1\\right)\\end{pmatrix}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 569,
       "text": [
        "\u239b    4\u22c5x\u22c5y           \u239b    y       \u239e\u239e\n",
        "\u239ca - \u2500\u2500\u2500\u2500\u2500\u2500 - x, b\u22c5x\u22c5\u239c- \u2500\u2500\u2500\u2500\u2500\u2500 + 1\u239f\u239f\n",
        "\u239c     2              \u239c   2        \u239f\u239f\n",
        "\u239d    x  + 1          \u239d  x  + 1    \u23a0\u23a0"
       ]
      }
     ],
     "prompt_number": 569
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "M=Matrix([f1(x,y),f2(x,y)])\n",
      "fixed_point=solve(M,(x,y))\n",
      "fixed_point"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\begin{bmatrix}\\begin{pmatrix}- i, & 0\\end{pmatrix}, & \\begin{pmatrix}i, & 0\\end{pmatrix}, & \\begin{pmatrix}\\frac{a}{5}, & \\frac{1}{25} \\left(a^{2} + 25\\right)\\end{pmatrix}\\end{bmatrix}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 570,
       "text": [
        "\u23a1                 \u239b    2     \u239e\u23a4\n",
        "\u23a2                 \u239ca  a  + 25\u239f\u23a5\n",
        "\u23a2(-\u2148, 0), (\u2148, 0), \u239c\u2500, \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u239f\u23a5\n",
        "\u23a3                 \u239d5     25  \u23a0\u23a6"
       ]
      }
     ],
     "prompt_number": 570
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Take only the real fixed points :"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "fixed_point=solve(M,(x,y))[2]\n",
      "fixed_point"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\begin{pmatrix}\\frac{a}{5}, & \\frac{1}{25} \\left(a^{2} + 25\\right)\\end{pmatrix}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 571,
       "text": [
        "\u239b    2     \u239e\n",
        "\u239ca  a  + 25\u239f\n",
        "\u239c\u2500, \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u239f\n",
        "\u239d5     25  \u23a0"
       ]
      }
     ],
     "prompt_number": 571
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "J=M.jacobian([x,y])\n",
      "J"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left[\\begin{matrix}\\frac{8 x^{2} y}{\\left(x^{2} + 1\\right)^{2}} - \\frac{4 y}{x^{2} + 1} - 1 & - \\frac{4 x}{x^{2} + 1}\\\\\\frac{2 b x^{2} y}{\\left(x^{2} + 1\\right)^{2}} + b \\left(- \\frac{y}{x^{2} + 1} + 1\\right) & - \\frac{b x}{x^{2} + 1}\\end{matrix}\\right]$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 572,
       "text": [
        "\u23a1        2                           \u23a4\n",
        "\u23a2     8\u22c5x \u22c5y     4\u22c5y           -4\u22c5x  \u23a5\n",
        "\u23a2   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 - \u2500\u2500\u2500\u2500\u2500\u2500 - 1     \u2500\u2500\u2500\u2500\u2500\u2500\u23a5\n",
        "\u23a2           2    2              2    \u23a5\n",
        "\u23a2   \u239b 2    \u239e    x  + 1         x  + 1\u23a5\n",
        "\u23a2   \u239dx  + 1\u23a0                         \u23a5\n",
        "\u23a2                                    \u23a5\n",
        "\u23a2      2                             \u23a5\n",
        "\u23a2 2\u22c5b\u22c5x \u22c5y     \u239b    y       \u239e  -b\u22c5x  \u23a5\n",
        "\u23a2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 + b\u22c5\u239c- \u2500\u2500\u2500\u2500\u2500\u2500 + 1\u239f  \u2500\u2500\u2500\u2500\u2500\u2500\u23a5\n",
        "\u23a2        2     \u239c   2        \u239f   2    \u23a5\n",
        "\u23a2\u239b 2    \u239e      \u239d  x  + 1    \u23a0  x  + 1\u23a5\n",
        "\u23a3\u239dx  + 1\u23a0                            \u23a6"
       ]
      }
     ],
     "prompt_number": 572
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "J2=M.jacobian([x,y]).subs({x:fixed_point[0],y:fixed_point[1]})\n",
      "J2"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left[\\begin{matrix}\\frac{8 a^{2} \\left(a^{2} + 25\\right)}{625 \\left(\\frac{a^{2}}{25} + 1\\right)^{2}} - 1 - \\frac{4 a^{2} + 100}{a^{2} + 25} & - \\frac{4 a}{\\frac{a^{2}}{5} + 5}\\\\\\frac{2 a^{2} b \\left(a^{2} + 25\\right)}{625 \\left(\\frac{a^{2}}{25} + 1\\right)^{2}} + b \\left(1 - \\frac{a^{2} + 25}{a^{2} + 25}\\right) & - \\frac{a b}{\\frac{a^{2}}{5} + 5}\\end{matrix}\\right]$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 573,
       "text": [
        "\u23a1      2 \u239b 2     \u239e         \u239b 2     \u239e               \u23a4\n",
        "\u23a2   8\u22c5a \u22c5\u239da  + 25\u23a0       4\u22c5\u239da  + 25\u23a0       -4\u22c5a    \u23a5\n",
        "\u23a2   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 - 1 - \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500     \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u23a5\n",
        "\u23a2               2           \u239b 2    \u239e       \u239b 2    \u239e\u23a5\n",
        "\u23a2       \u239b 2    \u239e            \u239ca     \u239f       \u239ca     \u239f\u23a5\n",
        "\u23a2       \u239ca     \u239f         25\u22c5\u239c\u2500\u2500 + 1\u239f     5\u22c5\u239c\u2500\u2500 + 1\u239f\u23a5\n",
        "\u23a2   625\u22c5\u239c\u2500\u2500 + 1\u239f            \u239d25    \u23a0       \u239d25    \u23a0\u23a5\n",
        "\u23a2       \u239d25    \u23a0                                   \u23a5\n",
        "\u23a2                                                  \u23a5\n",
        "\u23a2   2   \u239b 2     \u239e     \u239b       2       \u239e            \u23a5\n",
        "\u23a22\u22c5a \u22c5b\u22c5\u239da  + 25\u23a0     \u239c      a  + 25  \u239f    -a\u22c5b    \u23a5\n",
        "\u23a2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 + b\u22c5\u239c1 - \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u239f  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u23a5\n",
        "\u23a2             2       \u239c       \u239b 2    \u239e\u239f    \u239b 2    \u239e\u23a5\n",
        "\u23a2     \u239b 2    \u239e        \u239c       \u239ca     \u239f\u239f    \u239ca     \u239f\u23a5\n",
        "\u23a2     \u239ca     \u239f        \u239c    25\u22c5\u239c\u2500\u2500 + 1\u239f\u239f  5\u22c5\u239c\u2500\u2500 + 1\u239f\u23a5\n",
        "\u23a2 625\u22c5\u239c\u2500\u2500 + 1\u239f        \u239d       \u239d25    \u23a0\u23a0    \u239d25    \u23a0\u23a5\n",
        "\u23a3     \u239d25    \u23a0                                     \u23a6"
       ]
      }
     ],
     "prompt_number": 573
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "J2.eigenvals()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\begin{Bmatrix}- \\frac{1}{2 a^{2} + 50} \\sqrt{9 a^{4} - 130 a^{3} b + 25 a^{2} b^{2} - 750 a^{2} - 1250 a b + 15625} + \\frac{3 a^{2} - 5 a b - 125}{2 a^{2} + 50} : 1, & \\frac{1}{2 a^{2} + 50} \\sqrt{9 a^{4} - 130 a^{3} b + 25 a^{2} b^{2} - 750 a^{2} - 1250 a b + 15625} + \\frac{3 a^{2} - 5 a b - 125}{2 a^{2} + 50} : 1\\end{Bmatrix}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 576,
       "text": [
        "\u23a7     ________________________________________________________                \n",
        "\u23aa    \u2571    4        3         2  2        2                          2         \n",
        "\u23aa  \u2572\u2571  9\u22c5a  - 130\u22c5a \u22c5b + 25\u22c5a \u22c5b  - 750\u22c5a  - 1250\u22c5a\u22c5b + 15625    3\u22c5a  - 5\u22c5a\u22c5b \n",
        "\u23a8- \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 + \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n",
        "\u23aa                              2                                      \u239b 2     \n",
        "\u23aa                           2\u22c5a  + 50                               2\u22c5\u239da  + 25\n",
        "\u23a9                                                                             \n",
        "\n",
        "             ________________________________________________________         \n",
        "            \u2571    4        3         2  2        2                          2  \n",
        "- 125     \u2572\u2571  9\u22c5a  - 130\u22c5a \u22c5b + 25\u22c5a \u22c5b  - 750\u22c5a  - 1250\u22c5a\u22c5b + 15625    3\u22c5a  -\n",
        "\u2500\u2500\u2500\u2500\u2500: 1, \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 + \u2500\u2500\u2500\u2500\u2500\u2500\n",
        "\u239e                                     2                                      \u239b\n",
        "\u23a0                                  2\u22c5a  + 50                               2\u22c5\u239d\n",
        "                                                                              \n",
        "\n",
        "               \u23ab\n",
        "               \u23aa\n",
        " 5\u22c5a\u22c5b - 125   \u23aa\n",
        "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500: 1\u23ac\n",
        " 2     \u239e       \u23aa\n",
        "a  + 25\u23a0       \u23aa\n",
        "               \u23ad"
       ]
      }
     ],
     "prompt_number": 576
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "E=J2.eigenvals()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 577
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "E.keys()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\begin{bmatrix}- \\frac{1}{2 a^{2} + 50} \\sqrt{9 a^{4} - 130 a^{3} b + 25 a^{2} b^{2} - 750 a^{2} - 1250 a b + 15625} + \\frac{3 a^{2} - 5 a b - 125}{2 a^{2} + 50}, & \\frac{1}{2 a^{2} + 50} \\sqrt{9 a^{4} - 130 a^{3} b + 25 a^{2} b^{2} - 750 a^{2} - 1250 a b + 15625} + \\frac{3 a^{2} - 5 a b - 125}{2 a^{2} + 50}\\end{bmatrix}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 591,
       "text": [
        "\u23a1     ________________________________________________________                \n",
        "\u23a2    \u2571    4        3         2  2        2                          2         \n",
        "\u23a2  \u2572\u2571  9\u22c5a  - 130\u22c5a \u22c5b + 25\u22c5a \u22c5b  - 750\u22c5a  - 1250\u22c5a\u22c5b + 15625    3\u22c5a  - 5\u22c5a\u22c5b \n",
        "\u23a2- \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 + \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n",
        "\u23a2                              2                                      \u239b 2     \n",
        "\u23a3                           2\u22c5a  + 50                               2\u22c5\u239da  + 25\n",
        "\n",
        "          ________________________________________________________            \n",
        "         \u2571    4        3         2  2        2                          2     \n",
        "- 125  \u2572\u2571  9\u22c5a  - 130\u22c5a \u22c5b + 25\u22c5a \u22c5b  - 750\u22c5a  - 1250\u22c5a\u22c5b + 15625    3\u22c5a  - 5\u22c5\n",
        "\u2500\u2500\u2500\u2500\u2500, \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 + \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n",
        "\u239e                                  2                                      \u239b 2 \n",
        "\u23a0                               2\u22c5a  + 50                               2\u22c5\u239da  \n",
        "\n",
        "         \u23a4\n",
        "         \u23a5\n",
        "a\u22c5b - 125\u23a5\n",
        "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u23a5\n",
        "    \u239e    \u23a5\n",
        "+ 25\u23a0    \u23a6"
       ]
      }
     ],
     "prompt_number": 591
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "K=E.keys()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 592
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "K[0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$- \\frac{1}{2 a^{2} + 50} \\sqrt{9 a^{4} - 130 a^{3} b + 25 a^{2} b^{2} - 750 a^{2} - 1250 a b + 15625} + \\frac{3 a^{2} - 5 a b - 125}{2 a^{2} + 50}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "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\nPPR+AAAAAElFTkSuQmCC\n",
       "prompt_number": 593,
       "text": [
        "     ________________________________________________________                 \n",
        "    \u2571    4        3         2  2        2                          2          \n",
        "  \u2572\u2571  9\u22c5a  - 130\u22c5a \u22c5b + 25\u22c5a \u22c5b  - 750\u22c5a  - 1250\u22c5a\u22c5b + 15625    3\u22c5a  - 5\u22c5a\u22c5b -\n",
        "- \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 + \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n",
        "                              2                                      \u239b 2     \u239e\n",
        "                           2\u22c5a  + 50                               2\u22c5\u239da  + 25\u23a0\n",
        "\n",
        "    \n",
        "    \n",
        " 125\n",
        "\u2500\u2500\u2500\u2500\n",
        "    \n",
        "    "
       ]
      }
     ],
     "prompt_number": 593
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "K[1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\frac{1}{2 a^{2} + 50} \\sqrt{9 a^{4} - 130 a^{3} b + 25 a^{2} b^{2} - 750 a^{2} - 1250 a b + 15625} + \\frac{3 a^{2} - 5 a b - 125}{2 a^{2} + 50}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAkIAAAAqCAYAAABfnzQeAAAABHNCSVQICAgIfAhkiAAAECRJREFU\neJztnXvYZVMdxz/vXIxpbpFpxmU0xiXEaFAzDEMuRQaFRqMJRYrpgohCXhnSRcpTbrkcw+NSdJma\nkC7vM0kSRcKDKapJiUw1lTEzTH9893bW2e++n73P3ud9f5/n2c85+/47v7Muv/Vbv7UWGIZhGIZh\nGIZhGIZhGIOLnqoFqBlbAo9XLYRhGIYxYLB61ugqLgReXbUQhmEYhmF0hiFVC1AjepAR9M+qBTEM\nwzAMozMMq1qAGjEduLdqIQzDMAyjYIYA84GR3v7nK5TFqDGfBSZULYRhGIZhFMyBwCTv+63AThXK\nUjusa6zJBOCZqoUwDMMwjILZHJjrff89TaPIMF5hB+DEqoUwDMMwjBIYAYzxvt8BbFShLLVjaNUC\n1ITjgRuAf3X4vRcC/wP+1OH31oFZ3vZm4GTg38AfKpWoHkwH5gD7AWcAf/S2qp/V7ZgujMHMS8Aq\nYHfgZeC2asUZfIwBbgE2rVqQGK6p4J17oK64PSt4dx14DjjK+/4uZBCOib58UDAauMDZn4P0snHF\nz+p2TBfGQGEW8F7gWOB6YJ8M944DPl2ADFcDa4CVwK9IH2/0IWAFsEub74+yKaYDJwG9wJ1IVz55\nZS6EYz2h1gKTO/niDGwJfLLD7xwHfBToY/AaQtsBo7zvhwGrMUNoKmqtbe7tj0V5Z07Fz+p2TBfG\nQKGdBuR8YLi3ZTGggvQCE4ENM943Bvg77fVERdkUSY2dXvLJXCh1NoROA7aOOT8FuBa4HLjE+z6x\nzXeeivps++iMIfQq4Lcx52cgr9gl3ufNKG4qyOuBbwEXAV8CFlLMSLsbUHdFFHsA96B0tLCA96Xl\nzej33gY8BFxFuBfhMWCed+7VqJD5EbBNxvf1oFaNPxPtG9BvnhZxfZxesj6rHfZH3UyLUNpZCDSc\nbb5zbVpdFZnWOqkLl6R8V3T6KlJnVeU5nyTdZclzW6Ey5ipUxl1If+Oh03k9L3kbkEeg8IPngOXe\nc/LSm/O+g4FvtvFel6BNkdTY6S3ovW1RZ0OoEXNuM5RwDnGOzQMeJP8cTAfRTIR9lG8IvQm5AtdG\nnJ8GfB9Y1zl2Kco0b3SOjQOWod/v8yngd8A6OWXbETgF+Doq+OIYhVybx+V8V1Z2BH5Ic6bx0cAS\n1KKZHLh2bWBbRWvln5frUKEdR1q9pHlWXj5Ofx242/7OtWl0VUZacylTFz5J+a7o9FWGzjqd53yS\ndAfp89y2KAZzV29/IvAkrRVjHfJ6HoINyGHAuej/mg8spmkYFMnnUFztEchgfENKGb4KfAM4HLgM\nGS95CdoUSY2dOJk7Rl0NoUnAZ2LOfwd4ntZpBkaifsajc7xvI+BIZ7+P8gyhbVAibNBs2YVxkXfu\ncOfYbO/Yxc6x81DB4BqA66MWyfFtynoccD8qgKLYx5OpnZbXVNIbsIuBLQLHpnky3BQ4/kfgCuDb\naKKyIlqHx3jPSlqnKI1e0j4rL5eivDSc1rwyExV+Lml0VWZaK1sXafNd0emrDJ11Os+l1R2k08kw\n5MFxRwRPAp4FPuYcqzqvZyWqAXklzd/6GuT5KWOKnHk0jet9kI7998TJ8BgyVkB1zKI2ZEiyKYKN\nnTiZO0aVhtDImHMfQ4kqjHVQIRI22/RjyIuSlfeheKTTve1plKkOyPGsLDSILlSORKPl9nWOvdu7\n3u1zfRz4Xsj9DwE/ySjPDBQovpm3v7X3vsNi7jkHFWDtVGAN0qfD/6CW5GsDx5cjL6FLXxsyhTEb\nVdggT93kmGuT9JLlWXkJGjsgo/Z2+nv6+lI8r8i05tIJXbg0iM53RaevMnTW6TwXvC/OEOpL8Yz3\nI49N0vqRVeZ1yGYsurgNyKnod/j13VuA72Z41gnAF2M2t6HsyjoZ/U87JMjwOloXND8W+EWOd/vE\n2RRhjZ0omfudHIiMQS7PvYAXQs5PA74Sce/6SD8rQ879C/UpZyU4Ou1DyL3Zl+NZRbGQ/jEAO6Lh\nljd6+2NQUPmdIfc/jQybLKwBHvbuBcVhrQYeiLlnFnAX8YVjkTyJYgtGBY6/SLlB3XuguI7FyI3v\nG41PRVwfp5esz8rLh0OOfQE4GwUsZqHotObTKV2kpcj0VZbOOp3nimYusJTk9SOryus+J6OuuqcS\nrpuBDIsZSOYlKHZ1PzSC6i6a9dzeyABeDxl0SVySUtYZwI+BDbx3+fpZ7ckRJcNO3jmffVFDKcu7\n0zDb+/wEauxM9LYomYGBbQgNQ0PpdkCW6Q8C58cjV3IUz6JCfN2Qcxt59w9DlbrPXsAHkft0PFL+\nicDOgfs3QaPGJqL4itHk8zCVwWZoVMIJKBYKZM2D4oaC/BcFpo1ABYdPnC7uQ8MZP4wC3HZDCXhp\nhEzDkUv1apruzqne8x7O8uMyMANlmL85xzZClWlf4NoRwFnIFbwa9YmfTmsLyCdOL1NQOgh2EY6L\nkDFOLy9kfFaRzEQjQ34Zci5JV0WnNciu105QZPoqQ2dV5LksJOmkB5Ur9yKD7q3o/5+MPF2/cZ5V\nVl4vmrgG5Bjgr97x0cChaJj9EcDXCpRhGWrk+MbOTOBu4BGUXqJkeIymQbolSku+d7Yooho7f46R\nuSO8B8UP+H2tYS3HspiEEutiwl33H0AKieNq5Bp1XWwTUeW9llZX6jFI6Zt4+5ORN+mOjHKXQYPk\nVt1sFOT2WxRk6faf7urdf07Ifdd559zRKUXrwn//91ABDWpFPUo2t32D9rpDLkCesl0Dx5fSOmX9\nPPT7g6ML66qXormfZrdnkCRdVZ3WiqRBNm9K3vRVhs6qznMN4nWXpJMNvPsfRZ53nz3RXDZJwbLt\n5vUsNEivo3mo8XwSWjPsrd7xdVF8zlzUJXiWt+0f8ox2ORDFKJ2GAo/9ejBOhiHIoD4aeYDyzmwd\nZVNMQf9rMJh9bILMg4b5hM9YfA3JwVLjkaX/QW9/GLAA+DVS8mu84zsgy3xu4P7ngDOzi1w4DdIX\nyMOQi/0eVJiALP21hA9BvMk75yfsMnRxGgpad+NNDvHemyX6v0F+Q2gL1P+9IORcMB0NRd5EN9i8\nznopkr2Jb2kl6arqtFYkDdLnu3bSVxk6qzrPNYjXXZJOJnj3r6R/nOgy4j3w7eb1rDSo52CiQcNg\nWHR1MWqdutH945Ab+eWEe59FhcxENC9HL4rUfxllsOe9685D1ugtzr3bIEPpZ21J33nWIM/QdDTE\nEaSHKPx+9RXeZxm6mOXd68ab+K2yYL9+GYxAsVxXEF7BBtPRS0hnBzvHBqJewjgBGdFRJOmq6rRW\nBe2mrzJ0Vse05ZKkE79sXkr/+NBlKEZlRMhzi8jrRpcxkGOEfJ5C7tEDvE+QmyxtTM5y+rucJ6A+\nxrVoRMJ+yE252rlmTzRiISxOIg3bo8yY1g39AK0u4LRsjUbIuZOX+UHLh6C+3mfQb10v5P5RqO93\nBeXpYgZwfsixl4AnQq6/lvAJITdFQe6rQs4dg7p0gvQg7+HthE9Pv8S7ZvfA8aE0PWp10UscRaS3\n4cDbiB6AkEZXVae1TuU7nyLSVxk6qzLPJZFGJ6uRgRIWKPwiKvPWpxnTAsX8F4ZRW75I6xDSq8hv\nBI5HhY5f+O3s7QdXr7+ZZpT8lJzvKooG4W7msai1tIbWibdG0exj9QNK70czrwb5E/BT73sZuvD7\n+t11Y4aiQi7rwoENsrugF6B+bhd3LqgVtAZe+qxEAYJQf70UxUwk00kR59PoCqpLa0XTILlrrIj0\nBcXqrOo8598Xpbu0OllEs/Hrco93bbAOKOq/iOJaZDgHt+dRd3LYuY6uiTVY8bvG4maF7bYtjMVo\nBMFY1Oe9itbRXlGciEaWbeIcOwr4C80Zqf2RGu4K8iNRK+tub9+dvKtOrEKFwZO0tpz8bsR70VQB\nIB26M3eCjKdJNN3sZejif+h/dUd0HIZac2dnfFZW3odc4ecGju/mfL+d/uv2TEMu9uu9/YGmlyj8\nSenCppyAdLqC6tJapykqfUGxOqtj2nJJq5Mb0Yg6N0aoB3nBF9FaBxT5X0RxFJqtP7gtAt4ecc71\nmFVdtw7krS2GAB9BY/Y/0e7DSmQ4qtAP9ba0/blnoq41f0TANOSGdkcS9KBh5ic777rKe98JqHUV\nbGV0Gj9gMmwZi/PRf+gWoNeh1o872eSGyMX+XufYl9FwTn/GzrJ08UOa/9nGyDiN8jrE0SB963Qv\nFEB6fWC7ieb8SqDlAG6hqdseNC/T3TRjEOqul6I4FaWzqGGxaXQF1aa1IonLd0WmLyheZ1XkOZc4\n3aXVyRA0ad8pzrE5yLPlylT0f5GVBt0RLN0t9X3HOZBmAN2t1NuNdysaDn854XMDhTESzT9wDcoA\ndwK7hFy3FWqRXYRGD2yJhgn2oeDqKvqPX4uGw/6OptX7LHKTvydw7dEow1+HfuPN6DcFeSPN33kl\ncsVPClxThi42RWvUXISG8x6U4xmQrcBZTnTrIdhq3B0tJrgQLctyLv3TWJ31UhTvQJVxcN4slzS6\ngurSWrukzXdFpy8oVmdV5LksZVZanazvyfBNFAR9I/3X3yrjv8hCg+4whLqpvu8oJ9K0DD+PCsK6\n8n7k6r2yakGMymjQHQWOYQwUGlieS6JBd+iom+r7jjKC5nTVd5B/kqROsCHqA3531YIYlXEx7U18\nZhhGNizPJdOgOwyhbqrvK2F3tJho3VlCZ9aOMQzDMIw0dJux2C31fS6mo2C4XhQnMiv26ibjCJ9z\noR2uRhH9K4Ff0doXuTNKOEehPu0t+t1tGIZhGEYYeet6GOD1/Wi0torPHDSEcuMU985How+G039o\nYRxx6471Igt5w8DxddAigf7xNyHFGYZhGIYRTzt1PeSr75PWGO2lJvX9VBQ/40fTj0UR83MS7jsC\nzU3xHIq83y7DO3tznNuX1pWPe9CaMFELPBqGYRiGIfLW9ZC/vu/Neb5j9b0/s+ZDaFi4vzipP0Tu\nCee6s9Fy9sPR5E8fRcMRbyhaKDRs/Xg0v8XeaJ2vh1FA2T+c69bS/EOeLEEOwzAMwxgo5K3rf88A\nru99Q2gtrevMnO4J408nfhma2+EKtDjfgqIFCfAQmsNiFZrI61totuMNaF0EENSvaAHQhmEYhhFP\n3ep6qEF9H7be1jFoIbrTvP2paMj5eGd/Cckrt7tMQHMQuLMX70brRFQr0MrIoBk9/enPl6JJwLZH\nFmNwMcTRyFVnGIZhGEY66lDXQw3r+9k0p8dfF7mmTkZrrPgsQOvRhK10nIXeiOMzgP/SXB9me2TF\nboumQn/QuXYYshBf36YshmEYhjFYqENdDzWp74c43/dA1txiFMG9H4rWXo6sRpA1dijwcxQ4VQbL\n0LIWL3j7M9FaLo8g63Q8mv4dNJ/BI6Rb+dcwDMMwBjt1qeuhJvW93zU2Bfg++vEu41Df4UxgLrLa\nbgD2B+4rWhiPZWjF3VOAochN9k7v3Bq0qOAZSFl7YjNFG4ZhGEYa6lTXg9X3r/RLGoZhGIYxMLG6\n3jAMwzAMwzAMwzAMwzAMwzAMwzDqwf8B7yMSjCQ6CdcAAAAASUVORK5CYII=\n",
       "prompt_number": 596,
       "text": [
        "   ________________________________________________________                   \n",
        "  \u2571    4        3         2  2        2                          2            \n",
        "\u2572\u2571  9\u22c5a  - 130\u22c5a \u22c5b + 25\u22c5a \u22c5b  - 750\u22c5a  - 1250\u22c5a\u22c5b + 15625    3\u22c5a  - 5\u22c5a\u22c5b - 1\n",
        "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 + \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n",
        "                            2                                      \u239b 2     \u239e  \n",
        "                         2\u22c5a  + 50                               2\u22c5\u239da  + 25\u23a0  \n",
        "\n",
        "  \n",
        "  \n",
        "25\n",
        "\u2500\u2500\n",
        "  \n",
        "  "
       ]
      }
     ],
     "prompt_number": 596
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}