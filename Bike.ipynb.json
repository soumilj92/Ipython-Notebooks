{
 "metadata": {
  "name": "",
  "signature": "sha256:b2edbadb466c0091a0bb23df4545700eeecde3ec8e66e1cc94cfd82fb7047478"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Time Series Analysis \n",
      "Kaggle - Bike Model "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import pandas as pd\n",
      "import numpy as np\n",
      "import matplotlib.pyplot as plt\n",
      "import os"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 282
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%pylab inline"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Populating the interactive namespace from numpy and matplotlib\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "WARNING: pylab import has clobbered these variables: ['test']\n",
        "`%matplotlib` prevents importing * from pylab and numpy\n"
       ]
      }
     ],
     "prompt_number": 283
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "os.getcwd()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 2,
       "text": [
        "'/Users/soumiljain'"
       ]
      }
     ],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "os.chdir('desktop/bike')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "!ls"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\u001b[34mArchive\u001b[m\u001b[m   ss.csv    test.csv  train.csv\r\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test=pd.read_csv('test.csv')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test.head(1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>datetime</th>\n",
        "      <th>season</th>\n",
        "      <th>holiday</th>\n",
        "      <th>workingday</th>\n",
        "      <th>weather</th>\n",
        "      <th>temp</th>\n",
        "      <th>atemp</th>\n",
        "      <th>humidity</th>\n",
        "      <th>windspeed</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> 2011-01-20 00:00:00</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 1</td>\n",
        "      <td> 10.66</td>\n",
        "      <td> 11.365</td>\n",
        "      <td> 56</td>\n",
        "      <td> 26.0027</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 20,
       "text": [
        "              datetime  season  holiday  workingday  weather   temp   atemp  \\\n",
        "0  2011-01-20 00:00:00       1        0           1        1  10.66  11.365   \n",
        "\n",
        "   humidity  windspeed  \n",
        "0        56    26.0027  "
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(test.datetime[0])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "str"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Lets convert the datetime column into a datetime format"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test=pd.read_csv('test.csv',parse_dates=['datetime'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 26
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>datetime</th>\n",
        "      <th>season</th>\n",
        "      <th>holiday</th>\n",
        "      <th>workingday</th>\n",
        "      <th>weather</th>\n",
        "      <th>temp</th>\n",
        "      <th>atemp</th>\n",
        "      <th>humidity</th>\n",
        "      <th>windspeed</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2011-01-20 00:00:00</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 1</td>\n",
        "      <td> 10.66</td>\n",
        "      <td> 11.365</td>\n",
        "      <td> 56</td>\n",
        "      <td> 26.0027</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>2011-01-20 01:00:00</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 1</td>\n",
        "      <td> 10.66</td>\n",
        "      <td> 13.635</td>\n",
        "      <td> 56</td>\n",
        "      <td>  0.0000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>2011-01-20 02:00:00</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 1</td>\n",
        "      <td> 10.66</td>\n",
        "      <td> 13.635</td>\n",
        "      <td> 56</td>\n",
        "      <td>  0.0000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>2011-01-20 03:00:00</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 1</td>\n",
        "      <td> 10.66</td>\n",
        "      <td> 12.880</td>\n",
        "      <td> 56</td>\n",
        "      <td> 11.0014</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>2011-01-20 04:00:00</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 1</td>\n",
        "      <td> 10.66</td>\n",
        "      <td> 12.880</td>\n",
        "      <td> 56</td>\n",
        "      <td> 11.0014</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 27,
       "text": [
        "             datetime  season  holiday  workingday  weather   temp   atemp  \\\n",
        "0 2011-01-20 00:00:00       1        0           1        1  10.66  11.365   \n",
        "1 2011-01-20 01:00:00       1        0           1        1  10.66  13.635   \n",
        "2 2011-01-20 02:00:00       1        0           1        1  10.66  13.635   \n",
        "3 2011-01-20 03:00:00       1        0           1        1  10.66  12.880   \n",
        "4 2011-01-20 04:00:00       1        0           1        1  10.66  12.880   \n",
        "\n",
        "   humidity  windspeed  \n",
        "0        56    26.0027  \n",
        "1        56     0.0000  \n",
        "2        56     0.0000  \n",
        "3        56    11.0014  \n",
        "4        56    11.0014  "
       ]
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(test.datetime[0])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 28,
       "text": [
        "pandas.tslib.Timestamp"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So now each element of the datetime column is a pandas timestamp"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now lets make datetime as the index of the dataframe"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test=pd.read_csv('test.csv',parse_dates=['datetime'],index_col='datetime')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 30
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test.head(1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>season</th>\n",
        "      <th>holiday</th>\n",
        "      <th>workingday</th>\n",
        "      <th>weather</th>\n",
        "      <th>temp</th>\n",
        "      <th>atemp</th>\n",
        "      <th>humidity</th>\n",
        "      <th>windspeed</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>datetime</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2011-01-20</th>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 1</td>\n",
        "      <td> 10.66</td>\n",
        "      <td> 11.365</td>\n",
        "      <td> 56</td>\n",
        "      <td> 26.0027</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 31,
       "text": [
        "            season  holiday  workingday  weather   temp   atemp  humidity  \\\n",
        "datetime                                                                    \n",
        "2011-01-20       1        0           1        1  10.66  11.365        56   \n",
        "\n",
        "            windspeed  \n",
        "datetime               \n",
        "2011-01-20    26.0027  "
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test.index"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 32,
       "text": [
        "<class 'pandas.tseries.index.DatetimeIndex'>\n",
        "[2011-01-20 00:00:00, ..., 2012-12-31 23:00:00]\n",
        "Length: 6493, Freq: None, Timezone: None"
       ]
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So we see that the index of the dataframe is a datetime index"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(test.index)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 33,
       "text": [
        "6493"
       ]
      }
     ],
     "prompt_number": 33
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test.head(4)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>season</th>\n",
        "      <th>holiday</th>\n",
        "      <th>workingday</th>\n",
        "      <th>weather</th>\n",
        "      <th>temp</th>\n",
        "      <th>atemp</th>\n",
        "      <th>humidity</th>\n",
        "      <th>windspeed</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>datetime</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2011-01-20 00:00:00</th>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 1</td>\n",
        "      <td> 10.66</td>\n",
        "      <td> 11.365</td>\n",
        "      <td> 56</td>\n",
        "      <td> 26.0027</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2011-01-20 01:00:00</th>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 1</td>\n",
        "      <td> 10.66</td>\n",
        "      <td> 13.635</td>\n",
        "      <td> 56</td>\n",
        "      <td>  0.0000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2011-01-20 02:00:00</th>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 1</td>\n",
        "      <td> 10.66</td>\n",
        "      <td> 13.635</td>\n",
        "      <td> 56</td>\n",
        "      <td>  0.0000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2011-01-20 03:00:00</th>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 1</td>\n",
        "      <td> 10.66</td>\n",
        "      <td> 12.880</td>\n",
        "      <td> 56</td>\n",
        "      <td> 11.0014</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 35,
       "text": [
        "                     season  holiday  workingday  weather   temp   atemp  \\\n",
        "datetime                                                                   \n",
        "2011-01-20 00:00:00       1        0           1        1  10.66  11.365   \n",
        "2011-01-20 01:00:00       1        0           1        1  10.66  13.635   \n",
        "2011-01-20 02:00:00       1        0           1        1  10.66  13.635   \n",
        "2011-01-20 03:00:00       1        0           1        1  10.66  12.880   \n",
        "\n",
        "                     humidity  windspeed  \n",
        "datetime                                  \n",
        "2011-01-20 00:00:00        56    26.0027  \n",
        "2011-01-20 01:00:00        56     0.0000  \n",
        "2011-01-20 02:00:00        56     0.0000  \n",
        "2011-01-20 03:00:00        56    11.0014  "
       ]
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test_last=test.index[-1:]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 36
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test_last"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 37,
       "text": [
        "<class 'pandas.tseries.index.DatetimeIndex'>\n",
        "[2012-12-31 23:00:00]\n",
        "Length: 1, Freq: None, Timezone: None"
       ]
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Lets make a time series from the first and the last datetime stamp of the above dataframe with an interval of an hour "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test.index[0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 44,
       "text": [
        "Timestamp('2011-01-20 00:00:00')"
       ]
      }
     ],
     "prompt_number": 44
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test.index[len(test)-1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 46,
       "text": [
        "Timestamp('2012-12-31 23:00:00')"
       ]
      }
     ],
     "prompt_number": 46
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temp1=pd.date_range(test.index[0],test.index[len(test)-1],freq='H')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 47
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temp1[:4]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 48,
       "text": [
        "<class 'pandas.tseries.index.DatetimeIndex'>\n",
        "[2011-01-20 00:00:00, ..., 2011-01-20 03:00:00]\n",
        "Length: 4, Freq: H, Timezone: None"
       ]
      }
     ],
     "prompt_number": 48
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(temp1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 49,
       "text": [
        "17088"
       ]
      }
     ],
     "prompt_number": 49
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(test)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 50,
       "text": [
        "6493"
       ]
      }
     ],
     "prompt_number": 50
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So clearly there are a lot of time stamps missing in the dataframe test"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now similar to the test data make the train data "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train=pd.read_csv('train.csv',parse_dates=['datetime'],index_col='datetime')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 52
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train.head(3)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>season</th>\n",
        "      <th>holiday</th>\n",
        "      <th>workingday</th>\n",
        "      <th>weather</th>\n",
        "      <th>temp</th>\n",
        "      <th>atemp</th>\n",
        "      <th>humidity</th>\n",
        "      <th>windspeed</th>\n",
        "      <th>casual</th>\n",
        "      <th>registered</th>\n",
        "      <th>count</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>datetime</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2011-01-01 00:00:00</th>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 9.84</td>\n",
        "      <td> 14.395</td>\n",
        "      <td> 81</td>\n",
        "      <td> 0</td>\n",
        "      <td> 3</td>\n",
        "      <td> 13</td>\n",
        "      <td> 16</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2011-01-01 01:00:00</th>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 9.02</td>\n",
        "      <td> 13.635</td>\n",
        "      <td> 80</td>\n",
        "      <td> 0</td>\n",
        "      <td> 8</td>\n",
        "      <td> 32</td>\n",
        "      <td> 40</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2011-01-01 02:00:00</th>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 9.02</td>\n",
        "      <td> 13.635</td>\n",
        "      <td> 80</td>\n",
        "      <td> 0</td>\n",
        "      <td> 5</td>\n",
        "      <td> 27</td>\n",
        "      <td> 32</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 54,
       "text": [
        "                     season  holiday  workingday  weather  temp   atemp  \\\n",
        "datetime                                                                  \n",
        "2011-01-01 00:00:00       1        0           0        1  9.84  14.395   \n",
        "2011-01-01 01:00:00       1        0           0        1  9.02  13.635   \n",
        "2011-01-01 02:00:00       1        0           0        1  9.02  13.635   \n",
        "\n",
        "                     humidity  windspeed  casual  registered  count  \n",
        "datetime                                                             \n",
        "2011-01-01 00:00:00        81          0       3          13     16  \n",
        "2011-01-01 01:00:00        80          0       8          32     40  \n",
        "2011-01-01 02:00:00        80          0       5          27     32  "
       ]
      }
     ],
     "prompt_number": 54
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Clearly the sum of the casual and registered trips of bicycle should be equal to the count variable  .Lets check it once quickly"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "l=0\n",
      "for i in range(0,len(train),1):\n",
      "        if ((train['casual'][i]+train['registered'][i])!=train['count'][i]):\n",
      "            l=1\n",
      "            break"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 55
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "l"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 56,
       "text": [
        "0"
       ]
      }
     ],
     "prompt_number": 56
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Therefore our assumption was correct "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now lets try to study the various kind of variables first "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>season</th>\n",
        "      <th>holiday</th>\n",
        "      <th>workingday</th>\n",
        "      <th>weather</th>\n",
        "      <th>temp</th>\n",
        "      <th>atemp</th>\n",
        "      <th>humidity</th>\n",
        "      <th>windspeed</th>\n",
        "      <th>casual</th>\n",
        "      <th>registered</th>\n",
        "      <th>count</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>count</th>\n",
        "      <td> 10886.000000</td>\n",
        "      <td> 10886.000000</td>\n",
        "      <td> 10886.000000</td>\n",
        "      <td> 10886.000000</td>\n",
        "      <td> 10886.00000</td>\n",
        "      <td> 10886.000000</td>\n",
        "      <td> 10886.000000</td>\n",
        "      <td> 10886.000000</td>\n",
        "      <td> 10886.000000</td>\n",
        "      <td> 10886.000000</td>\n",
        "      <td> 10886.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>mean</th>\n",
        "      <td>     2.506614</td>\n",
        "      <td>     0.028569</td>\n",
        "      <td>     0.680875</td>\n",
        "      <td>     1.418427</td>\n",
        "      <td>    20.23086</td>\n",
        "      <td>    23.655084</td>\n",
        "      <td>    61.886460</td>\n",
        "      <td>    12.799395</td>\n",
        "      <td>    36.021955</td>\n",
        "      <td>   155.552177</td>\n",
        "      <td>   191.574132</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>std</th>\n",
        "      <td>     1.116174</td>\n",
        "      <td>     0.166599</td>\n",
        "      <td>     0.466159</td>\n",
        "      <td>     0.633839</td>\n",
        "      <td>     7.79159</td>\n",
        "      <td>     8.474601</td>\n",
        "      <td>    19.245033</td>\n",
        "      <td>     8.164537</td>\n",
        "      <td>    49.960477</td>\n",
        "      <td>   151.039033</td>\n",
        "      <td>   181.144454</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>min</th>\n",
        "      <td>     1.000000</td>\n",
        "      <td>     0.000000</td>\n",
        "      <td>     0.000000</td>\n",
        "      <td>     1.000000</td>\n",
        "      <td>     0.82000</td>\n",
        "      <td>     0.760000</td>\n",
        "      <td>     0.000000</td>\n",
        "      <td>     0.000000</td>\n",
        "      <td>     0.000000</td>\n",
        "      <td>     0.000000</td>\n",
        "      <td>     1.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>25%</th>\n",
        "      <td>     2.000000</td>\n",
        "      <td>     0.000000</td>\n",
        "      <td>     0.000000</td>\n",
        "      <td>     1.000000</td>\n",
        "      <td>    13.94000</td>\n",
        "      <td>    16.665000</td>\n",
        "      <td>    47.000000</td>\n",
        "      <td>     7.001500</td>\n",
        "      <td>     4.000000</td>\n",
        "      <td>    36.000000</td>\n",
        "      <td>    42.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>50%</th>\n",
        "      <td>     3.000000</td>\n",
        "      <td>     0.000000</td>\n",
        "      <td>     1.000000</td>\n",
        "      <td>     1.000000</td>\n",
        "      <td>    20.50000</td>\n",
        "      <td>    24.240000</td>\n",
        "      <td>    62.000000</td>\n",
        "      <td>    12.998000</td>\n",
        "      <td>    17.000000</td>\n",
        "      <td>   118.000000</td>\n",
        "      <td>   145.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>75%</th>\n",
        "      <td>     4.000000</td>\n",
        "      <td>     0.000000</td>\n",
        "      <td>     1.000000</td>\n",
        "      <td>     2.000000</td>\n",
        "      <td>    26.24000</td>\n",
        "      <td>    31.060000</td>\n",
        "      <td>    77.000000</td>\n",
        "      <td>    16.997900</td>\n",
        "      <td>    49.000000</td>\n",
        "      <td>   222.000000</td>\n",
        "      <td>   284.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>max</th>\n",
        "      <td>     4.000000</td>\n",
        "      <td>     1.000000</td>\n",
        "      <td>     1.000000</td>\n",
        "      <td>     4.000000</td>\n",
        "      <td>    41.00000</td>\n",
        "      <td>    45.455000</td>\n",
        "      <td>   100.000000</td>\n",
        "      <td>    56.996900</td>\n",
        "      <td>   367.000000</td>\n",
        "      <td>   886.000000</td>\n",
        "      <td>   977.000000</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 57,
       "text": [
        "             season       holiday    workingday       weather         temp  \\\n",
        "count  10886.000000  10886.000000  10886.000000  10886.000000  10886.00000   \n",
        "mean       2.506614      0.028569      0.680875      1.418427     20.23086   \n",
        "std        1.116174      0.166599      0.466159      0.633839      7.79159   \n",
        "min        1.000000      0.000000      0.000000      1.000000      0.82000   \n",
        "25%        2.000000      0.000000      0.000000      1.000000     13.94000   \n",
        "50%        3.000000      0.000000      1.000000      1.000000     20.50000   \n",
        "75%        4.000000      0.000000      1.000000      2.000000     26.24000   \n",
        "max        4.000000      1.000000      1.000000      4.000000     41.00000   \n",
        "\n",
        "              atemp      humidity     windspeed        casual    registered  \\\n",
        "count  10886.000000  10886.000000  10886.000000  10886.000000  10886.000000   \n",
        "mean      23.655084     61.886460     12.799395     36.021955    155.552177   \n",
        "std        8.474601     19.245033      8.164537     49.960477    151.039033   \n",
        "min        0.760000      0.000000      0.000000      0.000000      0.000000   \n",
        "25%       16.665000     47.000000      7.001500      4.000000     36.000000   \n",
        "50%       24.240000     62.000000     12.998000     17.000000    118.000000   \n",
        "75%       31.060000     77.000000     16.997900     49.000000    222.000000   \n",
        "max       45.455000    100.000000     56.996900    367.000000    886.000000   \n",
        "\n",
        "              count  \n",
        "count  10886.000000  \n",
        "mean     191.574132  \n",
        "std      181.144454  \n",
        "min        1.000000  \n",
        "25%       42.000000  \n",
        "50%      145.000000  \n",
        "75%      284.000000  \n",
        "max      977.000000  "
       ]
      }
     ],
     "prompt_number": 57
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train['season'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 58,
       "text": [
        "4    2734\n",
        "3    2733\n",
        "2    2733\n",
        "1    2686\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 58
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This function gives the unique value count of a variable "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train['holiday'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 61,
       "text": [
        "0    10575\n",
        "1      311\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 61
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Holiday is a binary variable "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Clearly 1 represents a holiday and 0 is a non holiday ."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train['workingday'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 62,
       "text": [
        "1    7412\n",
        "0    3474\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 62
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Again working day is a binary variable "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train['weather'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 63,
       "text": [
        "1    7192\n",
        "2    2834\n",
        "3     859\n",
        "4       1\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 63
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Again weather is a characteristic variable like seasons . There is only 1 count for weather=4 . So while creating the dummy variables , there is no need to make 3 dummy variables for weather . 2will be enough ."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train.info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "DatetimeIndex: 10886 entries, 2011-01-01 00:00:00 to 2012-12-19 23:00:00\n",
        "Data columns (total 11 columns):\n",
        "season        10886 non-null int64\n",
        "holiday       10886 non-null int64\n",
        "workingday    10886 non-null int64\n",
        "weather       10886 non-null int64\n",
        "temp          10886 non-null float64\n",
        "atemp         10886 non-null float64\n",
        "humidity      10886 non-null int64\n",
        "windspeed     10886 non-null float64\n",
        "casual        10886 non-null int64\n",
        "registered    10886 non-null int64\n",
        "count         10886 non-null int64\n",
        "dtypes: float64(3), int64(8)"
       ]
      }
     ],
     "prompt_number": 65
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Clearly temp ,atemp and humidity are continuous variables "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Humidity is an integer variable "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print \"min=\",min(train.humidity),\"max=\",max(train.humidity)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "min= 0 max= 100\n"
       ]
      }
     ],
     "prompt_number": 68
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "mean(train.humidity)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 69,
       "text": [
        "61.88645967297446"
       ]
      }
     ],
     "prompt_number": 69
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(train['humidity'].unique())"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 71,
       "text": [
        "89"
       ]
      }
     ],
     "prompt_number": 71
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So out of 101 integer values possible for humidity , it can take 89 integer as its value "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So now we have a good understanding of all the variables and their distributions we can start our analysis "
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Dummy Variable Creation "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "The characteristic variables which have a less number of categories could be tackled by the creation of dummy variables "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train['season'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 73,
       "text": [
        "4    2734\n",
        "3    2733\n",
        "2    2733\n",
        "1    2686\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 73
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train['season1']=0\n",
      "train['season2']=0\n",
      "train['season3']=0\n",
      "train['season1'][train['season']==1]=1\n",
      "train['season2'][train['season']==2]=1\n",
      "train['season3'][train['season']==3]=1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 75
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Remember the number of dummy variables created for 1 variable are equal to the total number of distinct categories of that variable -1"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So 3 dummy variables are created in the above case "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train['weather'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 76,
       "text": [
        "1    7192\n",
        "2    2834\n",
        "3     859\n",
        "4       1\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 76
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "2 dummy variables in the above case as there are negligible amount of observations in case of weather =4 (only 1 obs.)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train['weather1']=0\n",
      "train['weather2']=0\n",
      "train['weather1'][train['weather']==1]=1\n",
      "train['weather2'][train['weather']==2]=1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 77
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "For binary variables there is no need to make a dummy variable a they themselves act like 1 "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train.index[:4]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 79,
       "text": [
        "<class 'pandas.tseries.index.DatetimeIndex'>\n",
        "[2011-01-01 00:00:00, ..., 2011-01-01 03:00:00]\n",
        "Length: 4, Freq: None, Timezone: None"
       ]
      }
     ],
     "prompt_number": 79
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train.index[len(train)-1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 84,
       "text": [
        "Timestamp('2012-12-19 23:00:00')"
       ]
      }
     ],
     "prompt_number": 84
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temp2=pd.date_range(train.index[0],train.index[len(train)-1],freq='H')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 85
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temp2[:2]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 86,
       "text": [
        "<class 'pandas.tseries.index.DatetimeIndex'>\n",
        "[2011-01-01 00:00:00, 2011-01-01 01:00:00]\n",
        "Length: 2, Freq: H, Timezone: None"
       ]
      }
     ],
     "prompt_number": 86
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(train)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 87,
       "text": [
        "10886"
       ]
      }
     ],
     "prompt_number": 87
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(temp2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 88,
       "text": [
        "17256"
       ]
      }
     ],
     "prompt_number": 88
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(test)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 89,
       "text": [
        "6493"
       ]
      }
     ],
     "prompt_number": 89
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train_start=train.index[0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 90
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train_start.date()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 94,
       "text": [
        "datetime.date(2011, 1, 1)"
       ]
      }
     ],
     "prompt_number": 94
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train_start.time()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 96,
       "text": [
        "datetime.time(0, 0)"
       ]
      }
     ],
     "prompt_number": 96
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So clearly its 12 midnight 1st january 2011 from where the train data starts from "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train_end=train.index[len(train)-1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 98
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train_end.date()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 99,
       "text": [
        "datetime.date(2012, 12, 19)"
       ]
      }
     ],
     "prompt_number": 99
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train_end.time()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 100,
       "text": [
        "datetime.time(23, 0)"
       ]
      }
     ],
     "prompt_number": 100
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "so clearly we have the train data till 11 pm 19th december 2012 "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test_start=test.index[0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 101
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test_start.date()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 102,
       "text": [
        "datetime.date(2011, 1, 20)"
       ]
      }
     ],
     "prompt_number": 102
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test_start.time()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 103,
       "text": [
        "datetime.time(0, 0)"
       ]
      }
     ],
     "prompt_number": 103
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "The 20th to the end of the month dats is missing form each of the month that we have to predict "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Lets test this using our time series analysis skills "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Calculate the length of the train data given that you only know that the first 19 days till 11pm of the 19th day is in time series "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "start=train.index[0]\n",
      "start"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 105,
       "text": [
        "Timestamp('2011-01-01 00:00:00')"
       ]
      }
     ],
     "prompt_number": 105
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "end=pd.Timestamp('2011-01-19 23:00:00')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 106
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train_month=pd.date_range(start,end,freq='H')\n",
      "len(train_month)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 107,
       "text": [
        "456"
       ]
      }
     ],
     "prompt_number": 107
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(train_month)*12*2"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 110,
       "text": [
        "10944"
       ]
      }
     ],
     "prompt_number": 110
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(train)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 109,
       "text": [
        "10886"
       ]
      }
     ],
     "prompt_number": 109
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So we clealy see that some of the timestamps are missing form the train data precisely , 10944-10886=58 timestamps"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now lets check the same thing for the test data "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test.index[len(test)-1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 111,
       "text": [
        "Timestamp('2012-12-31 23:00:00')"
       ]
      }
     ],
     "prompt_number": 111
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "total=pd.date_range(start,test.index[len(test)-1],freq='H')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 112
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "total"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 113,
       "text": [
        "<class 'pandas.tseries.index.DatetimeIndex'>\n",
        "[2011-01-01 00:00:00, ..., 2012-12-31 23:00:00]\n",
        "Length: 17544, Freq: H, Timezone: None"
       ]
      }
     ],
     "prompt_number": 113
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(total)-len(train_month)*24"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 114,
       "text": [
        "6600"
       ]
      }
     ],
     "prompt_number": 114
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So these are the total number of timestamps data that should be there in the test data "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(test)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 116,
       "text": [
        "6493"
       ]
      }
     ],
     "prompt_number": 116
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So again some timestamps missing in the data . Number of timestamps missing  = 6600-6493=107"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "lets take the first month of the train data :"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train.index[0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 196,
       "text": [
        "Timestamp('2011-01-01 00:00:00')"
       ]
      }
     ],
     "prompt_number": 196
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "m1=train[:'2011-01-31 23:00:00']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 197
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(m1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 198,
       "text": [
        "431"
       ]
      }
     ],
     "prompt_number": 198
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Also take the 1st month of the test data "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1=test[:'2011-02-01 00:00:00']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 199
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t1.index[len(t1)-1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 200,
       "text": [
        "Timestamp('2011-01-31 23:00:00')"
       ]
      }
     ],
     "prompt_number": 200
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "m1.index[len(m1)-1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 201,
       "text": [
        "Timestamp('2011-01-19 23:00:00')"
       ]
      }
     ],
     "prompt_number": 201
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "(m1['registered']).plot(style='b*')\n",
      "(m1['casual']).plot(style='r*')\n",
      "(m1['count']).plot(style='y*')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 202,
       "text": [
        "<matplotlib.axes._subplots.AxesSubplot at 0x10b68ee10>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10b698890>"
       ]
      }
     ],
     "prompt_number": 202
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This has got a lot of points . Lets make a daily data and then represent it on the graph to search for any pattern "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "m1D=m1.resample('D')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 203
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "m1D['casual'].plot(style='r-')\n",
      "m1D['registered'].plot(style='g-')\n",
      "m1D['count'].plot(style='b-')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 204,
       "text": [
        "<matplotlib.axes._subplots.AxesSubplot at 0x10cd85890>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAXIAAAEmCAYAAAB/OxvoAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzsnXd4lMX2xz9DE6mhBqSFjoA0QZQaQCSgINjAgqACKmK7\nFsCrV+/1JyoKVmyIggpSQ0ekLkpReu+9h14kQNr5/TEbSCBld7Ob3U3O53n2yc6788573mTy3XnP\nnDljRARFURQleMnhbwMURVGUjKFCriiKEuSokCuKogQ5KuSKoihBjgq5oihKkKNCriiKEuSkK+TG\nmIHGmE3GmA3GmDHGmBuMMUWNMXONMduNMXOMMSGZYayiKIpyPWkKuTEmDOgNNBCRW4CcQDdgADBX\nRKoB851lRVEUxQ+kNyI/B8QC+YwxuYB8wGGgEzDKWWcU0NlnFiqKoihpkqaQi8gpYAiwHyvgZ0Rk\nLhAqIlHOalFAqE+tVBRFUVIlV1ofGmMqAy8BYcBZYIIx5rGkdUREjDEprvNP7biiKIqSNiJiXK2b\nnmulIbBURE6KSBwQCdwBHDXGlAIwxpQGjqVhTIZfb7/9tlfaCdS21Ca9v0C1KavfXyDaJOL++Dc9\nId8K3G6MudEYY4A7gc3AdKCHs04PYIrbV3aD8PDwLN2W2pT5balNmd+W2uQ7THrqb4x5HSvWCcBq\noBdQEBgPlAf2Ag+JyJkUzhVPvl0URVGyM8YYxA3XSrpCnkFjVMgVRVHcxF0h15WdiqIoQY4KuaIo\nSpCjQq4oihLkqJAriqIEOSrkiqIoQY4KuaIoSpCjQq4oihLkqJAriqIEOSrkiqIoQY4KuaIoSpCj\nQq4oihLkqJAriqIEOSrkiqIoQY4KuaIoSpCjQq4oihLkqJAriqIEOSrkiqIoQY4KuaIoSgBx5rpN\nM9NHhVxRFCVAOHMGqlZ1/7x0hdwYU90YsybJ66wx5gVjTFFjzFxjzHZjzBxjTIgnhiuKoiiW776D\niAj3z3Nr82VjTA7gEHAb8DxwQkQGG2P6A0VEZMA19XXzZUVRFBeIiYFKlWDGDKhf37ebL98J7BSR\nA0AnYJTz+Cigs5ttKYqiKE7GjYPq1aFePffPdVfIuwG/Ot+HikiU830UEOr+5RVFURQRGDIEXnnF\ns/NzuVrRGJMH6Aj0v94IEWNMij6Unj17EhYWBkBISAj16tUjPDwcAIfDAZDtyy1ahHPxIsyd6+DS\nJahbN5zoaFiyxJarVrXlNWtsuUwZW962zZaLFLHlgwcdtG0L//1vOMYEzv1pWctaTrs8dKiDPXtG\nMm4cLF8ehru47CM3xtwLPCsiEc7yViBcRI4aY0oDC0WkxjXnqI88BY4cgUWLwOGwP7dtg7x5IV++\n61/586d8PKVXQgK89x6UKQNffQUVK/r7ThVFcYUOHeD+++Gpp2zZGPd85C6PyIGHuepWAZgG9AA+\ndP6c4kZb2YqDB61gJ4r3iRPQogW0bAlPPw116kDOnN651n33wSefQKNG8Npr8K9/Qe7c3mlbURTv\ns3kzrFkDkZGet+HSiNwYkx/YB1QUkfPOY0WB8UB5YC/wkIicuea8bDki378/+Yj7zBkr3OHhVrxv\nuQVy+DiCf88e6NsXDh2Cb7+FO+7w7fUURfGMXr2gQgV4662rx9wdkbsVfugu2UXI9+5NLtz//GMF\nO/FVq5bvhTslRGD8eHj5ZejcGQYNghCN9leUgOHoUbj5ZtixA4oXBxGh/7z+fHTXRz4NP1SwAjlu\nHPToAWFhcPvtMGuWdWfMmAFRUTBhAvTrlzmj79QwBrp2tY9uCQn2C2X8eGu/oij+Z9gw6NbNijjA\nxM0Tmbd7ntvt6IjcTURgwACYOROef96OuKtXt6IZ6CxdCn362Me4YcPsl5CiKP4hOtr+Dy5eDNWq\nQUx8DDWH1eTbe77lzsp36ojcV4jYCcQ5c6wL5emnoUaN4BBxgCZNYPVqaN4cGjaEjz6C2Fh/W6Uo\n2ZNRo+zcVbVqtvzNym+oWqwqbSq1cbstHZG7iIgN1l+0CObOhaJF/W1Rxti1y06GHj1q8zs0buxv\nixQl+5CQYAeBI0bYgdXZS2ep9mU15nafS53QOm5PduqI3AVE7IThn3/CvHnBL+IAlSvD7NnQv7+d\nCO3XD86e9bdVipI9mD7dBh40a2bLHy75kLur3k2d0Doetacj8nQQgRdegOXL4fffvR/1ISJcjLvo\nlbYMhhtz3+j2eadOWb//rFnw2Wc2Fj1Y3EWKEoy0aAHPPWeDEQ6eO0jdb+qy7pl1lC1UFtDwQ6+S\nkGBHqqtXWxEvXNh7bUfHRjNmwxiGrRjG5uObyWkyviIoLiGON5q/wTvh73h0/uLF1u9fqRJ8+aWd\nFFUUxbssXw4PPQQ7d0KuXPDk1CcpVaAUg9oMulLHlys7sxUJCfDss7Bhg53cLFTIO+3uOLmDr1Z8\nxU/rf6JpuaZ80OYD2lZuSw6TcS/XsQvHaDWqFbly5OLNFm+6fX6zZnaF2Qcf2GicPXt0ZK4o3mbI\nEHjxRSviG6I2MHPHTLb3256hNnVEngIJCXZkumUL/PYbFCyYsfbiE+KZuWMmw1YMY82RNTxZ/0me\nafgMYSFhXrE3KUf/OUr4yHB61uvJgGYD0j8hBURsWNTvv9sJGUVRvMPevXDrrXaQVKgQdBjdgYgq\nEbzQ+IVk9XREnkESEqB3b7vSKqMifvzCcUasGcE3K7+hVIFSPNfoOaZ2m0reXHm9Z/A1lCpQigU9\nFhA+MpxcOXLxapNX3W7DGGjTBubPVyFXFG/y2Wc2MVahQjB/93y2ndzGlG4ZT1OlQp6E+Hj7S967\n1078FSjgfhsiwt+H/mbYimHM2D6DLjW6MOmhSdx6061etzc1bip4UzIxf+n2l9xuo3VrmDzZTsgo\nipJxzpyxsePr10OCJPD6vNd5v8375MmZJ8Ntq5A7iY+HJ56wmQpnzrTpY90hOjaasRvHMmzFMM5c\nOkPfhn35tN2nFMtXzDcGp0PZQmWviHnuHLl57jb3FLl1a+vHS0jwX4oBRclKDB9u09WWLQtjNowl\np8nJgzUf9ErbKuRAXJzNmxIVZXOl5Mvn+rk7T+3km5XfMGrdKBqXacz/tfo/2lVp55XJy4xSvnD5\nK2KeM0dOnmn4jMvn3nQTlCwJa9dCgwY+NFJRsgExMfD55zBtGlyKu8Qb89/gpy4/YbwUTZDthTwu\nDrp3h5MnbZD+jS6GYc/ZNYdP/vqEVYdX8US9J/i7199UKlLJt8Z6QFhIGPMfn38lmqVXg14un9u6\nNSxYoEKuKBll/HioWhXq14chS4dRt1RdWlRo4b0LiIjPXrb5wCUmRuShh0TatROJjnb9vB/X/Cjl\nhpaTkWtGSnSMGyf6ke0ntkvZoWXlxzU/unzOpEkiERG+s0lRsgMJCSL16onMmCFyMvqkFB9cXDYf\n25zmOU7tdFlrs+2IPDYWHn7YZiCbMsVuteYKM7fPZMC8ATh6OqhRPHhCOqoWq8q87vNo/VNrcuXI\nxWN1Hkv3nPBw6NnTPhbmyfh8jKJkSxYuhMuXoX176D/vfe6rcR83l7jZq9fIlkIeE2NzAMfE2MiM\nG25w7bxlB5bRc2pPZjw8I6hEPJHqxaszt/tc7vzpTnKanDx8y8Np1i9a1D4OrlgBTZtmkpGKksUY\nMsRuubj/3F5+WPsDG5/d6PVr+H9GLpOJibHLY+PiYNIk10V88/HNdB7XmZ86/0TjssGbKrBmiZrM\n6T6Hf835FxM2TUi3fuvWNp5cyX6I2FC5IFzTFzBs2QKrVsFjj8FbC9+iX6N+lC5Y2uvXyVZCfvky\nPPCAfT9xousifuDsAdqPbs9HbT+ifdX2vjMwk6hdsjazH53N8789T+SWtHd8TZzwVLIP8fF2B6x6\n9Wze+jFj/G1R8DJ0qE0XveX0GubtnufRAj2XcMWRDoQAE4EtwGagMVAUmAtsB+YAISmc591Zgwzy\nxhsiHTuKXL7s+jkno09KzWE15aMlH/nOMD+x6vAqKflRSZm6dWqqdc6fF8mfX+TChUw0TPELly+L\njBghUrWqSJMmIjNniqxYIVKihMjBg/62Lvg4elQkJEQkKipB2oxqI18t/8rlc3FzstPVEflnwCwR\nuRmoA2wFBgBzRaQaMN9ZDmh++83m33Z14i46NpqOv3akfZX2vvsm9SMNSjdg5iMz6TWtFzO3z0yx\nToECdmS2ZEkmG6dkGhcv2myXVavCr7/ajUYWL7aLVxo2tKt7e/VSF4u7DBtm09SuOTeHA+cOuBX6\n6zbpKT1QGNidwvGtQKjzfSlgawp1MvKF5lVOnRIpUMD10XhsfKzcM+YeeSzyMYlPiPetcX7mrwN/\nSYnBJWT2jtkpfv6f/4gMGJDJRik+59w5kQ8/FClVSuTee0X+/jvlejExIrfeKvLtt5lrXzBz4YJ9\nktm0OU7qfF1HIjdHunU+PhiRVwSOG2N+NMasNsYMN8bkd4p4lLNOFBDq1W8YL/Pnn3a3e1dG4yJC\nn+l9iEuI44dOPwTEKk1f0rhsY6Z0m0L3yd1T3MFbJzyzFidPwjvv2Lzza9faNM1TpsBtt6VcP3du\nmyPkjTdg9+5MNTVo+eknux/n8ss/UzBPQTrX6OzT67kSfpgLaAD0E5EVxphPucaNIiJijEnxwatn\nz56EObdrDwkJoV69eoSHhwPgcDgAMqW8cCFUqODA4Ui//pz4OWw6vol3KrzDkj+X+MXezC43KdeE\nN8u9yQODH2By/8m0qtjqyud33BHOli0wY4aDAgUCw14tu1+OjHQwbhzMmxdOly7wyScOypaFW25J\n//xateDBBx106QJr1oSTI4f/7ydQyy1ahPPJJ9D76Tm8Nvw1pg2YhjEmzfMdDgcjR44EuKKXbpHe\nkB3rNtmTpNwMmImd+CzlPFaaAHet1KsnsmRJ+vU+XfapVP+iuhy/cNz3RgUgC/cslOKDi8uivYuS\nHW/bVmTKFD8ZpWSIvXtF+vYVKVJE5PnnRfbvT/+cc5fOycg1I6V7ZHc5f/m8iIjExYk0ayYydKiP\nDQ5ypk4VadhQZNAf78v94+73qA287VoRkaPAAWNMNeehO4FNwHSgh/NYDyDjSXV9xKlTdtf4Ro3S\nrjd241g+XvYxvz/2O8XzFc8c4wKM8LBwxtw3hq4Tu5IgCVeOaxhi8LFtm83o2aCBzX+9datN3FSu\nXMr14xPimbNrDo9FPka5T8oxacsktp3cxtiNYwHImRNGjoRBg2x8tJIyQ4ZAn37nGLLs42Tbt/kU\nV9QeqAusANYBkdgJ0KLAPIIg/HDyZJG77kq7zpydc6TkRyVlQ9SGzDEqwKk1rJYsO7DsSnn5cpFa\ntfxokOIyW7eKPPignWz73//sRH9arDu6Tl79/VUp/XFpafhdQ/n8r8/l2D/HRERkxrYZ0ui7Rsnq\nf/21HXHGxvrqDoKX5ctFypcXeX7Gy/LczOc8bgc3R+TZYqu3F1+E0qXtTvEpsfLwSjqM7sCkhybR\nvELzzDUuQBk4byDGmCsjivh4KF7cjupCA3paO3szdy48+ii8+qpdiJLa5ihHzh9hzIYx/Lz+Z05d\nPMVjdR6je53u1+UAiU+Ip+JnFZnabSr1S9cHbBhiRITd4/Wtt3x9R8FFt25QqfYJvstTg83PbaZk\n/pIetePuVm8uK74nLwJkRF6njsiyZSl/tv3Edin1cSmZskUdwElZun+p1P6qdrJj994r8uuvfjJI\nSZfvvxcpWVLkjz9S/vxCzAUZvX60tPu5nYR8ECJPTHlCFuxekG547X8d/5Vnpj+T7NiBA3bEv3q1\nt6wPfvbuFSlaVOS+UT3l3UXvZqgt3ByRZ3khP3FCpGBBGwt7LYfPHZaKn1aU4auGZ75hAU5cfJyU\n/Kik7Dm958qxzz4T6dXLfzYFInFx/rZAJD7erlquXNm6VZJ9lhAv83fPl55TekrIByES8UuEjFk/\nRi7EuL5U98DZA1LkgyJXJj0T+eknkdq1RS5d8sZdBD8vvyzy6NOH5aYhN8k/l//JUFvuCnnWDpAG\nFi2ymfty505+/Oyls7Qf3Z6n6j/l2xVXQUrOHDnpULUD07dNv3JMJzwtMTF2p5euXe3m3A88ACdO\n+MeWS5esK2XBAli2DKpXt8c3H9/MwHkDCfs0jFfmvMItJW9hc9/N/Pbobzx8y8Pky+36NlhlC5Wl\neYXmjNs4Ltnxxx6zq0HfftubdxScnD0Lo0YJO6u+wH/D/0v+PG7uFZlBsryQ27jx5McuxV2i87jO\nNC/fnDeav+EPs4KCTtU6MW37tCvlWrXgn3/s5tTZjYQEu6jsmWfsNngffQStWsGOHVCxItSpY7cJ\nzExOnoS2bW0mzwULoEQJO0DpMq4LbX9uS7zEM/ORmax5eg3/uuNfGcq616dBH75b/V2yY8bAN9/Y\nxUJLl2b0boKb4cPhliaHOX/jZnrW65n5BrgzfHf3RQC4VmrXTr70OC4+Tu4fd788NOEhiYsPgOfi\nAOb85fNScFBBOXvp7JVj3brZxErZhQ0bbHqC8uVt1M6gQdYXei2LFomEhVnX07lzvrdrxw6b3Or1\n161rRURk07FNUu2LatJvZj+5HOdGZjgXiIuPk3JDy8maI2uu+2zSJJEqVUT+yZg3IWiJjRUpXz5B\nwl57QGZsm+GVNlHXylWOH4f9+6/uOSki9JvVj9OXTvNT55/ImSOnfw0McArkKUDT8k35fefvV461\naZP13SsHDsDgwVC3rt3VJSHB7ue6YQMMHAgVKlx/TosWsG6djeioWxf++MN39i1daiNGXnkFPvwQ\ncuSAyVsm03JkSwY2G8gXHb4gT07vbumUM0dOejXoxXervrvus/vus+kvUosKy+pMmQI3FI0irNYJ\nOlTt4B8j3FF9d1/4eUQ+caJIhw5Xy18t/0rqf1M/2QhTSZthy4dJ98juV8q7dtkkSwkJfjTKB5w6\nZZNCtWhhIw969xZxOK6Odt1h2jSR0qVFXn1V5OJF79o5bpxI8eIis2bZclx8nLw5/00p/0l5WXFo\nhXcvdg2Jk54pTeSdOiVStqzIvHk+NSEgadpUpOqzA2TW9lleaxONWrnKc8+JDB58tRw+Mlxmbp/p\nP4OCkP1n9kuxD4tJbPzV1R9hYSKb0947NiiIjhYZP96GVRYqJPLAA3bxmCtRGHHxcbJo7yLpP7d/\nilkjjx0T6dLFuvbWXO+NcJuEBJEPPrBiuXatPXb64mnpMLqDtPixhUT9E5Xxi7hAxzEdZcTqlH1r\ns2dbF9SZM5liSkCwfLlImXIxUuz9UImJSyE0zkPcFfIs7VpJOtF5Ke4SKw6toFn5Zv40KegoV7gc\n5QqXY9mBZVeOBXs2xKgou3T9ppvg22/h3nutC27CBOjcOfWdoy7HXWbWjln0mtaL0kNK8+LsFwHo\n91s/OozuwObjm6/ULVHCbiX4+ut2QnLQIDsp6QmxsfD00zZX+LJl1nWz8dhGGg1vRJUiVZjXfZ7H\nC0/cpc+tffh21bcpftaunXVFvfRSppgSEHz2GdTt9CcP1O5M7py50z/BV7ij+u6+8OOIPCpKpHDh\nq8uIF+1ddN1SY8U13lrwlrw257Ur5V9+saPNYOXNN0Ueekjk0KH06567dE7GbRwn3SZ2k8LvF5Zm\nPzSTIUuHyO5Tu6/UuRx3WYYuHSrFBxeXvjP6Xpdwbd8+kdatRe64Q2T7dvdsPXtWpF07kYiIq5Oo\nEzZNkOKDi8uotaPca8wLxMXHSdmhZVOc9BSxO0pVqmQTR2V1Dh2yOwDVHtJMFu5Z6NW2UdeKZfx4\nkbvvvlr+r+O/ycRIcZ3lB5dLjS9rXCkfPmwz6QXCYhhPqFlT5K+/Uv/8+IXj8sPqH+SeMfdIwUEF\npd3P7eTbld/KkfNH0mz3xIUT0m9mPyk+uLh8vORjuRR71UcTH28XVBUrJvLVV67NMezfL3LLLSLP\nPGMHJHHxcTJw3kCp8EkFWXlopau363XeWfiO9J3RN9XP//jDzhEcz+IJRP/9b5FHnjwppT8u7fUI\nOBVyJ337inz88dVyq5Gt1D/uIfEJ8VL649Ky/cTV4eTNN4us9J+WeMyWLSJlylw/ibn/zH75/K/P\nJXxkuBR6v5DcP+5+Gb1+tJy+eNrta2w+tlk6jO4glT+rLJGbIyUhiWpv3mwTTrVrl/Y+mKtXWzsH\nD7aifyr6lET8EiGtRra6ktDKX6Q16ZnIK6/YOYesNimeSHS0TVHQ76fP5cXfXvR6+yrkTpIKzcXY\ni5L/vfwarZIBek/rLUOWDrlS7tcv+URysDBokLVdRGTr8a0y6I9B0ui7RlL0w6LSY3IPmbJlikTH\nRHvlWr/v/F1qf1VbWv7YUlYdXnXleEyMyDvv2LwoKeWumTnTRqZMmGDL64+ul8qfVZaXZ7+cbNLZ\nn6Q16Slio3VuvllkzJhMNCoT+f57kbvvTpDqX1RPliXUW6iQy9XdqxMf/RftXSQNv2voF1uyCtO2\nTpPwkeFXypGRdlQZbNx6q8jwiTvl5i9vlpuG3CR9Z/SVebvmeTXiICmx8bHyzYpvJPSjUOk5pacc\nOnfVMb9ihUiNGiJdu4qcPGmPDRtmwzuXLrXlcRvHSfHBxeWXdb/4xD5Pmb5tujQe3jjNOitW2FGr\nK3MRwURCgo1G+nrcDgn7NCzZE5e3cFfIs2TUisMBzZvbRPgAjr0OwiuE+9OkoKdNpTasOryK0xdP\nAzYaaOlSm3ckWNi3z75W5f6ULjW6cODlAwy7exhtKrXxWcRBrhy5eLrh02zrt42S+Upyy9e38O6i\nd4mOjaZhQ1i9GkqVskv8e/SwURCLF8NtjePpP7c//ef1Z85jc3i0zqM+sc9TIqpEcOj8IdYdXZdq\nnYYN4dlnoVcvu1Aqq7Bggb2fPUW+p1utbhjjerZZX5FlhTxpfpVF+xYRHhaeSm3FFfLlzkd4WDi/\n7fwNgCJFoFo1+PtvPxvmBpMnQ8eOwvSdk3m87uOZuql24byF+bDth6zsvZINxzZQ48sa/LL+F27I\nm8Cnn9rNenPksOGFIaVP0n50e1YdWcWK3iuu5AEPJHLlyEWv+imv9EzKm2/C0aMwYkQmGZYJfPop\nvPiiMG7TWLrV7uZvc4AsKuQLF9qERmBjf5cfWq7x416gY7WOTN8evNkQIyPhlvAdFLyhINWLV/eL\nDRWLVGT8g+MZc/8YPvv7M+4YcQdLDyyldWv48Uc4ELOORsMbUa9UPWY/Njugtxx8sv6T/LrxVy7E\nXEi1Tu7c9ktq4EDYsycTjfMRO3bYwUvV8OXcmPtG6oTW8bdJQBYU8iNH4Ngx+6gKsPzQcmoUr0Hh\nvIX9a1gW4J5q9/D7zt+JjY8FgivvSlSUzZVytMQvdK7e2d/m0Kx8M/7u9Tf9GvWj68SudJ3Yla9W\nfMWdP9/JoDaDGNx2MLly5PK3mWlSrnA5mpZvyvhN49OsV7u2FfLGjeHxx+GXX+zfIxj5/HPo0wem\n7Po1YNwqkAWFfNEim8BI/ePep3TB0lQuWpnF+xcDNnHTqlVwIfUBWcAwdapddThjzyQ61/C/kAPk\nMDnoXrc7W5/bSs3iNRm9YTTzus8LmMd1V3j61qevS2+bEv/6F/z1FzRpYle8Vq8O9etD//52MHD5\nciYYm0HOnIHRo+HpZ+IZv2k8XWt39bdJV3BJyI0xe40x640xa4wxy53Hihpj5hpjthtj5hhjQnxr\nqmssXJjcP+7Y56BlWEu/2ZPV6FStE9O22Rzl+fPbzJJLlvjZKBeIjITb2x7m9MXTNCrTyN/mJCN/\nnvy8Hf42S55cQt1Sdf1tjltEVIng4LmDrI9an27dSpVsPvfJk21m0i+/tOkQ3njDpjS4+2472btl\nS2BOjo4YYQcDu+L+JLRAKDWK1/C3SVdwdUQuQLiI1BeR25zHBgBzRaQaMN9Z9jtJJzovx13m74N/\nq3/ci3Ssbv3k4vxPC4a8K2fO2EnEc2XHc2/1ezN1kjOrkytHLp6q/1S6k57Xkju33bnrf/+zI/W9\ne6FnT9i40eZsqVDBRrtMmACnTvnEdLeIi4MvvrAbuY/dOJZutQLrqcmdHn2tM6gTMMr5fhTg9+fV\nw4ftlluJ/vEVh1dQo3gNQvIGxMNClqBuaF1i4mPYemIrEBx+8hkz7OT3bwcmBIxbJSvxVP2n+HXj\nr0THRnvcRtGi8OCDdqedfftgzhy45RYYORLCwqx//T//saGZsbFeM91lpk6FMmWg/q2xTNoyKaDc\nKuDeiHyeMWalMaa381ioiCROWUQBoV63zk0cDusfz+G8K8deh4YdehljDPdUu+dK9ErjxrB1K5w+\n7WfD0iAyElp3OMPm45tpVbGVv83JcpQrXI4m5ZqkO+npKsZAjRp29DtzpnXDvP++XbPwwgtQsiTM\nmuWVS7nMp5/arI7z98ynStEqhIWEZa4B6eDqtHhTETlijCkBzDXGbE36oYiIMSZFr1bPnj0JCwsD\nICQkhHr16hHu9H04HA4Ar5XHjHFQsSKALU/+bTIP1Hzgii3evl52LXeq3on/++P/uC3WetmaNAln\n0SIICQkM+5KWL16E+fPDadFvGvX/rM/SP5cGlH1ZpdynQR/6f9+fsDNhPmm/dWvIkcNBRATkyRNO\nly4wdKiDMmV8f38FC4azbx8ULepg8NhP6HZnN69fz+FwMHLkSIAreukW7iwDdfpF3wZeAbYCpZzH\nSgNbU6jr9aWraVGlisi6dfb9pdhLUmBQAY+SHilpczH2ohR6v9CVdK0ffijy/PN+NioVJk4UadtW\npMPoDjJ2w1h/m5NliY2PlbJDy8q6o+sy5XrDhtnMkJmxT2j37jav0MXYixLyQUiyNAu+Am8v0TfG\n5DPGFHS+zw/cBWwApgE9nNV6AFPc/xrxHgcP2sf72rVtecXhFVQvVl394z4gb668tKnYhlk77PNt\nIE94RkZCh06X+HPfn7Sv2t7f5mRZEic9h68aninXe/ZZG77Yp49vI1yOHLFzLL16wW87fqN+qfrc\nVPAm313QQ1zxkYcCfxpj1gJ/AzNEZA7wAdDWGLMdaO0s+w2HA1q2TO4fb1lBww59Rafqna74yevX\ntx3+6FFHCkwgAAAgAElEQVQ/G3UNly9bX2q+2nNpWr4phW4o5G+TsjRP1n+SMRvHZGjS01WMgW++\ngc2bbTSJr/j6a3j4YZuSYmwALcm/lnSFXET2iEg956u2iLzvPH5KRO4UkWoicpeInPG9uamj+VUy\nlw5VOzB311wux10mZ077JRpo0SsLFkCtWrDo1NiAWM2Z1SlfuDx3lL3Da5Oe6XHjjXZx0Xvv2WgW\nb3Ppkt0K8IUX4J+Yf5i9czb33Xyf9y/kBbJMQK3DcTW/Skx8DH8d/IvmFZr71aasTMn8JalZoiaL\n9i0CAjMMMTISOnWO47cdv9Gpeid/m5MtePrWp92OKc8IlSrZEMWuXe1ToTcZM8ZmcKxeHaZvm07T\nck0DNvdNlhDyAwfg7FmoWdOWVxxaQbVi1dQ/7mM6VuvI9G3WvRJoCbTi423sb6mGy6hevDqlC5b2\nt0nZgvZV27P/7H42RG3IvGu2t5tTP/SQ92LMRRKzHNpyILtVIIsIeaJbJal/XPOr+J5O1Tsxbfs0\nRISbb4aLFwMnw93ixVCuHPx9Qd0qmYmnKz0zyptvQkgIvPqqd9pbuNCu5mzbFk5fPI1jr4N7q9/r\nncZ9QJYQ8pTyq6h/3PfULFGTnCYnG45twJjAGpVHRkKXLglM3TZVV3NmMk81eCrTJj0TyZEDfv7Z\nLiAaMybj7SUuADIGpmydQpuKbQI6g2qWEHL1j/sHY8x17pVACEMUsUJerdkmv+Yez64kTnpO2DQh\nU68bEmL/7i++aFMWe8qOHTY3z2OP2XKgu1UgCwj5vn3wzz9w8822vPLwSqoWrar+8UwiMYkWXJ3w\n9HfmupUroUABWBevbhV/0efWPi6lt/U2derY0fR999lkaZ7wxRfQuzfkywfHLhzj74N/c3fVu71r\nqJcJeiFP9I8n5nfX/CqZS4sKLdh2chtH/zlKWJjt/Fu2+NemSZPsP/KUbVPUreInOlTtwL4z+9h4\nbGOmX/vRR+0EaPfukJDg3rlnz9qNL/r2teVJmyfRoWoH8ufJ731DvUiWEPJWSfIgqZBnLnly5uGu\nyncxc/tMwI7K/eleEbFCfmvrfQGZezy74K9Jz0Q+/tiu9H7vPffO++EHiIiAsmVtORjcKpAFhDzp\nRGdMfAzLDi6jeXn1j2cmSffy9PeE56ZNNkvezhs097i/earBU4zeMDpTJz0TyZMHxo+3qz9nz3bt\nnPh4u5XbSy/Z8sFzB9l4bCPtKrfznaFeIqh7+d69dvVVDedGHYn+8SI3FvGrXdmN9lXas2DPAi7G\nXqRVK7vdXny8f2yJjLRulanb1a3ib8oXLs/tZW/P9EnPRG66CcaOhR49XAuLnTYNSpeG25xb54zf\nNJ7O1TtzQ64bfGuoFwhqIU8cjat/3L8Uy1eM+qXrs2DPAkqVsv9Aa9b4x5bISGgZcVJzjwcIru7p\n6SuaN7dbyd13n13nkBaJIYeJjN0YHG4VCHIhv9Y/vmjfIk2U5Seuda/4w0++a5ddph1VZDIRVSLI\nkzNP5huhJKND1Q7sPbPXL5Oeibzwgo1qe/bZ1COqVq+G3buhSxdb3nVqF/vO7guawUDQCrlI8kRZ\nsfGxLDuwTOPH/UTHah2ZsX0GIuK3vCuTJ0PnzjBt52QNOwwQMju9bUoYY7eQW7XK+sxT4rPPoF8/\nu5cowLhN43jg5gfIlcPVvXf8S9AK+Z49dlKrWjVbXnl4JZWLVqbojUX9a1g2pXrx6uTLnY81R9fQ\nsqVdUBETk7k2REZCRMdozT0eYPRq0IvRG0ZzMTYd34YPyZ/f9o+337abPSfl6FHrH+/d++qxYHKr\nQBALeaJbJZl/XPOr+JVO1Tsxbds0QkLsBPS1/zC+5PBhu3fopbKzNPd4gFG+cHkal22caeltU6Nq\nVRgxwm7yHBV19fjXX0O3bnYDaIBNxzZx6uIpmpZv6h9DPSBohVzzqwQe/gxDnDIF7rkHZuxWt0og\n8sodr/Dy7y/z1NSn2HLcfyvGOnaEnj2tcMfF2ai3b76xfvRExm0aR9daXYMqdDV4LE1Con88caJT\n/eOBQdPyTdl7Zi+Hzh3K9AnPyEjo2DlWc48HKK0rtmbH8zsICwmj1ahWdPy1I4v2Lkrc2zdTeecd\nuOEGGDAAfv0VGjS4muJDRILOrQJBKuS7d9ult1Wq2PKqI6uoVKSS+sf9TK4cuYioEsGM7TNo1syG\nIF644PvrnjwJK1ZA3mp/aO7xAKZYvmK81fIt9ry4h3uq3kPv6b1p/H1jJmyaQHxC5i08yJkTRo+2\nK4D7908ecrjm6BriJZ6GNzXMNHu8QVAKucaPBy6dqtkc5fnywa23+mYLrmuZNs3mjZ69L1LdKkHA\njblv5OmGT7O131beaP4Gn/79KVW/qMqXy7/kQkwmfPMDxYpZIQ8Ph7vuunp87MaxdKvVDZMoLkGC\nS0JujMlpjFljjJnuLBc1xsw1xmw3xswxxmRqqkHNrxK4RFSJ4M99f3Ih5kKm5V2JjITOmns86Mhh\nctC5RmeWPLmEX+77hQV7FlDxs4r8Z+F/OHbhmM+v36CBXcafqNkJksC4TeOCzq0Cro/IXwQ2A4kO\nrQHAXBGpBsx3llPk8OEM2XcdIsknOmPjY1l6YCktKrTw7oUUjyictzCNyjRi3u55mTLhef68TQlQ\npsFazT0exDQp14TIrpEsfnIxxy4co8aXNXhmxjNsP7k902z46+BfFMhTgNola2faNb1FukJujCkL\ndAC+BxKfNzoBo5zvRwGpDoOaNbMr7rzFzp12N5DKlW1Z/eOBR2L0ym23wfbtcOqU7641a5btY/MO\nT1K3ShagWrFqfHPPN2ztt5WS+UvS7IdmdBnXhaUHlvr82mM3juXh2g8HnVsFXBuRfwK8BiTN7Bsq\nIomRmFFAaGon9+8PLVpkbMeOpGj+8cAncZVnrtwJNG3qW/dKYpIszT2etSiZvyT/a/U/9ry4hzsr\n3kn3yd1pMqIJk7dM9snEaHxCPBM2T6Brra5ebzszSHP9qTHmHuCYiKwxxoSnVEdExBiTagzRsmU9\nueOOMG6/HXr3DqFz53qEO/0iDocDwK3y2LHw6KNXy5FzI3mj+xset6dl35SL5SvGNxO/oVmzmvTr\nF06JEgDevd6cOQ5mzoSX/luO0zNPc2HHBRw7HQFx/1r2Xvm58Od4puEzvDvqXQaOGEj/Cv156faX\nqHimIjfmvtEr13PsdVDocCEObThE1fCqmX6/DoeDkSNHAhAWFobbiEiqL2AQcADYAxwBLgA/A1uB\nUs46pYGtqZwvicycKVK8uMicOeIxCQkipUuL7NplyzFxMVJwUEE5ceGE540qPqH/3P7y7/n/FhGR\nefNESpYUGTXKu9eYNk2kZUuRwYsHyzPTn/Fu40pAkpCQIIv2LpIuY7tIsQ+LyetzXpd9Z/ZluN1e\nU3vJR0s+8oKF3sGpnWnqc9JXmq4VEXlDRMqJSEWgG7BARLoD04Aezmo9gCnpfWF06GAfgx991P70\nhO3bIVcuqFjRllcfWU3FIhUplq+YZw0qPqNT9U7J9vJ0OOxCjLfecn/7rdRQt0r2wxhDiwotiOwa\nyfLey4lNiKX+t/XpOrEryw4s82iBUUx8DJFbI3mo1kM+sDhzcDeOPPG39AHQ1hizHWjtLKdL8+bw\n++/w3HN2SyV30fwqwUPjMo05cv4I+87sA+zKub/+sv7yRx6xS6MzQmwsTJ8OTe86prnHsymVilRi\naLuh7HlxD03LNeWxyY9x+4jb+XXDr8TGx7rcztxdc7m5+M2UL1zeh9b6FpeFXEQWiUgn5/tTInKn\niFQTkbtExOX9quvXt+Fi//sfDB3qnrGaXyV4yJkjJx2qdrgyKgcoWfLqxGfr1nD8uOft//GHjVxa\nfWGq5h7P5hS6oRAvNH6B7f228+/m/2b46uFU/Kwi7//5PiejT6Z7frDsy5kWflnZWa0a/PknfPed\nfdR25Wno2vwqcQlxGj8e4CRNopXIjTfCmDH273j77TZjoSdMmpTEraJhhwp28NCpeicW9FjAzEdm\nsuPUDqp8UYWnpz/N5uObUzznYuxFpm+bzgM1H8hka72L35bolytnxXzWLHj++fT9ptu2Qd68kDih\nu/rIasJCwtQ/HsDcVfkulh1YxrnL55Idz5HD7m7+5pvQsqX7i4YSEuwmEm3v/kdzjyspUrdUXX64\n9we2PreVMoXK0OanNrT7pR2/7fiNBLkqNrN2zKLhTQ0pVaCUH63NOH7NtVKihP0n3rABHn/c+j1T\nY+HC65fl67ZugU3BGwrSpFwTpmxNeS78iSfs5rgPPww//uh6u3/9BcWLwy7zm+YeV9IktEAo/2n5\nH/a+uJdHb3mUNxa8Qc1hNfl6xddciLmQJdwqEABJswoXhtmz4cyZtDdITbqtG+hCoGBhYLOBvDrn\nVT7/+/MUIwpatbJzJv/3f3aTXFciWpJFq6hbRXGBG3LdwON1H2d1n9V8e8+3zNk9hwqfVmD2ztnc\nd/N9/jYvwxhPwnVcbtwYcbX92Fjo0cPmZpk2DQolGWSJQKlSsHw5VKhg/ePFBhdj1wu7KJ6vuI+s\nV7zFrlO7eGDCA1QrVo3vO35PwRsKXlfn+HG732bZsjBypPWlp4SIneQcPzGWu+aGsqnvJk1bq3jE\n7tO72XRsEx2rd/S3KddhjEFEXM4V4PcReSK5c8Mvv0DNmtdHNGzZYvfcq1DBllcfWU2FwhVUxIOE\nykUrs/TJpRS+oTCNhjdi07FN19UpUcJGtOTIYf/+x1JJfrdunQ0/PVXIobnHlQxRqUilgBRxTwgY\nIQf7TzxsGLRrZ/OzHDhgj6tbJfi5MfeNfNfxOwY2G0j4qHBGrx99XZ28eW3C/zvvtBEtW1LYESzR\nrTJV3SqKcoWAEnKwo6333oOnnrILiHbsuH6ic9G+RSrkQUqPej2Y//h83ln0Dn1n9uVy3OVkn+fI\nAe++a3c7b9ny+oRbmntcUa4n4IQ8kVdftTHmLVvCvHlXR+RxCXEs3r9Y48eDmDqhdVjZeyVRF6Jo\n/mPzK6s/k9Kjh036/8gjdudzsCGop05BrnKrNPe4oiQhzeyH/uapp2xUy/DhNu4cYM2RNZQvXF79\n40FO4byFmfjgRD756xNu+/42frz3RzpU7ZCsTni4XcF59902D33BgtClC0zbrm4VRUlKwEStuMpH\nSz5i/9n9fNHhC6+2q/iPxfsX021iN56o9wTvhL9Dzhw5k31+4oSNaPn7bxuq+sK2WvzQ6Qcal23s\nJ4sVxbcEbdSKq2h+laxHs/LNWNVnFUsOLCFidATHLyRPwlK8uHWvff45lK69ndMXT9OoTCM/Waso\ngUdQCbn6x7MuoQVCmdN9Do1uasSt39163dZeefPCs8/CzJ1Tubf6veQwQdV1FcWnBNV/w9qjaylf\nuDwl8pfwtymKD8iVIxeD2gziq7u/osu4Lnz616fXrQbVaBVFuZ6gEnLNP549uKfaPfz11F/8vP5n\nuk7seiXpVtQ/UWw6vklzjyvKNQSdkLcM00RZ2YGKRSqy5MklFMlbhEbDG7Hx2Eamb5+uuccVJQWC\nJmolLiGO4oOLs/357ZTMX9IrbSrBwU/rfuKVOa9QJG8R3m31Ll1rB+dO54riKlk2amXt0bWULVRW\nRTwb8njdx1nw+AJuLnGz5h5XlBQImhH5x0s/Zu+ZvXzZ4UuvtKcoihKoeHVEbozJa4z52xiz1hiz\n2RjzvvN4UWPMXGPMdmPMHGNMSEYNTw/Nr6IoipIyaQq5iFwCWolIPaAO0MoY0wwYAMwVkWrAfGfZ\nZ8QnxPPnvj81flxRFCUF0vWRi0i0820eICdwGugEjHIeHwX4NLBX/eOKoiipk66QG2NyGGPWAlHA\nQhHZBISKSJSzShQQ6kMbdX9ORVGUNEg3+6GIJAD1jDGFgd+NMa2u+VyMManOaPbs2ZOwsDAAQkJC\nqFevHuHOnLQOhwMg3bLjiIPH6zzucn0ta1nLWg6mssPhYOTIkQBX9NId3IpaMca8BVwEegHhInLU\nGFMaO1KvkUL9DEetxMTHEPpxKNv6bVPXiqIo2QJvR60UT4xIMcbcCLQF1gDTgB7Oaj2AKZ6ZmzIH\nzx3k+9Xf88D4Bwj9OJTwsHAVcUVRlFRIc0RujLkFO5mZw/n6WUQ+MsYUBcYD5YG9wEMiciaF810a\nkV+Ou8zi/YuZvXM2s3fN5vD5w9xV+S4iKkdwV+W7dINdRVGyFe6OyP22IGj36d3M3jmb33b+xqK9\ni6hVshYRlSOIqBJBw5saXre5gKIoSnYhYIU8OjYax16HHXXvnM25y+eIqGKFu22lthTLV8xndiiK\nogQTASfkQ5cOZfau2Sw9sJQGpRsQUTmC9lXbUye0jm4OoCiKkgLuCrnPN1/eemIrz9z6DOMfGE/h\nvIV9fTlFUZRsR9AkzVIURckuZNk0toqiKErKqJAriqIEOSrkiqIoQY4KuaIoSpCjQq4oihLkqJAr\niqIEOSrkiqIoQY4KuaIoSpCjQq4oihLkqJAriqIEOSrkiqIoQY4KuaIoSpCjQq4oihLkqJAriqIE\nOSrkiqIoQU66Qm6MKWeMWWiM2WSM2WiMecF5vKgxZq4xZrsxZo4xJsT35iqKoijXku7GEsaYUkAp\nEVlrjCkArAI6A08AJ0RksDGmP1BERAZcc65uLKEoiuImXt9YQkSOisha5/t/gC1AGaATMMpZbRRW\n3BVFUZRMxi0fuTEmDKgP/A2EikiU86MoINSrlimKoigu4fLmy063yiTgRRE5b8zVUb+IiDEmRR9K\nz549CQsLAyAkJIR69eoRHh4OgMPhANCylrWs5WxddjgcjBw5EuCKXrqDS5svG2NyAzOA30TkU+ex\nrUC4iBw1xpQGFopIjWvOUx+5oiiKm3jdR27s0HsEsDlRxJ1MA3o43/cAprhjqKIoiuIdXIlaaQb8\nAawHEisPBJYD44HywF7gIRE5c825OiJXFEVxE3dH5C65VjJgjAq5oiiKm3jdtaIoiqIENirkiqIo\nQY4KuaIoSpCjQq4oihLkqJAriqIEOSrkiqIoQY4KuaIoSpCjQq4oihLkqJAriqIEOSrkiqIoQY4K\nuaIoSpCjQq4oihLk+F7I4+N9fglFUZTsjO+FfMCA9OsoiqIoHuN7IZ88GUaNSr+eoiiK4hEu79np\nMdOmQXg4VKsGd9zh88spiqJkN3w/Iq9ZE378ER54AA4c8PnlFEVRshuZE7Vy993w4ovQuTNER2fK\nJRVFUbILrmy+/IMxJsoYsyHJsaLGmLnGmO3GmDnGmJB0r/Taa1CrFjz5JOj2b4qiKF7DlRH5j0DE\nNccGAHNFpBow31lOG2Pgu+9g71547z137VQURVFSIV0hF5E/gdPXHO4EJIaijAI6u3S1vHltFMt3\n39mfiqIo7hIT428LAg5Po1ZCRSTK+T4KCHX5zNKlITIS2reHypWhTh0PTVAUJUuTkAB79sD69bBu\nnf25fr099sQT8NVXkCePv60MCDI82SkiArjn9G7YED7/HO69F44fz6gJiqIEO+fOwZIl8PXX8Mwz\n0KQJhIRA69bwww8QFwfdusGMGXDqFJw8CW3bwokT/rY8IPB0RB5ljCklIkeNMaWBY6lV7NmzJ2Fh\nYQCEhIRQr149wsPD4eGHccycCW3aEL5yJeTJg8PhALCfg5a1rOWsVk5IILx8eVi3Dse0abBrF+GH\nD8OxYzjKlYNKlQhv3x4eeQTH2bNQsGDy848eJbxGDZg0Ccdjj0GdOoTPmwc1awbG/XlYdjgcjBw5\nEuCKXrqDERciSIwxYcB0EbnFWR4MnBSRD40xA4AQEbluwtMYI2m2n5AA990HJUvCt9/aCVFFUbIe\nc+fCf/4DGzZA8eJQt651qyb+rFwZcuZ0v92ffoJXX4Wff4Z27bxvt58wxiAiLgtiukJujPkVaAkU\nx/rD/wNMBcYD5YG9wEMiciaFc9MWcoDz5+1jVJ8+8PzzrtqtKEqwsGCBdYsMH25XeRcu7N32Fy+G\nBx+EN96Afv2yxIDQ60KeQWPSF3Kwkxd33AG//AJ33ukzexRFyWSWLIEuXWDCBGjZ0nfX2bMHOnaE\nFi3gs88gd27fXSsTcFfIAyMfecWKMG4cPPoo7Njhb2sURfEGK1ZYEf/lF9+KOFgNWboU9u2zEXGn\nr42YztoEhpCD/UP/73/QqROcPetvaxRFyQhr19oR8g8/wF13Zc41CxWySfrq1IHbb89Wg8LAcK0k\npV8/2L0bpk/3bPJDURT/smmTdZF++SXcf79/bBg+HN58E3791YYwBhnB6VpJyiefwOXLuiGFogQj\nO3bY6JEhQ/wn4gC9e1t37SOP2Ii4LE7gjcjBBvs3bgxvvQU9enjfMEVRvM+ePdZF+s47NjleILBz\nJ9xzD0REwMcfQy7fb8HgDYJ/RA5QrJj1db32Gixb5m9rshebNsHLL9vZ/6lTNVOl4hoHDkCbNvZJ\nOlBEHKBKFfjrL9i8OUvPvwWmkEPyDSkOHvS3NVmbf/6xk1JNmtiJqfz54bnn7BNR8+Y2hExRUuPI\nESvi/fpB377+tuZ6QkJg1iyoVMn28d27/W2R1wlM10pSBg+2caFVqkC+fHDjjVdfnpSLFbMLErLA\nooEMIQIrV9pJoQkT7Ai8Vy8bupX4+BkfD6NHW0GvXx8GDbJfsIqSyPHjdpHPI4/Av//tb2vSZ9gw\nePdd2+ebN/e3NakSnAuC0kLEZj47cwYuXrz6io72rHz8uG2zXLnkr/Llk5fz5fPOLyHQOHXKivP3\n39uReK9edh7ipptSP+fSJfsP8OGH9vH0v/+FMmUyz2YlMDl1yo7E774b/u///G2N68yZA9272/7c\ns6e/rUmRrCfkvuDsWevTO3AA9u+/+j7xdfCgFfLURL5cOStkeYIkhaYILFpkR98zZ0KHDlbAw8Mh\nhxvetTNn4IMPbDt9+kD//vaxVcl+nD1rsw82b24nEYPtCXfrVjsJeu+9dqObvHn9bVEyVMi9gYgd\nuV8r8ElFPyoKKlSw29fVrn31Z7VqgSPwR47AqFEwYoTtqL1729WzxYplrN2DB21kwrRpdnKrb9+A\n+0dQfMg//9gokLp1bax4sIl4IidP2gHJ+vU2t3nbtv626Aoq5JlFTIyNmd20yb42brQ/9+2zy4WT\ninutWtbHnxmhT3Fx8PvvdtS8aJGdLO7VC267zfv/cJs22URFa9dav+Ojj+oirqzOxYvWlVKpkt3p\ny50nukBlxgybsO+OO2DoUChVyt8WqZD7nUuXYNu26wX+8GGoWvX6EXzFitf/M8TGWp++u6+zZ+0o\nuWxZO/p+6CEoWND397x4Mbz+Oly4YF0vERHBO0pTUufyZejcGYoWteljs9KX9oULdjAyYoRNFdKn\nj1/vT4U8UImOhi1bkov7pk3WhRMaenVCNjraunby57d+endfrVvDLbdk/v2J2LjzgQPtiGbwYGjU\nKPPtUHxDbKxNFZsrF4wdGzQLa9xm40a7Q1FsLHzzjY3WykwuXIDp0zEPP6xCHlScPw/HjiUX42BO\nwRkXZ+P/33kHmja1E0lVq/rbKiUjxMVZt1l0NEyaFDhzQL4iIcH24YED4bHHbJSWr59s16yx7tCx\nY6FJE8zMmSrkSgAQHW3j/4cMgRo17FNHaKjdDSrxZ9L3GtsfmCQk2BC9o0et2y47TWofP25Xl8+f\nb/cY7tzZu330/Hmb1Gv4cBs80auXXRVbtqy6VpQA4/Rpu73XsWO2sx47lvx94s9Ll64X96TvE3+W\nKGG3CrvhBn/fWdYkPt6KdmKU1pQpdn5n1qysu7YiPRwOePZZG7Dw5Zc2Ws1TRGye9uHDYeJEGwLc\np49dUZ3EJ69CrgQniYu1UhL5xPdRUXbX9BMn7MiwRImrr+LFk5evPVaggPujqbi46xeXJb5PeqxY\nMQgLs+sNAvkLRsQu4rk2lDbp+8OH7f0krpeoUsWmg82MSfNAJiYGPvrIZmd9/XWbj8gdF+iZM3Yh\n3vDhcO6cDUbo2RNKl06xugq5kvURsRE6x4/b14kTV9+ndiw+Prm458+fujAnvo+PT57mIfF90p83\n3GCvtW+fja8vVsyO2CpUsOJ+7fv8+b3/+4iJsU8+p09boT59OvmoOulaiDx5Ul7olvi+TJnA/jLy\nN7t22TxEhw7ZydCmTVOvK2J3LRo+3D7ZtGtnBbx163TDNjNVyI0xEcCnQE7gexH58JrPVciVwCA6\nOrm4R0dfL8zXinTu3O6N4uPj7SKsfftg797kPxNfBQqkLvQlS9rRWlJBTul17WcxMVCkSPJXaOhV\ncU4q2Nl9ZO0NRGyulpdftqukP/gg+SK7kyfh55+tgMfGWtfJ44/bv6+LZJqQG2NyAtuAO4FDwArg\nYRHZkqSOCrmiJCJi3URJxT2p4B8/brcrK1LExmpfK86pHffEbaRknLNnrdtpwgSbtyUszC6SmjnT\nLprq08cmo/Pgb5OZQn4H8LaIRDjLAwBE5IMkdVTIFUXJ2qxcadNUREfbyJPu3TOcBiMzN5YoAxxI\nUj7oPOZ1HA5Hlm5Lbcr8ttSmzG8ry9rUsCEsX47jyy/hpZcynsvIAzIi5Jk21A7EDuDNttSmzG9L\nbcr8ttQm35ER18rtwDtJXCsDgYSkE57GGPWrKIqieEBm+chzYSc72wCHgeVcM9mpKIqi+B6PM9+I\nSJwxph/wOzb8cISKuKIoSubj0wVBiqIoiu/xWlZ4Y0yEMWarMWaHMaa/89iDxphNxph4Y0yDDLb1\nkTFmizFmnTEm0hhT2MN23nW2sdYYM98YU85Tm5J89ooxJsEYUzQD9/eOMeagMWaN8xXhqU3GmOed\nv6uNxpgP02ojHZvGJbFnjzFmjYft3GaMWe5sZ4UxxqX8tqm0VdcYs8wYs94YM80Yk+4KF2PMD8aY\nKGPMhiTHihpj5hpjthtj5hhj0t2zLpV2PO3jKbXldh9Poy23+3lK7ST5zN0+npJNnvTxFG3ysI+n\nZIn3E/IAAAnaSURBVNNYd/t4Gm253c9TacftPo6IZPiFda3sBMKA3MBa4GagBlANWAg0yGBbbYEc\nzjofAB942E7BJHWex65I9cgm52flgNnAHqBoBu7vbeBfXvidtwLmArmd9Upk5P6S1PkYeNNDmxxA\nO2ed9sDCDNzfCqC5s84TwP9caKs5UB/YkOTYYOB15/v+6fWnNNpxu4+n0ZZbfTydtjzp59e140kf\nT8Mmt/p4Gu243cfTuj93+ng6dnnSz1Nqx+0+7q0R+W3AThHZKyKxwFjgXhHZKiLbvdTWXBFJcNb5\nGyjrYTvnk9QpAJzw1CbnZ0OB1126s/TbcmcJWGrtPAO87zyGiBzPoE0YYwzwEPCrh+0cBhJHlyHY\nlcCe2NQZqCoifzrrzAPuT68hZ/3T1xzuBIxyvh/lbNvtdjzs46m15W4fT6stt/t5Kr8ncL+Pp9WW\nW8scU2nnWdzv42nZ5E4fT6utI7jZz1Npx+0+7i0h9+biIFfaehKY5Wk7xpj3jDH7gR7YkY9HNhlj\n7gUOish6F9pI1y7geefj8AgXHvVTa6ca0MIY85cxxmGMaZhBm8COGqJEZJeH7QwAhjp/5x8BAz20\n6SZgo/P3DvAgdrToCaEiEuV8HwWEetiOr3Clj6eJB/08pTY86eNp4U4fT42quN/H08PVPp4WA4Ah\nbvbzlNjkbh/3lpB7c8Y0zbaMMf8GYkRkjKftiMi/RaQ8MBL4xEOb8mH/UG8nNc/DtgC+AioC9bDf\n7EM8bCcXUEREbgdeA8ZnwKZEHgbS+32n1c4I4Hnn7/xl4IcMtPUU0NcYsxI70oxxoa20L2SfYQNm\n1t+NPp4mHvTza+3IB7yB+308Nb7GvT6eGp708fRwtY+nxQjgBTf7eUo8iZt93FtCfojk3xrlsCMo\nr7ZljOkJdAAe9ZJNYwBXJt5SamsPtlOuM8bswT4GrzLGpJfiLEW7ROS4OAG+x7oW3G3nEPYeIwFE\nZAWQYIxJb81wWr/zXEAXYFw6baRlU2MRmew8NpH07y1Vm0Rkm4i0E5GGWHeLpyOoKGNMKQBjTGng\nmIfteBU3+7iruNrPr6Uydo7C3T6eIiJyzM0+nhqe9PFUcbOPp8VtHvTz6/Ckj3tLyFcCVY0xYcaY\nPEBXYNo1dVz9Jk+xLecM92tYP/elDLSTdAPJewFXZqlTamuSiISKSEURqYjtXA1EJD1BSM2upBnm\nuwDXRQ640M5UYArQGsAYUw3IIyInPbHJ+dmdwBYROZxOG2m1s9MY09JZpzXgik85td9TCee95QDe\nxI7yPGEa1uWA8+cUD9tJSoZSEHrQx9Nqy5N+ngwR2eBhH0/NJnf7eGp40sfTwp0+nhae9PPr8KiP\npzcb6uoLO0u7DRtpMNB5rAvWz3kROAr8loG2dgD7sB1yDfCVh+1MxHagtcAkoKSnNl3z+W5cn9FP\nya6fgPXAOmxHDfWwndzAz857XAWEZ+T+gB+BPhnsBw2xk3drgWVA/Qy09aLz2DZgkIvt/IqdcI1x\n9scngKLYiaTtwBwgxIN2nsROknrSx1Nqy+0+nkZbbvfzJO1cTvw9ZaCPp2STJ338Opsy0MdTvD93\n+3gafcrtfp7K7+kFd/u4LghSFEUJcry2IEhRFEXxDyrkiqIoQY4KuaIoSpDjFSE3xvzjjXYURVEU\n9wnEBUGKoiiKG3gz+2F+Y8w8Y8wqZ9auTs7jYc4sZd85M5X9bozJ663rKoqiZHe8En5ojDmPTRaT\nX0TOG2OKA8tEpKoxJgwbH3uriKw3xowDponI6AxfWFEURfF8h6AUyAG8b4xpDiQANyVZyrtHribd\nWYVd9qsoiqJ4AW8K+aNAcewS3nhnboZEF8rlJPXigRu9eF1FUZRsjTfDDwsDx5wi3gqo4MW2FUVR\nlFTI8IjcmTnsMjAamG6MWY9NeJR0I+ZrHfEa5aIoiuIlMjzZaYypC3wrNjewoiiKkslkyLVijHkG\nm+v4Te+YoyiKoriLZj9UFEUJcjTXiqIoSpDjlpAbY8oZYxYaYzY5V2m+4Dxe1Bgz1xiz3RgzJ3FT\nVefxhcaY88aYL65p6z1jzH7nYiJFURTFQ9xyrTj3OCwlImuNMQWwi3s6Y3fHOCEig40x/bEbow5w\nbt5aH6gN1BaR55O0dRuwH9ghIgW9d0uKoijZC7dG5CJyVETWOt//gw0xLAN0AkY5q43CijsiEi0i\nS0i+ICixreUicjQDtiuKoihkwEfuzKFSH7tHXaiIRDk/igJCr6muM6qKoig+wiMhd7pVJgEvikgy\nH7dYX40Kt6IoSibhtpAbY3JjRfxnEZniPBzl9J9jjCkNHPOeiYqiKEpauBu1YoARwGYR+TTJR9OA\nHs73PYAp157qsYWKoihKmrgbtdIM+ANYz1X3yUBgOTAeKA/sBR4SkTPOc/YCBYE8wBmgrYhsNcYM\nBh4GSgNHgOEi8r+M35KiKEr2Qld2KoqiBDm6slNRFCXIUSFXFEUJclTIFUVRghwVckVRlCBHhVxR\nFCXIUSFXFEUJclTIlaDCGPOOMeaVND6/1xhzswvtJKtnjPmvMaaNt+xUlMxEhVwJNtJb+NAFqOlC\nO8nqicjbIjI/I4Ypir9QIVcCHmPMv40x24wxfwLVncd6GWOWG2PWGmMmGmNuNMY0AToCHxlj1hhj\nKhpjKv9/e3fvGkUURnH4d0RB2WgqKytDwEolCkqKgCCkVEHBQkEwRf6ClIKgaGclgiKYShQhYAQ/\nEJso2MTEGMuA2lmKEogWORZ3YjZhs+JX3IHzNAsz71zuDOyZ4RbvlfRI0qSkCUm7VtVNSeqRNCrp\neDX2e0mXqjEmJe2rNkyZkzTcNK+Rag4zks6v/5OJKDb+7wlEtCNpP3AS2AtsAqaASWDM9s2q5gIw\nZPuqpHHgge2x6twzYNj2nKSDwDXbh1vUNXftNPDBdp+kK8Ao0A9sAd4C1yUNAr22D0jaANyXNGD7\n+b9/KhErJcij0w1QQnsBWKgCWMBuSReBbqALeNx0jeBHu+V+4F7p9waUnj8r6tYwXv3OAg3b88C8\npK+SuoFBYFDSdFXXAHqBBHmsuwR5dDrTOnBvAUdtz0o6AxxadQ2UpcNPtvvajL2WpV2tFoFvTccX\nWf7fXLZ9o80YEesia+TR6SaAY5I2S9pKWduG0lHzY9Uf/zTLofwF2AZg+zPwTtIJKG2YJe1ZXfcT\nrV4iBp4AZyU1qrF3SNr+y3cX8RckyKOj2Z4G7gIzwENKy2QD5yjbDL6g7B275A4wIumVpJ3AKWBI\n0mvK+vaRFnU97abAyi93V/N6CtwGXkp6Q2nj3PUn9xrxu9LGNiKi5vJFHhFRcwnyiIiaS5BHRNRc\ngjwiouYS5BERNZcgj4iouQR5RETNfQfBN8KNQR3c7wAAAABJRU5ErkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10ce04550>"
       ]
      }
     ],
     "prompt_number": 204
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Lets make a secondary y axis for the casual count "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "m1D['casual'].plot(style='r-',secondary_y=True)\n",
      "m1D['registered'].plot(style='g-')\n",
      "m1D['count'].plot(style='b-')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 205,
       "text": [
        "<matplotlib.axes._subplots.AxesSubplot at 0x10cf8af50>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\ni71zztWB/wci53lMYGSiHgAAAABJRU5ErkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10cf95f50>"
       ]
      }
     ],
     "prompt_number": 205
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Clearly there is big similarity between the registered and the total count but there is a kink in the casual count during the first day of the month and during the 16th of the month "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Lets see if the same pattern is seen for other months too "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(m1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 206,
       "text": [
        "431"
       ]
      }
     ],
     "prompt_number": 206
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train.index[431]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 207,
       "text": [
        "Timestamp('2011-02-01 00:00:00')"
       ]
      }
     ],
     "prompt_number": 207
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "m2=train['2011-02-01 00:00:00':'2011-02-19 23:00:00']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 208
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "m2D=m2.resample('D')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 209
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "m2D['casual'].plot(style='r-',secondary_y=True)\n",
      "m2D['registered'].plot(style='g-')\n",
      "m2D['count'].plot(style='b-')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 210,
       "text": [
        "<matplotlib.axes._subplots.AxesSubplot at 0x10cecfb50>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nmbWw/wctnBYKekO3zgAAAABJRU5ErkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10cf9e110>"
       ]
      }
     ],
     "prompt_number": 210
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Here again there is a constant relationship between the registered and the count data except that there are some kinks in the casual count dude to which the count increases more than the registered amount "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "These kinks in the casual count maybe due to the holiday or a non working day "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train.head(1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>season</th>\n",
        "      <th>holiday</th>\n",
        "      <th>workingday</th>\n",
        "      <th>weather</th>\n",
        "      <th>temp</th>\n",
        "      <th>atemp</th>\n",
        "      <th>humidity</th>\n",
        "      <th>windspeed</th>\n",
        "      <th>casual</th>\n",
        "      <th>registered</th>\n",
        "      <th>count</th>\n",
        "      <th>season1</th>\n",
        "      <th>season2</th>\n",
        "      <th>season3</th>\n",
        "      <th>weather1</th>\n",
        "      <th>weather2</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>datetime</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2011-01-01</th>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 9.84</td>\n",
        "      <td> 14.395</td>\n",
        "      <td> 81</td>\n",
        "      <td> 0</td>\n",
        "      <td> 3</td>\n",
        "      <td> 13</td>\n",
        "      <td> 16</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 0</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 211,
       "text": [
        "            season  holiday  workingday  weather  temp   atemp  humidity  \\\n",
        "datetime                                                                   \n",
        "2011-01-01       1        0           0        1  9.84  14.395        81   \n",
        "\n",
        "            windspeed  casual  registered  count  season1  season2  season3  \\\n",
        "datetime                                                                      \n",
        "2011-01-01          0       3          13     16        1        0        0   \n",
        "\n",
        "            weather1  weather2  \n",
        "datetime                        \n",
        "2011-01-01         1         0  "
       ]
      }
     ],
     "prompt_number": 211
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from scipy.stats.stats import pearsonr"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 212
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Lets try to find the pearson correlation coefficient between the casual count and the other variables "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "pearsonr(train['casual'],train['holiday'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 213,
       "text": [
        "(0.043798928675346405, 4.8430600241378191e-06)"
       ]
      }
     ],
     "prompt_number": 213
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "The p value above is very low which is a good thing for our result .Clearly the correlation coefficient is too low which suggest there is not much sorrelation between the 2 variables "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Lets try to find this with another method "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "H1 = train[train['holiday']==1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 214
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "H0 = train[train['holiday']==0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 215
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "H1['casual'].mean()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 216,
       "text": [
        "48.781350482315112"
       ]
      }
     ],
     "prompt_number": 216
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "H0['casual'].mean()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 217,
       "text": [
        "35.646713947990541"
       ]
      }
     ],
     "prompt_number": 217
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Clearly there is a high average on the holidays "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now for working day : "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "W1 = train[train['workingday']==1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 218
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "W0 = train[train['workingday']==0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 219
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "W1['casual'].mean()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 220,
       "text": [
        "25.107663248785752"
       ]
      }
     ],
     "prompt_number": 220
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "W0['casual'].mean()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 221,
       "text": [
        "59.308290155440417"
       ]
      }
     ],
     "prompt_number": 221
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Here the differene is even bigger "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Clearly more casual count on a non working day "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "pearsonr(train['holiday'],train['workingday'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 222,
       "text": [
        "(-0.25049139118730052, 2.1465867615797313e-155)"
       ]
      }
     ],
     "prompt_number": 222
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "There is a negative correlation here which is obvious as there will be no working day on a holiday "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Lets see if there is a correlation between the registered count and the variables : "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "H1['registered'].mean()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 223,
       "text": [
        "137.09646302250803"
       ]
      }
     ],
     "prompt_number": 223
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "H0['registered'].mean()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 224,
       "text": [
        "156.09494089834516"
       ]
      }
     ],
     "prompt_number": 224
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is in contradiction to the general expected result "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "W1['registered'].mean()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 225,
       "text": [
        "167.9042093901781"
       ]
      }
     ],
     "prompt_number": 225
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "W0['registered'].mean()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 226,
       "text": [
        "129.19833045480715"
       ]
      }
     ],
     "prompt_number": 226
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Again this is in contradiction . This can happen only if the people use that bike to commute to their workplace "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Lets perform segmentation - Make 4 segments - On the basis of holiday variable and the workingday variable :"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "H1= train[train['holiday']==1]\n",
      "H1.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 250,
       "text": [
        "(311, 16)"
       ]
      }
     ],
     "prompt_number": 250
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "H0=train[train['holiday']==0]\n",
      "H0.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 251,
       "text": [
        "(10575, 16)"
       ]
      }
     ],
     "prompt_number": 251
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "W1=train[train['workingday']==1]\n",
      "W1.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 252,
       "text": [
        "(7412, 16)"
       ]
      }
     ],
     "prompt_number": 252
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "W0=train[train['workingday']==0]\n",
      "W0.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 253,
       "text": [
        "(3474, 16)"
       ]
      }
     ],
     "prompt_number": 253
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "H1W1=H1[H1['workingday']==1]\n",
      "H1W1.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 254,
       "text": [
        "(0, 16)"
       ]
      }
     ],
     "prompt_number": 254
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "H1W0 = H1[H1['workingday']==0]\n",
      "H1W0.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 255,
       "text": [
        "(311, 16)"
       ]
      }
     ],
     "prompt_number": 255
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "H0W1 = H0[H0['workingday']==1]\n",
      "H0W1.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 256,
       "text": [
        "(7412, 16)"
       ]
      }
     ],
     "prompt_number": 256
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "H0W0 = H0[H0['workingday']==0]\n",
      "H0W0.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 257,
       "text": [
        "(3163, 16)"
       ]
      }
     ],
     "prompt_number": 257
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So now that we have made 4 segments we can make models for each segment and apply it accordingly to the test DF "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "H1W0M1=H1W0['2011-01']\n",
      "H1W0M1.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 263,
       "text": [
        "(24, 16)"
       ]
      }
     ],
     "prompt_number": 263
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ax1=H1W0M1['casual'].plot(style='r-',secondary_y=True)\n",
      "ax2=H1W0M1['registered'].plot(style='g-')\n",
      "ax2=H1W0M1['count'].plot(style='b-')\n",
      "ax1.set_ylabel('Casual_count')\n",
      "ax2.set_ylabel('Registered / Total count')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 266,
       "text": [
        "<matplotlib.text.Text at 0x10e69afd0>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10e674e90>"
       ]
      }
     ],
     "prompt_number": 266
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We clearly now notice the pattern is almost similar for all the 3 kinds of counts "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "H1W0M2=H1W0['2011-02']\n",
      "H1W0M2.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 267,
       "text": [
        "(0, 16)"
       ]
      }
     ],
     "prompt_number": 267
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "H1W0M3=H1W0['2011-03']\n",
      "H1W0M3.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 274,
       "text": [
        "(0, 16)"
       ]
      }
     ],
     "prompt_number": 274
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "H1W0M4=H1W0['2011-04']\n",
      "H1W0M4.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 275,
       "text": [
        "(24, 16)"
       ]
      }
     ],
     "prompt_number": 275
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ax1=H1W0M4['casual'].plot(style='r-',secondary_y=True)\n",
      "ax2=H1W0M4['registered'].plot(style='g-')\n",
      "ax2=H1W0M4['count'].plot(style='b-')\n",
      "ax1.set_ylabel('Casual_count')\n",
      "ax2.set_ylabel('Registered / Total count')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 276,
       "text": [
        "<matplotlib.text.Text at 0x10e592cd0>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10e2978d0>"
       ]
      }
     ],
     "prompt_number": 276
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "H1W0M5=H1W0['2011-05']\n",
      "H1W0M5.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 277,
       "text": [
        "(0, 16)"
       ]
      }
     ],
     "prompt_number": 277
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "H1W0M6=H1W0['2011-06']\n",
      "H1W0M6.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 278,
       "text": [
        "(0, 16)"
       ]
      }
     ],
     "prompt_number": 278
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "H1W0M7=H1W0['2011-07']\n",
      "H1W0M7.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 279,
       "text": [
        "(24, 16)"
       ]
      }
     ],
     "prompt_number": 279
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ax1=H1W0M7['casual'].plot(style='r-',secondary_y=True)\n",
      "ax2=H1W0M7['registered'].plot(style='g-')\n",
      "ax2=H1W0M7['count'].plot(style='b-')\n",
      "ax1.set_ylabel('Casual_count')\n",
      "ax2.set_ylabel('Registered / Total count')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 281,
       "text": [
        "<matplotlib.text.Text at 0x10ee27290>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10ede2250>"
       ]
      }
     ],
     "prompt_number": 281
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Thus we see that the same kind of pattern is same for all the 3 kinds of counts ."
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Thus our segmentation is correct and now we can model for all the 4 segments separately "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "train.columns"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 284,
       "text": [
        "Index([u'season', u'holiday', u'workingday', u'weather', u'temp', u'atemp', u'humidity', u'windspeed', u'casual', u'registered', u'count', u'season1', u'season2', u'season3', u'weather1', u'weather2'], dtype='object')"
       ]
      }
     ],
     "prompt_number": 284
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Random Forests "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from sklearn import ensemble"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 353
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "clf = ensemble.RandomForestClassifier(n_estimators = 1000, n_jobs = -1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 354
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "clf.fit(H1W0[['humidity','windspeed','season1','season2','season3','weather1','weather2','temp','atemp']],H1W0['count'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 355,
       "text": [
        "RandomForestClassifier(bootstrap=True, compute_importances=None,\n",
        "            criterion='gini', max_depth=None, max_features='auto',\n",
        "            max_leaf_nodes=None, min_density=None, min_samples_leaf=1,\n",
        "            min_samples_split=2, n_estimators=1000, n_jobs=-1,\n",
        "            oob_score=False, random_state=None, verbose=0)"
       ]
      }
     ],
     "prompt_number": 355
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test=pd.read_csv('test.csv',parse_dates=['datetime'],index_col='datetime')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 356
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test.columns"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 357,
       "text": [
        "Index([u'season', u'holiday', u'workingday', u'weather', u'temp', u'atemp', u'humidity', u'windspeed'], dtype='object')"
       ]
      }
     ],
     "prompt_number": 357
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test['season'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 358,
       "text": [
        "3    1763\n",
        "2    1676\n",
        "1    1556\n",
        "4    1498\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 358
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test['weather'].value_counts()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 359,
       "text": [
        "1    4221\n",
        "2    1710\n",
        "3     560\n",
        "4       2\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 359
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test['season1']=0\n",
      "test['season2']=0\n",
      "test['season3']=0\n",
      "test['season1'][test['season']==1]=1\n",
      "test['season2'][test['season']==2]=1\n",
      "test['season3'][test['season']==3]=1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 360
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test['weather1']=0\n",
      "test['weather2']=0\n",
      "test['weather1'][test['weather']==1]=1\n",
      "test['weather2'][test['weather']==2]=2"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 361
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t_H1=test[test['holiday']==1]\n",
      "t_H1.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 362,
       "text": [
        "(189, 13)"
       ]
      }
     ],
     "prompt_number": 362
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t_H0=test[test['holiday']==0]\n",
      "t_H0.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 363,
       "text": [
        "(6304, 13)"
       ]
      }
     ],
     "prompt_number": 363
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t_W1=test[test['workingday']==1]\n",
      "t_W1.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 364,
       "text": [
        "(4453, 13)"
       ]
      }
     ],
     "prompt_number": 364
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t_W0=test[test['workingday']==0]\n",
      "t_W0.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 365,
       "text": [
        "(2040, 13)"
       ]
      }
     ],
     "prompt_number": 365
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t_H1W0=t_H1[t_H1['workingday']==0]\n",
      "t_H1W0.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 366,
       "text": [
        "(189, 13)"
       ]
      }
     ],
     "prompt_number": 366
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t_H1W1=t_H1[t_H1['workingday']==1]\n",
      "t_H1W1.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 367,
       "text": [
        "(0, 13)"
       ]
      }
     ],
     "prompt_number": 367
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t_H0W0=t_H0[t_H0['workingday']==0]\n",
      "t_H0W0.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 368,
       "text": [
        "(1851, 13)"
       ]
      }
     ],
     "prompt_number": 368
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t_H0W1=t_H0[t_H0['workingday']==1]\n",
      "t_H0W1.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 369,
       "text": [
        "(4453, 13)"
       ]
      }
     ],
     "prompt_number": 369
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So now we have divided the test DF also into 4 segments "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t_H1W0.columns"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 370,
       "text": [
        "Index([u'season', u'holiday', u'workingday', u'weather', u'temp', u'atemp', u'humidity', u'windspeed', u'season1', u'season2', u'season3', u'weather1', u'weather2'], dtype='object')"
       ]
      }
     ],
     "prompt_number": 370
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p_H1W0=clf.predict(t_H1W0[['humidity','windspeed','season1','season2','season3','weather1','weather2','temp','atemp']])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 371
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Similarly we can apply this model to other segments as well keeping the same number of estimators "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "clf.fit(H0W0[['humidity','windspeed','season1','season2','season3','weather1','weather2','temp','atemp']],H0W0['count'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 373,
       "text": [
        "RandomForestClassifier(bootstrap=True, compute_importances=None,\n",
        "            criterion='gini', max_depth=None, max_features='auto',\n",
        "            max_leaf_nodes=None, min_density=None, min_samples_leaf=1,\n",
        "            min_samples_split=2, n_estimators=1000, n_jobs=-1,\n",
        "            oob_score=False, random_state=None, verbose=0)"
       ]
      }
     ],
     "prompt_number": 373
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p_H0W0=clf.predict(t_H0W0[['humidity','windspeed','season1','season2','season3','weather1','weather2','temp','atemp']])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 374
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "clf.fit(H0W1[['humidity','windspeed','season1','season2','season3','weather1','weather2','temp','atemp']],H0W1['count'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 377,
       "text": [
        "RandomForestClassifier(bootstrap=True, compute_importances=None,\n",
        "            criterion='gini', max_depth=None, max_features='auto',\n",
        "            max_leaf_nodes=None, min_density=None, min_samples_leaf=1,\n",
        "            min_samples_split=2, n_estimators=1000, n_jobs=-1,\n",
        "            oob_score=False, random_state=None, verbose=0)"
       ]
      }
     ],
     "prompt_number": 377
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p_H0W1=clf.predict(t_H0W1[['humidity','windspeed','season1','season2','season3','weather1','weather2','temp','atemp']])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 379
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now we need to just combine the 3 predicted dfs into the test data to make the submission "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "!ls"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\u001b[34mArchive\u001b[m\u001b[m   ss.csv    test.csv  train.csv\r\n"
       ]
      }
     ],
     "prompt_number": 380
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ss=pd.read_csv('ss.csv')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 396
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ss.head(2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>datetime</th>\n",
        "      <th>count</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> 2011-01-20 00:00:00</td>\n",
        "      <td> 0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> 2011-01-20 01:00:00</td>\n",
        "      <td> 0</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 397,
       "text": [
        "              datetime  count\n",
        "0  2011-01-20 00:00:00      0\n",
        "1  2011-01-20 01:00:00      0"
       ]
      }
     ],
     "prompt_number": 397
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p_H0W1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 398,
       "text": [
        "array([344, 102, 102, ...,  71, 102,   3])"
       ]
      }
     ],
     "prompt_number": 398
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p_H0W0"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 399,
       "text": [
        "array([ 26,  46,  14, ...,  28,  72, 102])"
       ]
      }
     ],
     "prompt_number": 399
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p_H1W0"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 400,
       "text": [
        "array([ 43,  43,  43,  43, 199,  68, 126, 126,  43,  43,  43,  43,  43,\n",
        "        28,  43,  43,  28,  43,  66,  66,  28,  28, 185, 185,   8, 387,\n",
        "         8,   8, 133, 597, 597, 104, 114, 374, 271, 408, 584, 408, 499,\n",
        "       712, 712, 494, 494, 420, 293, 498, 374, 271,  19,  11,  11,   6,\n",
        "        73,  73,  73,  59,  73,  59,  24, 208, 208, 238, 238, 238, 238,\n",
        "       238,  49,   4,  59,  59,  59,  59,  71,  49,  12,   4,  12,   4,\n",
        "         4,   4,   4, 170, 200,  12,  12,  12, 208,  12,  12,  73,  73,\n",
        "        73,  68,  68,  90,  93,  93,  93,  93,  66, 181,  39, 185, 185,\n",
        "       185, 193,   4, 176, 176,   7, 126, 126,   7,   7, 238, 199,  73,\n",
        "        68, 297, 597, 133, 297,   8,   8, 297, 297,  27, 365, 365, 271,\n",
        "       271, 502, 502, 502, 502, 502, 502, 712, 288, 288, 357, 374,  73,\n",
        "        73,  73,  59,   7,  59,  59,   8,   8,  73,  59,  49,  68, 238,\n",
        "       676, 676, 238,  68, 264,  24,  24,  59,  24,  24,  44, 154, 154,\n",
        "        93,  93,  93,  93,  24,  24,  24,  73,  59,  39,  12,  12,  43,\n",
        "        43,  43,  43,  43,  43, 154,  43])"
       ]
      }
     ],
     "prompt_number": 400
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ss=pd.read_csv('ss.csv',parse_dates=['datetime'],index_col='datetime')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 401
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ss['count'][t_H0W0.index]=p_H0W0"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 409
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ss['count'][t_H0W1.index]=p_H0W1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 410
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ss['count'][t_H1W0.index]=p_H1W0"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 411
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ss['datetime']=0"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 421
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ss['datetime']=ss.index"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 422
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ss.to_csv('segment4.csv',index=False)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 425
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We see we get a very bad score with this model . So we will try the regression technique instead of the random forests "
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Multilinear regression "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from sklearn import  linear_model"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 456
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "regr = linear_model.LinearRegression()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 457
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "regr.fit(H0W1[['humidity','windspeed','season1','season2','season3','weather1','weather2','temp','atemp']],H0W1['count'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 458,
       "text": [
        "LinearRegression(copy_X=True, fit_intercept=True, normalize=False)"
       ]
      }
     ],
     "prompt_number": 458
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "regr.coef_"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 459,
       "text": [
        "array([ -2.3827958 ,   0.83364019, -67.18480788, -59.59483885,\n",
        "       -82.18925668,  28.18128151,  36.53485913,   7.46424674,   1.63066373])"
       ]
      }
     ],
     "prompt_number": 459
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p_H0W1=regr.predict(t_H0W1[['humidity','windspeed','season1','season2','season3','weather1','weather2','temp','atemp']])\n",
      "p_H0W1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 460,
       "text": [
        "array([ 110.03323039,   92.05794134,   92.05794134, ...,   90.46681617,\n",
        "         99.55911912,   78.11395687])"
       ]
      }
     ],
     "prompt_number": 460
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p_H0W1.astype(int)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 461,
       "text": [
        "array([110,  92,  92, ...,  90,  99,  78])"
       ]
      }
     ],
     "prompt_number": 461
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p_H0W1=p_H0W1.astype(int)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 462
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(p_H0W1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 463,
       "text": [
        "4453"
       ]
      }
     ],
     "prompt_number": 463
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(t_H0W1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 464,
       "text": [
        "4453"
       ]
      }
     ],
     "prompt_number": 464
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "regr.fit(H0W0[['humidity','windspeed','season1','season2','season3','weather1','weather2','temp','atemp']],H0W0['count'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 465,
       "text": [
        "LinearRegression(copy_X=True, fit_intercept=True, normalize=False)"
       ]
      }
     ],
     "prompt_number": 465
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p_H0W0=regr.predict(t_H0W0[['humidity','windspeed','season1','season2','season3','weather1','weather2','temp','atemp']])\n",
      "p_H0W0=p_H0W0.astype(int)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 466
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(p_H0W0)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 467,
       "text": [
        "1851"
       ]
      }
     ],
     "prompt_number": 467
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "regr.fit(H1W0[['humidity','windspeed','season1','season2','season3','weather1','weather2','temp','atemp']],H1W0['count'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 468,
       "text": [
        "LinearRegression(copy_X=True, fit_intercept=True, normalize=False)"
       ]
      }
     ],
     "prompt_number": 468
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p_H1W0=regr.predict(t_H1W0[['humidity','windspeed','season1','season2','season3','weather1','weather2','temp','atemp']])\n",
      "p_H1W0=p_H1W0.astype(int)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 469
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(p_H1W0)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 470,
       "text": [
        "189"
       ]
      }
     ],
     "prompt_number": 470
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p_H1W0"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 471,
       "text": [
        "array([190, 190, 190, 186, 155, 230, 353, 351, 141, 139, 135, 148, 115,\n",
        "        78,  75,  91,  80,  54, -29, -29,  31,  46,  13,  13, 100,  92,\n",
        "       100, 100,  84,  98, 109,  97, 156, 283, 416, 405, 460, 451, 468,\n",
        "       502, 496, 479, 471, 212, 331, 298, 293, 224, 118, 127, 100,  71,\n",
        "       107, 109, 107,  22,  94, 120, 162, 291, 323, 345, 375, 369, 363,\n",
        "       329, 235, 211,  91, 107, 107,  87, -19,  82, 157, 150, 175, 155,\n",
        "       159, 168, 150, 177, 172, 195, 260, 264, 254, 187, 157, 149,  85,\n",
        "       114,  48,  48,  29, -16, -16, -16, -15,  56,  51,  55,  11,  11,\n",
        "        49,  85, 121, 152, 188, 195, 256, 295, 195, 195, 207, 162, 149,\n",
        "       172, 159, 224, 146, 199, 166, 166, 199, 175, 215, 266, 266, 298,\n",
        "       336, 427, 427, 448, 452, 448, 426, 422, 387, 360, 302, 293, 104,\n",
        "        81,   8,  10, -30,  10,  38, -15,  -2,  98, 160, 263, 283, 309,\n",
        "       328, 328, 303, 283, 232, 102, 105, 132, 124,  82,   2,  -9,  -9,\n",
        "       -16, -58, -58, -54,   4, -28,  26,  54,  63, 245, 241, 161, 183,\n",
        "       135, 107, 103, 111,  89,  86,  84])"
       ]
      }
     ],
     "prompt_number": 471
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p_H0W0[p_H0W0<1]=1\n",
      "p_H0W1[p_H0W1<1]=1\n",
      "p_H1W0[p_H1W0<1]=1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 472
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p_H1W0"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 473,
       "text": [
        "array([190, 190, 190, 186, 155, 230, 353, 351, 141, 139, 135, 148, 115,\n",
        "        78,  75,  91,  80,  54,   1,   1,  31,  46,  13,  13, 100,  92,\n",
        "       100, 100,  84,  98, 109,  97, 156, 283, 416, 405, 460, 451, 468,\n",
        "       502, 496, 479, 471, 212, 331, 298, 293, 224, 118, 127, 100,  71,\n",
        "       107, 109, 107,  22,  94, 120, 162, 291, 323, 345, 375, 369, 363,\n",
        "       329, 235, 211,  91, 107, 107,  87,   1,  82, 157, 150, 175, 155,\n",
        "       159, 168, 150, 177, 172, 195, 260, 264, 254, 187, 157, 149,  85,\n",
        "       114,  48,  48,  29,   1,   1,   1,   1,  56,  51,  55,  11,  11,\n",
        "        49,  85, 121, 152, 188, 195, 256, 295, 195, 195, 207, 162, 149,\n",
        "       172, 159, 224, 146, 199, 166, 166, 199, 175, 215, 266, 266, 298,\n",
        "       336, 427, 427, 448, 452, 448, 426, 422, 387, 360, 302, 293, 104,\n",
        "        81,   8,  10,   1,  10,  38,   1,   1,  98, 160, 263, 283, 309,\n",
        "       328, 328, 303, 283, 232, 102, 105, 132, 124,  82,   2,   1,   1,\n",
        "         1,   1,   1,   1,   4,   1,  26,  54,  63, 245, 241, 161, 183,\n",
        "       135, 107, 103, 111,  89,  86,  84])"
       ]
      }
     ],
     "prompt_number": 473
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ss=pd.read_csv('ss.csv',parse_dates=['datetime'],index_col='datetime')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 474
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ss['count'][t_H0W0.index]=p_H0W0\n",
      "ss['count'][t_H0W1.index]=p_H0W1\n",
      "ss['count'][t_H1W0.index]=p_H1W0\n",
      "ss['datetime']=0\n",
      "ss['datetime']=ss.index\n",
      "ss.to_csv('Regression.csv',index=False)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 475
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}